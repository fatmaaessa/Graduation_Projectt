
Control_Node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003eac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00003eac  00003f40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  00800070  00800070  00003f50  2**0
                  ALLOC
  3 .stab         00005004  00000000  00000000  00003f50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002dbe  00000000  00000000  00008f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000bd12  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000be72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000c001  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000e046  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000f147  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000100cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0001024c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0001050e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010d9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <__vector_1>
       8:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__vector_2>
       c:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0e 1c 	call	0x381c	; 0x381c <main>
      8a:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 25 1f 	jmp	0x3e4a	; 0x3e4a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 41 1f 	jmp	0x3e82	; 0x3e82 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2d 1f 	jmp	0x3e5a	; 0x3e5a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 49 1f 	jmp	0x3e92	; 0x3e92 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <USART_init>:

/********************************************* Functions Implementations **************************************/

/*********************************************************************************************/
USART_Error_t USART_init(USART_Config_t * Copy_StrPtr)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <USART_init+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9b 83       	std	Y+3, r25	; 0x03
     cac:	8a 83       	std	Y+2, r24	; 0x02
	USART_Error_t Local_ErrorState = USART_Error_t_RT_OK;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Copy_StrPtr)
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	9b 81       	ldd	r25, Y+3	; 0x03
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	19 f4       	brne	.+6      	; 0xcc0 <USART_init+0x22>
	{
		Local_ErrorState = USART_Error_t_RT_NULL_PTR;
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	89 83       	std	Y+1, r24	; 0x01
     cbe:	99 c0       	rjmp	.+306    	; 0xdf2 <USART_init+0x154>

#elif USART_MODE == USART_OperMode_t_Async
		//set the Asynchronous operation mode --> doNothing (because we can't set the USREL bit and clear the UMSEL bit at the same instruction)

		// set the speed mode
		USART_UCSRA &= (~(1<<1));
     cc0:	ab e2       	ldi	r26, 0x2B	; 43
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	eb e2       	ldi	r30, 0x2B	; 43
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	8d 7f       	andi	r24, 0xFD	; 253
     ccc:	8c 93       	st	X, r24
		USART_UCSRA |= ((Copy_StrPtr->usart_speed_slct)<<1);
     cce:	ab e2       	ldi	r26, 0x2B	; 43
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	eb e2       	ldi	r30, 0x2B	; 43
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	28 2f       	mov	r18, r24
     cda:	ea 81       	ldd	r30, Y+2	; 0x02
     cdc:	fb 81       	ldd	r31, Y+3	; 0x03
     cde:	84 81       	ldd	r24, Z+4	; 0x04
     ce0:	88 2f       	mov	r24, r24
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	82 2b       	or	r24, r18
     cea:	8c 93       	st	X, r24

		//set Baud rate to 9600
		if(USART_Speed_t_NormalSpeed == Copy_StrPtr->usart_speed_slct)
     cec:	ea 81       	ldd	r30, Y+2	; 0x02
     cee:	fb 81       	ldd	r31, Y+3	; 0x03
     cf0:	84 81       	ldd	r24, Z+4	; 0x04
     cf2:	88 23       	and	r24, r24
     cf4:	41 f4       	brne	.+16     	; 0xd06 <USART_init+0x68>
		{
			USART_UBRRH_UCSRC = 0;
     cf6:	e0 e4       	ldi	r30, 0x40	; 64
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	10 82       	st	Z, r1
			USART_UBRRL = 51;
     cfc:	e9 e2       	ldi	r30, 0x29	; 41
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	83 e3       	ldi	r24, 0x33	; 51
     d02:	80 83       	st	Z, r24
     d04:	0e c0       	rjmp	.+28     	; 0xd22 <USART_init+0x84>

		}
		else if(USART_Speed_t_DoubleSpeed == Copy_StrPtr->usart_speed_slct)
     d06:	ea 81       	ldd	r30, Y+2	; 0x02
     d08:	fb 81       	ldd	r31, Y+3	; 0x03
     d0a:	84 81       	ldd	r24, Z+4	; 0x04
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	41 f4       	brne	.+16     	; 0xd20 <USART_init+0x82>
		{
			USART_UBRRH_UCSRC = 0;
     d10:	e0 e4       	ldi	r30, 0x40	; 64
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	10 82       	st	Z, r1
			USART_UBRRL = 103;
     d16:	e9 e2       	ldi	r30, 0x29	; 41
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	87 e6       	ldi	r24, 0x67	; 103
     d1c:	80 83       	st	Z, r24
     d1e:	01 c0       	rjmp	.+2      	; 0xd22 <USART_init+0x84>
		}
		else{
			Local_ErrorState = USART_Error_t_RT_WRONG_CONFIG;
     d20:	19 82       	std	Y+1, r1	; 0x01
		Local_ErrorState = USART_Error_t_RT_WRONG_CONFIG;
#error "Wrong Operation Mode"
#endif

		// set the data size
		if(Copy_StrPtr->usart_charSize_slct == USART_CharcterSize_t_5)
     d22:	ea 81       	ldd	r30, Y+2	; 0x02
     d24:	fb 81       	ldd	r31, Y+3	; 0x03
     d26:	81 81       	ldd	r24, Z+1	; 0x01
     d28:	88 23       	and	r24, r24
     d2a:	21 f1       	breq	.+72     	; 0xd74 <USART_init+0xd6>
		{
			//DoNothing --> Because we can't set URSEL and clear  UCSZ1 and UCSZ0 at the same time.
		}
		else if(Copy_StrPtr->usart_charSize_slct == USART_CharcterSize_t_9)
     d2c:	ea 81       	ldd	r30, Y+2	; 0x02
     d2e:	fb 81       	ldd	r31, Y+3	; 0x03
     d30:	81 81       	ldd	r24, Z+1	; 0x01
     d32:	84 30       	cpi	r24, 0x04	; 4
     d34:	79 f4       	brne	.+30     	; 0xd54 <USART_init+0xb6>
		{
			USART_UCSRB |= (1<<2);
     d36:	aa e2       	ldi	r26, 0x2A	; 42
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	ea e2       	ldi	r30, 0x2A	; 42
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	84 60       	ori	r24, 0x04	; 4
     d42:	8c 93       	st	X, r24
			USART_UBRRH_UCSRC |= ((1<<7) | (0b11<<1));
     d44:	a0 e4       	ldi	r26, 0x40	; 64
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e0 e4       	ldi	r30, 0x40	; 64
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	86 68       	ori	r24, 0x86	; 134
     d50:	8c 93       	st	X, r24
     d52:	10 c0       	rjmp	.+32     	; 0xd74 <USART_init+0xd6>
		}
		else
		{
			USART_UBRRH_UCSRC |= ((1<<7) | (Copy_StrPtr->usart_charSize_slct << 1));
     d54:	a0 e4       	ldi	r26, 0x40	; 64
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e0 e4       	ldi	r30, 0x40	; 64
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	28 2f       	mov	r18, r24
     d60:	ea 81       	ldd	r30, Y+2	; 0x02
     d62:	fb 81       	ldd	r31, Y+3	; 0x03
     d64:	81 81       	ldd	r24, Z+1	; 0x01
     d66:	88 2f       	mov	r24, r24
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	80 68       	ori	r24, 0x80	; 128
     d70:	82 2b       	or	r24, r18
     d72:	8c 93       	st	X, r24
		}


		//set the parity mode
		if(Copy_StrPtr->usart_parity == USART_ParityMode_t_Disable)
     d74:	ea 81       	ldd	r30, Y+2	; 0x02
     d76:	fb 81       	ldd	r31, Y+3	; 0x03
     d78:	82 81       	ldd	r24, Z+2	; 0x02
     d7a:	88 23       	and	r24, r24
     d7c:	a1 f0       	breq	.+40     	; 0xda6 <USART_init+0x108>
		{
			//DoNothing --> Because we can't set URSEL and clear UPM1 and UPM0 at the same time.
		}
		else
		{
			USART_UBRRH_UCSRC |= ((1<<7) | (Copy_StrPtr->usart_parity << 4));
     d7e:	a0 e4       	ldi	r26, 0x40	; 64
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e0 e4       	ldi	r30, 0x40	; 64
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	28 2f       	mov	r18, r24
     d8a:	ea 81       	ldd	r30, Y+2	; 0x02
     d8c:	fb 81       	ldd	r31, Y+3	; 0x03
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	88 2f       	mov	r24, r24
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	82 95       	swap	r24
     d96:	92 95       	swap	r25
     d98:	90 7f       	andi	r25, 0xF0	; 240
     d9a:	98 27       	eor	r25, r24
     d9c:	80 7f       	andi	r24, 0xF0	; 240
     d9e:	98 27       	eor	r25, r24
     da0:	80 68       	ori	r24, 0x80	; 128
     da2:	82 2b       	or	r24, r18
     da4:	8c 93       	st	X, r24
		}

		// set the stop bit
		if(Copy_StrPtr->usart_stopBits_slct == USART_StopBitSlct_t_OneBit)
     da6:	ea 81       	ldd	r30, Y+2	; 0x02
     da8:	fb 81       	ldd	r31, Y+3	; 0x03
     daa:	83 81       	ldd	r24, Z+3	; 0x03
     dac:	88 23       	and	r24, r24
     dae:	39 f0       	breq	.+14     	; 0xdbe <USART_init+0x120>
		{
			//DoNothing --> Because we can't set URSEL and clear USBS at the same time.
		}
		else
		{
			USART_UBRRH_UCSRC |= ((1 << 7) | (1 << 3));
     db0:	a0 e4       	ldi	r26, 0x40	; 64
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e0 e4       	ldi	r30, 0x40	; 64
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	88 68       	ori	r24, 0x88	; 136
     dbc:	8c 93       	st	X, r24
		}

		// enable the usart
		USART_UCSRB &= (~(0b11<<3));			//to clear bit3 and bit4
     dbe:	aa e2       	ldi	r26, 0x2A	; 42
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	ea e2       	ldi	r30, 0x2A	; 42
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	87 7e       	andi	r24, 0xE7	; 231
     dca:	8c 93       	st	X, r24
		USART_UCSRB |= (Copy_StrPtr->usart_circuit_enable << 3);
     dcc:	aa e2       	ldi	r26, 0x2A	; 42
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	ea e2       	ldi	r30, 0x2A	; 42
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	28 2f       	mov	r18, r24
     dd8:	ea 81       	ldd	r30, Y+2	; 0x02
     dda:	fb 81       	ldd	r31, Y+3	; 0x03
     ddc:	80 81       	ld	r24, Z
     dde:	88 2f       	mov	r24, r24
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	82 2b       	or	r24, r18
     df0:	8c 93       	st	X, r24
	}

	return Local_ErrorState;
     df2:	89 81       	ldd	r24, Y+1	; 0x01
}
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <USART_SendData>:
/*********************************************************************************************/

/*********************************************************************************************/
USART_Error_t USART_SendData(s16 Copy_s16Data)
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	00 d0       	rcall	.+0      	; 0xe06 <USART_SendData+0x6>
     e06:	0f 92       	push	r0
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	9b 83       	std	Y+3, r25	; 0x03
     e0e:	8a 83       	std	Y+2, r24	; 0x02
	USART_Error_t Local_ErrorState = USART_Error_t_RT_OK;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	89 83       	std	Y+1, r24	; 0x01

	while(!GET_BIT(USART_UCSRA,5));
     e14:	eb e2       	ldi	r30, 0x2B	; 43
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	82 95       	swap	r24
     e1c:	86 95       	lsr	r24
     e1e:	87 70       	andi	r24, 0x07	; 7
     e20:	88 2f       	mov	r24, r24
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	81 70       	andi	r24, 0x01	; 1
     e26:	90 70       	andi	r25, 0x00	; 0
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	a1 f3       	breq	.-24     	; 0xe14 <USART_SendData+0x14>

	USART_UDR = Copy_s16Data;
     e2c:	ec e2       	ldi	r30, 0x2C	; 44
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	80 83       	st	Z, r24

	return Local_ErrorState;
     e34:	89 81       	ldd	r24, Y+1	; 0x01

}
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <USART_ReceiveData>:
/*********************************************************************************************/

/*********************************************************************************************/
USART_Error_t USART_ReceiveData(s16 * Copy_Ps16Data)
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	00 d0       	rcall	.+0      	; 0xe48 <USART_ReceiveData+0x6>
     e48:	0f 92       	push	r0
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	9b 83       	std	Y+3, r25	; 0x03
     e50:	8a 83       	std	Y+2, r24	; 0x02
	USART_Error_t Local_ErrorState = USART_Error_t_RT_OK;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	89 83       	std	Y+1, r24	; 0x01

	if(NULL == Copy_Ps16Data)
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	9b 81       	ldd	r25, Y+3	; 0x03
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	19 f4       	brne	.+6      	; 0xe64 <USART_ReceiveData+0x22>
	{
		Local_ErrorState = USART_Error_t_RT_NULL_PTR;
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	89 83       	std	Y+1, r24	; 0x01
     e62:	0e c0       	rjmp	.+28     	; 0xe80 <USART_ReceiveData+0x3e>
	}
	else
	{
		while(!GET_BIT(USART_UCSRA, 7));
     e64:	eb e2       	ldi	r30, 0x2B	; 43
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 23       	and	r24, r24
     e6c:	dc f7       	brge	.-10     	; 0xe64 <USART_ReceiveData+0x22>

		*Copy_Ps16Data = (u16)USART_UDR;
     e6e:	ec e2       	ldi	r30, 0x2C	; 44
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	ea 81       	ldd	r30, Y+2	; 0x02
     e7a:	fb 81       	ldd	r31, Y+3	; 0x03
     e7c:	91 83       	std	Z+1, r25	; 0x01
     e7e:	80 83       	st	Z, r24
	}

	return Local_ErrorState;
     e80:	89 81       	ldd	r24, Y+1	; 0x01
}
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <USART_ReceiveData_interrupt>:
/*********************************************************************************************/

/*********************************************************************************************/
USART_Error_t USART_ReceiveData_interrupt(void(* Local_Fptr)(u8))
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <USART_ReceiveData_interrupt+0x6>
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	9b 83       	std	Y+3, r25	; 0x03
     e9c:	8a 83       	std	Y+2, r24	; 0x02
	USART_Error_t Local_ErrorState = USART_Error_t_RT_OK;
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	89 83       	std	Y+1, r24	; 0x01

	if(NULL != Local_Fptr)
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	9b 81       	ldd	r25, Y+3	; 0x03
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	a9 f0       	breq	.+42     	; 0xed4 <USART_ReceiveData_interrupt+0x46>
	{
		USART_FPTR = Local_Fptr;
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	9b 81       	ldd	r25, Y+3	; 0x03
     eae:	90 93 71 00 	sts	0x0071, r25
     eb2:	80 93 70 00 	sts	0x0070, r24

		//Enable The Global Interrupt
		LIB_SREG |= (1<<7);
     eb6:	af e5       	ldi	r26, 0x5F	; 95
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	ef e5       	ldi	r30, 0x5F	; 95
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	80 68       	ori	r24, 0x80	; 128
     ec2:	8c 93       	st	X, r24

		//Enable RX Complete Interrupt
		USART_UCSRB |= (1<<7);
     ec4:	aa e2       	ldi	r26, 0x2A	; 42
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ea e2       	ldi	r30, 0x2A	; 42
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 68       	ori	r24, 0x80	; 128
     ed0:	8c 93       	st	X, r24
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <USART_ReceiveData_interrupt+0x4a>
	}
	else
	{
		Local_ErrorState = USART_Error_t_RT_NULL_PTR;
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_ErrorState;
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <__vector_13>:
/*********************************************************************************************/

ISR(USART_RXC_vect)
{
     ee6:	1f 92       	push	r1
     ee8:	0f 92       	push	r0
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	0f 92       	push	r0
     eee:	11 24       	eor	r1, r1
     ef0:	2f 93       	push	r18
     ef2:	3f 93       	push	r19
     ef4:	4f 93       	push	r20
     ef6:	5f 93       	push	r21
     ef8:	6f 93       	push	r22
     efa:	7f 93       	push	r23
     efc:	8f 93       	push	r24
     efe:	9f 93       	push	r25
     f00:	af 93       	push	r26
     f02:	bf 93       	push	r27
     f04:	ef 93       	push	r30
     f06:	ff 93       	push	r31
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	0f 92       	push	r0
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8_Received_Data = USART_UDR;
     f12:	ec e2       	ldi	r30, 0x2C	; 44
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	89 83       	std	Y+1, r24	; 0x01

	if(NULL != USART_FPTR)
     f1a:	80 91 70 00 	lds	r24, 0x0070
     f1e:	90 91 71 00 	lds	r25, 0x0071
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	31 f0       	breq	.+12     	; 0xf32 <__vector_13+0x4c>
	{
		USART_FPTR(Local_u8_Received_Data);
     f26:	e0 91 70 00 	lds	r30, 0x0070
     f2a:	f0 91 71 00 	lds	r31, 0x0071
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	09 95       	icall
	}

}
     f32:	0f 90       	pop	r0
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	ff 91       	pop	r31
     f3a:	ef 91       	pop	r30
     f3c:	bf 91       	pop	r27
     f3e:	af 91       	pop	r26
     f40:	9f 91       	pop	r25
     f42:	8f 91       	pop	r24
     f44:	7f 91       	pop	r23
     f46:	6f 91       	pop	r22
     f48:	5f 91       	pop	r21
     f4a:	4f 91       	pop	r20
     f4c:	3f 91       	pop	r19
     f4e:	2f 91       	pop	r18
     f50:	0f 90       	pop	r0
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	0f 90       	pop	r0
     f56:	1f 90       	pop	r1
     f58:	18 95       	reti

00000f5a <TIMER2_Init>:
 * 			- void
 * it returns:
 * 			- The error status (TIMER2_ERROR_t)
 */
TIMER2_ERROR_t TIMER2_Init(void)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	0f 92       	push	r0
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
	TIMER2_ERROR_t Local_ErrorStatus = TIMER2_ERROR_t_RT_OK;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	89 83       	std	Y+1, r24	; 0x01

#if TIMER2_MODE == FAST_PWM_MODE
	//Set the Fast PWM mode
	SET_BIT(TIMER2_TCCR2,6);
     f68:	a5 e4       	ldi	r26, 0x45	; 69
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e5 e4       	ldi	r30, 0x45	; 69
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	80 64       	ori	r24, 0x40	; 64
     f74:	8c 93       	st	X, r24
	SET_BIT(TIMER2_TCCR2,3);
     f76:	a5 e4       	ldi	r26, 0x45	; 69
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e5 e4       	ldi	r30, 0x45	; 69
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	88 60       	ori	r24, 0x08	; 8
     f82:	8c 93       	st	X, r24
	Local_ErrorStatus = TIMER2_ERROR_t_RT_NOK;
#error "Wrong Mode Option"

#endif

	return Local_ErrorStatus;
     f84:	89 81       	ldd	r24, Y+1	; 0x01
}
     f86:	0f 90       	pop	r0
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <TIMER2_FastPWM_SetOCMode>:
 * 			- the Output Compare, Fast_Pwm option (TIMER2_FASTPWM_OCMODE_t)
 * it returns:
 * 			- The error status (TIMER2_ERROR_t)
 */
TIMER2_ERROR_t TIMER2_FastPWM_SetOCMode(TIMER2_FASTPWM_OCMODE_t Copy_PWM_OCMode)
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	00 d0       	rcall	.+0      	; 0xf94 <TIMER2_FastPWM_SetOCMode+0x6>
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	8a 83       	std	Y+2, r24	; 0x02
	TIMER2_ERROR_t Local_ErrorStatus = TIMER2_ERROR_t_RT_OK;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_PWM_OCMode >= TIMER2_FASTPWM_OCMODE_t_OC0_Disconnected) && (Copy_PWM_OCMode <= TIMER2_FASTPWM_OCMODE_t_Set_On_Compare_Match_And_Clear_At_Top))
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	84 30       	cpi	r24, 0x04	; 4
     fa2:	18 f5       	brcc	.+70     	; 0xfea <TIMER2_FastPWM_SetOCMode+0x5c>
	{
		//Set the compare match output mode

		TIMER2_TCCR2 &= (~(0b11<<4));				//clear bits 4 and 5 in the TCCR0 register
     fa4:	a5 e4       	ldi	r26, 0x45	; 69
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e5 e4       	ldi	r30, 0x45	; 69
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	8f 7c       	andi	r24, 0xCF	; 207
     fb0:	8c 93       	st	X, r24
		TIMER2_TCCR2 |= (Copy_PWM_OCMode<<4);		//set the mode
     fb2:	a5 e4       	ldi	r26, 0x45	; 69
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e5 e4       	ldi	r30, 0x45	; 69
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	28 2f       	mov	r18, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	82 95       	swap	r24
     fc6:	92 95       	swap	r25
     fc8:	90 7f       	andi	r25, 0xF0	; 240
     fca:	98 27       	eor	r25, r24
     fcc:	80 7f       	andi	r24, 0xF0	; 240
     fce:	98 27       	eor	r25, r24
     fd0:	82 2b       	or	r24, r18
     fd2:	8c 93       	st	X, r24

		if(Copy_PWM_OCMode != TIMER2_FASTPWM_OCMODE_t_OC0_Disconnected)
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	88 23       	and	r24, r24
     fd8:	51 f0       	breq	.+20     	; 0xfee <TIMER2_FastPWM_SetOCMode+0x60>
		{
			//Set OC0 direction as output
			SET_BIT(TIMER2_DDRD,7);
     fda:	a1 e3       	ldi	r26, 0x31	; 49
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e1 e3       	ldi	r30, 0x31	; 49
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	80 68       	ori	r24, 0x80	; 128
     fe6:	8c 93       	st	X, r24
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <TIMER2_FastPWM_SetOCMode+0x60>
		}
	}
	else
	{
		Local_ErrorStatus = TIMER2_ERROR_t_RT_NOK;
     fea:	82 e0       	ldi	r24, 0x02	; 2
     fec:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorStatus;
     fee:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <TIMER2_SetClockSource>:
 * 			- The clock source (TIMER2_CLOCK_SOURCE_t)
 * it returns:
 * 			- The error status (TIMER2_ERROR_t)
 */
TIMER2_ERROR_t TIMER2_SetClockSource(TIMER2_CLOCK_SOURCE_t Copy_ClockSource)
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <TIMER2_SetClockSource+0x6>
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	8a 83       	std	Y+2, r24	; 0x02
	TIMER2_ERROR_t Local_ErrorStatus = TIMER2_ERROR_t_RT_OK;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_ClockSource >= TIMER2_CLOCK_SOURCE_t_SystemClock_With_No_Prescaler)
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	88 23       	and	r24, r24
    100e:	39 f0       	breq	.+14     	; 0x101e <TIMER2_SetClockSource+0x24>
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	88 30       	cpi	r24, 0x08	; 8
    1014:	20 f4       	brcc	.+8      	; 0x101e <TIMER2_SetClockSource+0x24>
			&& (Copy_ClockSource <= TIMER2_CLOCK_SOURCE_t_External_On_Rising_Edge))
	{
		//Store the clock source in a global variable
		TIMER2_CLOCK_SOURCE = Copy_ClockSource;
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	80 93 68 00 	sts	0x0068, r24
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <TIMER2_SetClockSource+0x28>
	}
	else
	{
		Local_ErrorStatus = TIMER2_ERROR_t_RT_NOK;
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorStatus;
    1022:	89 81       	ldd	r24, Y+1	; 0x01
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <TIMER2_StartTimer>:
 * 			- void
 * it returns:
 * 			- The error status (TIMER2_ERROR_t)
 */
TIMER2_ERROR_t TIMER2_StartTimer(void)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	0f 92       	push	r0
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
	TIMER2_ERROR_t Local_ErrorStatus = TIMER2_ERROR_t_RT_OK;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	89 83       	std	Y+1, r24	; 0x01

	//Set the clock source of TIMER2 and start the timer
	TIMER2_TCCR2 &= (~(0b111<<0));					//clear the bits 0, 1 and 2
    103c:	a5 e4       	ldi	r26, 0x45	; 69
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e5 e4       	ldi	r30, 0x45	; 69
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	88 7f       	andi	r24, 0xF8	; 248
    1048:	8c 93       	st	X, r24
	TIMER2_TCCR2 |= (TIMER2_CLOCK_SOURCE<<0);		//set the clock source
    104a:	a5 e4       	ldi	r26, 0x45	; 69
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e5 e4       	ldi	r30, 0x45	; 69
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	90 81       	ld	r25, Z
    1054:	80 91 68 00 	lds	r24, 0x0068
    1058:	89 2b       	or	r24, r25
    105a:	8c 93       	st	X, r24


	return Local_ErrorStatus;
    105c:	89 81       	ldd	r24, Y+1	; 0x01
}
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <TIMER2_StopTimer>:
 * 			- void
 * it returns:
 * 			- The error status (TIMER2_ERROR_t)
 */
TIMER2_ERROR_t TIMER2_StopTimer(void)
{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	0f 92       	push	r0
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
	TIMER2_ERROR_t Local_ErrorStatus = TIMER2_ERROR_t_RT_OK;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	89 83       	std	Y+1, r24	; 0x01

	//Stop the timer by setting no clock source
	TIMER2_TCCR2 &= (~(0b111<<0));					//clear the bits 0, 1 and 2
    1074:	a5 e4       	ldi	r26, 0x45	; 69
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e5 e4       	ldi	r30, 0x45	; 69
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	88 7f       	andi	r24, 0xF8	; 248
    1080:	8c 93       	st	X, r24

	return Local_ErrorStatus;
    1082:	89 81       	ldd	r24, Y+1	; 0x01
}
    1084:	0f 90       	pop	r0
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	08 95       	ret

0000108c <TIMER2_FastPWM_SetDutyCycle>:
 *			- the duty cycle (u8)
 *	it returns:
 *	  		- The error status (TIMER2_ERROR_t)
 */
TIMER2_ERROR_t TIMER2_FastPWM_SetDutyCycle(u8 Copy_u8_DutyCycle)
{
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	00 d0       	rcall	.+0      	; 0x1092 <TIMER2_FastPWM_SetDutyCycle+0x6>
    1092:	00 d0       	rcall	.+0      	; 0x1094 <TIMER2_FastPWM_SetDutyCycle+0x8>
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	8c 83       	std	Y+4, r24	; 0x04
	TIMER2_ERROR_t Local_ErrorStatus = TIMER2_ERROR_t_RT_OK;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	8b 83       	std	Y+3, r24	; 0x03

	u8 Local_u8_DutyCycleTicks = 0;
    109e:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8_OCMode = ((TIMER2_TCCR2>>4) & (0b11));   //Get the OC0 mode
    10a0:	e5 e4       	ldi	r30, 0x45	; 69
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	82 95       	swap	r24
    10a8:	8f 70       	andi	r24, 0x0F	; 15
    10aa:	83 70       	andi	r24, 0x03	; 3
    10ac:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8_DutyCycle >= 0) && (Copy_u8_DutyCycle <= 100))
    10ae:	8c 81       	ldd	r24, Y+4	; 0x04
    10b0:	85 36       	cpi	r24, 0x65	; 101
    10b2:	78 f5       	brcc	.+94     	; 0x1112 <TIMER2_FastPWM_SetDutyCycle+0x86>
	{
		Local_u8_DutyCycleTicks = (Copy_u8_DutyCycle * 255) / 100;
    10b4:	8c 81       	ldd	r24, Y+4	; 0x04
    10b6:	48 2f       	mov	r20, r24
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	ca 01       	movw	r24, r20
    10bc:	9c 01       	movw	r18, r24
    10be:	22 0f       	add	r18, r18
    10c0:	33 1f       	adc	r19, r19
    10c2:	c9 01       	movw	r24, r18
    10c4:	96 95       	lsr	r25
    10c6:	98 2f       	mov	r25, r24
    10c8:	88 27       	eor	r24, r24
    10ca:	97 95       	ror	r25
    10cc:	87 95       	ror	r24
    10ce:	82 1b       	sub	r24, r18
    10d0:	93 0b       	sbc	r25, r19
    10d2:	84 0f       	add	r24, r20
    10d4:	95 1f       	adc	r25, r21
    10d6:	24 e6       	ldi	r18, 0x64	; 100
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	b9 01       	movw	r22, r18
    10dc:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <__divmodhi4>
    10e0:	cb 01       	movw	r24, r22
    10e2:	8a 83       	std	Y+2, r24	; 0x02

		//Check the OC0 mode
		if((Local_u8_OCMode == TIMER2_FASTPWM_OCMODE_t_OC0_Disconnected) || (Local_u8_OCMode == TIMER2_FASTPWM_OCMODE_t_Clear_On_Compare_Match_And_Set_At_Top))
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	88 23       	and	r24, r24
    10e8:	19 f0       	breq	.+6      	; 0x10f0 <TIMER2_FastPWM_SetDutyCycle+0x64>
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	82 30       	cpi	r24, 0x02	; 2
    10ee:	29 f4       	brne	.+10     	; 0x10fa <TIMER2_FastPWM_SetDutyCycle+0x6e>
		{
			//The OC0 is disconnected or Non_Inverted mode
			TIMER2_OCR2 = Local_u8_DutyCycleTicks;
    10f0:	e3 e4       	ldi	r30, 0x43	; 67
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	80 83       	st	Z, r24
    10f8:	0e c0       	rjmp	.+28     	; 0x1116 <TIMER2_FastPWM_SetDutyCycle+0x8a>
		}
		else if(Local_u8_OCMode == TIMER2_FASTPWM_OCMODE_t_Set_On_Compare_Match_And_Clear_At_Top)
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	31 f4       	brne	.+12     	; 0x110c <TIMER2_FastPWM_SetDutyCycle+0x80>
		{
			//Inverted mode
			TIMER2_OCR2 = 255 - Local_u8_DutyCycleTicks;
    1100:	e3 e4       	ldi	r30, 0x43	; 67
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	80 95       	com	r24
    1108:	80 83       	st	Z, r24
    110a:	05 c0       	rjmp	.+10     	; 0x1116 <TIMER2_FastPWM_SetDutyCycle+0x8a>
		}
		else
		{
			Local_ErrorStatus = TIMER2_ERROR_t_RT_NOK;
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	8b 83       	std	Y+3, r24	; 0x03
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <TIMER2_FastPWM_SetDutyCycle+0x8a>
		}

	}
	else
	{
		Local_ErrorStatus = TIMER2_ERROR_t_RT_NOK;
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	8b 83       	std	Y+3, r24	; 0x03
	}

	return Local_ErrorStatus;
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	08 95       	ret

00001126 <TIMER0_Init>:
 * 			- void
 * it returns:
 * 			- The error status (TIMER0_ERROR_t)
 */
TIMER0_ERROR_t TIMER0_Init(void)
{
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	0f 92       	push	r0
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
	TIMER0_ERROR_t Local_ErrorStatus = TIMER0_ERROR_t_RT_OK;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	89 83       	std	Y+1, r24	; 0x01

#if TIMER0_MODE == FAST_PWM_MODE
	//Set the Fast PWM mode
	SET_BIT(TIMER0_TCCR0,6);
    1134:	a3 e5       	ldi	r26, 0x53	; 83
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e3 e5       	ldi	r30, 0x53	; 83
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	80 64       	ori	r24, 0x40	; 64
    1140:	8c 93       	st	X, r24
	SET_BIT(TIMER0_TCCR0,3);
    1142:	a3 e5       	ldi	r26, 0x53	; 83
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e3 e5       	ldi	r30, 0x53	; 83
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	88 60       	ori	r24, 0x08	; 8
    114e:	8c 93       	st	X, r24
	Local_ErrorStatus = TIMER0_ERROR_t_RT_NOK;
#error "Wrong Mode Option"

#endif

	return Local_ErrorStatus;
    1150:	89 81       	ldd	r24, Y+1	; 0x01
}
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <TIMER0_FastPWM_SetOCMode>:
 * 			- the Output Compare, Fast_Pwm option (TIMER0_FASTPWM_OCMODE_t)
 * it returns:
 * 			- The error status (TIMER0_ERROR_t)
 */
TIMER0_ERROR_t TIMER0_FastPWM_SetOCMode(TIMER0_FASTPWM_OCMODE_t Copy_PWM_OCMode)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <TIMER0_FastPWM_SetOCMode+0x6>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_ERROR_t Local_ErrorStatus = TIMER0_ERROR_t_RT_OK;
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_PWM_OCMode >= TIMER0_FASTPWM_OCMODE_t_OC0_Disconnected) && (Copy_PWM_OCMode <= TIMER0_FASTPWM_OCMODE_t_Set_On_Compare_Match_And_Clear_At_Top))
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	84 30       	cpi	r24, 0x04	; 4
    116e:	18 f5       	brcc	.+70     	; 0x11b6 <TIMER0_FastPWM_SetOCMode+0x5c>
	{
		//Set the compare match output mode

		TIMER0_TCCR0 &= (~(0b11<<4));				//clear bits 4 and 5 in the TCCR0 register
    1170:	a3 e5       	ldi	r26, 0x53	; 83
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e3 e5       	ldi	r30, 0x53	; 83
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	8f 7c       	andi	r24, 0xCF	; 207
    117c:	8c 93       	st	X, r24
		TIMER0_TCCR0 |= (Copy_PWM_OCMode<<4);		//set the mode
    117e:	a3 e5       	ldi	r26, 0x53	; 83
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e3 e5       	ldi	r30, 0x53	; 83
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	28 2f       	mov	r18, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	88 2f       	mov	r24, r24
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	82 95       	swap	r24
    1192:	92 95       	swap	r25
    1194:	90 7f       	andi	r25, 0xF0	; 240
    1196:	98 27       	eor	r25, r24
    1198:	80 7f       	andi	r24, 0xF0	; 240
    119a:	98 27       	eor	r25, r24
    119c:	82 2b       	or	r24, r18
    119e:	8c 93       	st	X, r24

		if(Copy_PWM_OCMode != TIMER0_FASTPWM_OCMODE_t_OC0_Disconnected)
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	88 23       	and	r24, r24
    11a4:	51 f0       	breq	.+20     	; 0x11ba <TIMER0_FastPWM_SetOCMode+0x60>
		{
			//Set OC0 direction as output
			SET_BIT(TIMER0_DDRB,3);
    11a6:	a7 e3       	ldi	r26, 0x37	; 55
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e7 e3       	ldi	r30, 0x37	; 55
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	88 60       	ori	r24, 0x08	; 8
    11b2:	8c 93       	st	X, r24
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <TIMER0_FastPWM_SetOCMode+0x60>
		}
	}
	else
	{
		Local_ErrorStatus = TIMER0_ERROR_t_RT_NOK;
    11b6:	82 e0       	ldi	r24, 0x02	; 2
    11b8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorStatus;
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <TIMER0_SetClockSource>:
 * 			- The clock source (TIMER0_CLOCK_SOURCE_t)
 * it returns:
 * 			- The error status (TIMER0_ERROR_t)
 */
TIMER0_ERROR_t TIMER0_SetClockSource(TIMER0_CLOCK_SOURCE_t Copy_ClockSource)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <TIMER0_SetClockSource+0x6>
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_ERROR_t Local_ErrorStatus = TIMER0_ERROR_t_RT_OK;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_ClockSource >= TIMER0_CLOCK_SOURCE_t_SystemClock_With_No_Prescaler)
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	88 23       	and	r24, r24
    11da:	39 f0       	breq	.+14     	; 0x11ea <TIMER0_SetClockSource+0x24>
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	88 30       	cpi	r24, 0x08	; 8
    11e0:	20 f4       	brcc	.+8      	; 0x11ea <TIMER0_SetClockSource+0x24>
			&& (Copy_ClockSource <= TIMER0_CLOCK_SOURCE_t_External_On_Rising_Edge))
	{
		//Store the clock source in a global variable
		TIMER0_CLOCK_SOURCE = Copy_ClockSource;
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	80 93 69 00 	sts	0x0069, r24
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <TIMER0_SetClockSource+0x28>
	}
	else
	{
		Local_ErrorStatus = TIMER0_ERROR_t_RT_NOK;
    11ea:	82 e0       	ldi	r24, 0x02	; 2
    11ec:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorStatus;
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <TIMER0_StartTimer>:
 * 			- void
 * it returns:
 * 			- The error status (TIMER0_ERROR_t)
 */
TIMER0_ERROR_t TIMER0_StartTimer(void)
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	0f 92       	push	r0
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
	TIMER0_ERROR_t Local_ErrorStatus = TIMER0_ERROR_t_RT_OK;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	89 83       	std	Y+1, r24	; 0x01

	//Set the clock source of TIMER0 and start the timer
	TIMER0_TCCR0 &= (~(0b111<<0));					//clear the bits 0, 1 and 2
    1208:	a3 e5       	ldi	r26, 0x53	; 83
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e3 e5       	ldi	r30, 0x53	; 83
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	88 7f       	andi	r24, 0xF8	; 248
    1214:	8c 93       	st	X, r24
	TIMER0_TCCR0 |= (TIMER0_CLOCK_SOURCE<<0);		//set the clock source
    1216:	a3 e5       	ldi	r26, 0x53	; 83
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e3 e5       	ldi	r30, 0x53	; 83
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	90 81       	ld	r25, Z
    1220:	80 91 69 00 	lds	r24, 0x0069
    1224:	89 2b       	or	r24, r25
    1226:	8c 93       	st	X, r24


	return Local_ErrorStatus;
    1228:	89 81       	ldd	r24, Y+1	; 0x01
}
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <TIMER0_StopTimer>:
 * 			- void
 * it returns:
 * 			- The error status (TIMER0_ERROR_t)
 */
TIMER0_ERROR_t TIMER0_StopTimer(void)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	0f 92       	push	r0
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
	TIMER0_ERROR_t Local_ErrorStatus = TIMER0_ERROR_t_RT_OK;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	89 83       	std	Y+1, r24	; 0x01

	//Stop the timer by setting no clock source
	TIMER0_TCCR0 &= (~(0b111<<0));					//clear the bits 0, 1 and 2
    1240:	a3 e5       	ldi	r26, 0x53	; 83
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e3 e5       	ldi	r30, 0x53	; 83
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	88 7f       	andi	r24, 0xF8	; 248
    124c:	8c 93       	st	X, r24

	return Local_ErrorStatus;
    124e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1250:	0f 90       	pop	r0
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <TIMER0_FastPWM_SetDutyCycle>:
 *			- the duty cycle (u8)
 *	it returns:
 *	  		- The error status (TIMER0_ERROR_t)
 */
TIMER0_ERROR_t TIMER0_FastPWM_SetDutyCycle(u8 Copy_u8_DutyCycle)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	00 d0       	rcall	.+0      	; 0x125e <TIMER0_FastPWM_SetDutyCycle+0x6>
    125e:	00 d0       	rcall	.+0      	; 0x1260 <TIMER0_FastPWM_SetDutyCycle+0x8>
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	8c 83       	std	Y+4, r24	; 0x04
	TIMER0_ERROR_t Local_ErrorStatus = TIMER0_ERROR_t_RT_OK;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	8b 83       	std	Y+3, r24	; 0x03

	u8 Local_u8_DutyCycleTicks = 0;
    126a:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8_OCMode = ((TIMER0_TCCR0>>4) & (0b11));   //Get the OC0 mode
    126c:	e3 e5       	ldi	r30, 0x53	; 83
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	82 95       	swap	r24
    1274:	8f 70       	andi	r24, 0x0F	; 15
    1276:	83 70       	andi	r24, 0x03	; 3
    1278:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8_DutyCycle >= 0) && (Copy_u8_DutyCycle <= 100))
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	85 36       	cpi	r24, 0x65	; 101
    127e:	78 f5       	brcc	.+94     	; 0x12de <TIMER0_FastPWM_SetDutyCycle+0x86>
	{
		Local_u8_DutyCycleTicks = (Copy_u8_DutyCycle * 255) / 100;
    1280:	8c 81       	ldd	r24, Y+4	; 0x04
    1282:	48 2f       	mov	r20, r24
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	ca 01       	movw	r24, r20
    1288:	9c 01       	movw	r18, r24
    128a:	22 0f       	add	r18, r18
    128c:	33 1f       	adc	r19, r19
    128e:	c9 01       	movw	r24, r18
    1290:	96 95       	lsr	r25
    1292:	98 2f       	mov	r25, r24
    1294:	88 27       	eor	r24, r24
    1296:	97 95       	ror	r25
    1298:	87 95       	ror	r24
    129a:	82 1b       	sub	r24, r18
    129c:	93 0b       	sbc	r25, r19
    129e:	84 0f       	add	r24, r20
    12a0:	95 1f       	adc	r25, r21
    12a2:	24 e6       	ldi	r18, 0x64	; 100
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	b9 01       	movw	r22, r18
    12a8:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <__divmodhi4>
    12ac:	cb 01       	movw	r24, r22
    12ae:	8a 83       	std	Y+2, r24	; 0x02

		//Check the OC0 mode
		if((Local_u8_OCMode == TIMER0_FASTPWM_OCMODE_t_OC0_Disconnected) || (Local_u8_OCMode == TIMER0_FASTPWM_OCMODE_t_Clear_On_Compare_Match_And_Set_At_Top))
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	88 23       	and	r24, r24
    12b4:	19 f0       	breq	.+6      	; 0x12bc <TIMER0_FastPWM_SetDutyCycle+0x64>
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	82 30       	cpi	r24, 0x02	; 2
    12ba:	29 f4       	brne	.+10     	; 0x12c6 <TIMER0_FastPWM_SetDutyCycle+0x6e>
		{
			//The OC0 is disconnected or Non_Inverted mode
			TIMER0_OCR0 = Local_u8_DutyCycleTicks;
    12bc:	ec e5       	ldi	r30, 0x5C	; 92
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	80 83       	st	Z, r24
    12c4:	0e c0       	rjmp	.+28     	; 0x12e2 <TIMER0_FastPWM_SetDutyCycle+0x8a>
		}
		else if(Local_u8_OCMode == TIMER0_FASTPWM_OCMODE_t_Set_On_Compare_Match_And_Clear_At_Top)
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	83 30       	cpi	r24, 0x03	; 3
    12ca:	31 f4       	brne	.+12     	; 0x12d8 <TIMER0_FastPWM_SetDutyCycle+0x80>
		{
			//Inverted mode
			TIMER0_OCR0 = 255 - Local_u8_DutyCycleTicks;
    12cc:	ec e5       	ldi	r30, 0x5C	; 92
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	80 95       	com	r24
    12d4:	80 83       	st	Z, r24
    12d6:	05 c0       	rjmp	.+10     	; 0x12e2 <TIMER0_FastPWM_SetDutyCycle+0x8a>
		}
		else
		{
			Local_ErrorStatus = TIMER0_ERROR_t_RT_NOK;
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	8b 83       	std	Y+3, r24	; 0x03
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <TIMER0_FastPWM_SetDutyCycle+0x8a>
		}

	}
	else
	{
		Local_ErrorStatus = TIMER0_ERROR_t_RT_NOK;
    12de:	82 e0       	ldi	r24, 0x02	; 2
    12e0:	8b 83       	std	Y+3, r24	; 0x03
	}

	return Local_ErrorStatus;
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <MSPI_voidSpiMasterInit>:
 @Brief     :
 @Parameter :
 @Return    :
 */
void MSPI_voidSpiMasterInit(void)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	0f 92       	push	r0
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
	u8 temp_SPCR = 0;
    12fc:	19 82       	std	Y+1, r1	; 0x01

	// Set MOSI pin direction output
	DIO_u8setPinDir(DIO_PORT_B,DIO_PIN_4,DIO_OUTPUT);
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	64 e0       	ldi	r22, 0x04	; 4
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_u8setPinDir>
	DIO_u8setPinDir(DIO_PORT_B,DIO_PIN_5,DIO_OUTPUT);
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	65 e0       	ldi	r22, 0x05	; 5
    130c:	41 e0       	ldi	r20, 0x01	; 1
    130e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_u8setPinDir>
	DIO_u8setPinDir(DIO_PORT_B,DIO_PIN_6,DIO_INPUT);
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	66 e0       	ldi	r22, 0x06	; 6
    1316:	40 e0       	ldi	r20, 0x00	; 0
    1318:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_u8setPinDir>
	DIO_u8setPinVal(DIO_PORT_B,DIO_PIN_6,DIO_HIGH);
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	66 e0       	ldi	r22, 0x06	; 6
    1320:	41 e0       	ldi	r20, 0x01	; 1
    1322:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
	DIO_u8setPinDir(DIO_PORT_B,DIO_PIN_7,DIO_OUTPUT);
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	67 e0       	ldi	r22, 0x07	; 7
    132a:	41 e0       	ldi	r20, 0x01	; 1
    132c:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_u8setPinDir>
//	DIO_VidSetPinValue(DIO_PORTB, DIO_PIN7, DIO_LOW);

	// enable SPI
	SET_BIT(temp_SPCR, 6);
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	80 64       	ori	r24, 0x40	; 64
    1334:	89 83       	std	Y+1, r24	; 0x01

	// data order >>>> transmit MSB first
	CLR_BIT(temp_SPCR, 5);
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	8f 7d       	andi	r24, 0xDF	; 223
    133a:	89 83       	std	Y+1, r24	; 0x01

	// configure SS pin as output and choose master spi mode
	//DIO_VidSetPinDirection(DIO_PORTB, DIO_PIN4, DIO_OUTPUT);
	//DIO_VidSetPinValue(DIO_PORTB, DIO_PIN4, DIO_HIGH);
	SET_BIT(temp_SPCR, 4);
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	80 61       	ori	r24, 0x10	; 16
    1340:	89 83       	std	Y+1, r24	; 0x01


	// clock polarity >>> leading rising edge
	CLR_BIT(temp_SPCR, 3);
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	87 7f       	andi	r24, 0xF7	; 247
    1346:	89 83       	std	Y+1, r24	; 0x01

	// clock phase >>>> sampling at rising edge
	CLR_BIT(temp_SPCR, 2);
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	8b 7f       	andi	r24, 0xFB	; 251
    134c:	89 83       	std	Y+1, r24	; 0x01

	// clock oscillator >> F_CPU / 8
	SET_BIT(temp_SPCR, 0);
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	81 60       	ori	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(temp_SPCR, 1);
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	8d 7f       	andi	r24, 0xFD	; 253
    1358:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(SPSR, 0);
    135a:	ae e2       	ldi	r26, 0x2E	; 46
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	ee e2       	ldi	r30, 0x2E	; 46
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	81 60       	ori	r24, 0x01	; 1
    1366:	8c 93       	st	X, r24

	SPCR = temp_SPCR;
    1368:	ed e2       	ldi	r30, 0x2D	; 45
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	80 83       	st	Z, r24
}
    1370:	0f 90       	pop	r0
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <MSPI_voidSetPreSca>:
 @Brief     :
 @Parameter :
 @Return    :
 */
void MSPI_voidSetPreSca(u8 Copy_u8Presca_value)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	00 d0       	rcall	.+0      	; 0x137e <MSPI_voidSetPreSca+0x6>
    137e:	0f 92       	push	r0
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Presca_value)
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	3b 83       	std	Y+3, r19	; 0x03
    138e:	2a 83       	std	Y+2, r18	; 0x02
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	9b 81       	ldd	r25, Y+3	; 0x03
    1394:	83 30       	cpi	r24, 0x03	; 3
    1396:	91 05       	cpc	r25, r1
    1398:	09 f4       	brne	.+2      	; 0x139c <MSPI_voidSetPreSca+0x24>
    139a:	6a c0       	rjmp	.+212    	; 0x1470 <MSPI_voidSetPreSca+0xf8>
    139c:	2a 81       	ldd	r18, Y+2	; 0x02
    139e:	3b 81       	ldd	r19, Y+3	; 0x03
    13a0:	24 30       	cpi	r18, 0x04	; 4
    13a2:	31 05       	cpc	r19, r1
    13a4:	84 f4       	brge	.+32     	; 0x13c6 <MSPI_voidSetPreSca+0x4e>
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	9b 81       	ldd	r25, Y+3	; 0x03
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	91 05       	cpc	r25, r1
    13ae:	a1 f1       	breq	.+104    	; 0x1418 <MSPI_voidSetPreSca+0xa0>
    13b0:	2a 81       	ldd	r18, Y+2	; 0x02
    13b2:	3b 81       	ldd	r19, Y+3	; 0x03
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	0c f0       	brlt	.+2      	; 0x13bc <MSPI_voidSetPreSca+0x44>
    13ba:	44 c0       	rjmp	.+136    	; 0x1444 <MSPI_voidSetPreSca+0xcc>
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	9b 81       	ldd	r25, Y+3	; 0x03
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	a1 f0       	breq	.+40     	; 0x13ec <MSPI_voidSetPreSca+0x74>
    13c4:	ad c0       	rjmp	.+346    	; 0x1520 <MSPI_voidSetPreSca+0x1a8>
    13c6:	2a 81       	ldd	r18, Y+2	; 0x02
    13c8:	3b 81       	ldd	r19, Y+3	; 0x03
    13ca:	25 30       	cpi	r18, 0x05	; 5
    13cc:	31 05       	cpc	r19, r1
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <MSPI_voidSetPreSca+0x5a>
    13d0:	7b c0       	rjmp	.+246    	; 0x14c8 <MSPI_voidSetPreSca+0x150>
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	9b 81       	ldd	r25, Y+3	; 0x03
    13d6:	85 30       	cpi	r24, 0x05	; 5
    13d8:	91 05       	cpc	r25, r1
    13da:	0c f4       	brge	.+2      	; 0x13de <MSPI_voidSetPreSca+0x66>
    13dc:	5f c0       	rjmp	.+190    	; 0x149c <MSPI_voidSetPreSca+0x124>
    13de:	2a 81       	ldd	r18, Y+2	; 0x02
    13e0:	3b 81       	ldd	r19, Y+3	; 0x03
    13e2:	26 30       	cpi	r18, 0x06	; 6
    13e4:	31 05       	cpc	r19, r1
    13e6:	09 f4       	brne	.+2      	; 0x13ea <MSPI_voidSetPreSca+0x72>
    13e8:	85 c0       	rjmp	.+266    	; 0x14f4 <MSPI_voidSetPreSca+0x17c>
    13ea:	9a c0       	rjmp	.+308    	; 0x1520 <MSPI_voidSetPreSca+0x1a8>
	{
		/************************ ***/
		case 0:
			CLR_BIT(SPCR, 0);
    13ec:	ad e2       	ldi	r26, 0x2D	; 45
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	ed e2       	ldi	r30, 0x2D	; 45
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8e 7f       	andi	r24, 0xFE	; 254
    13f8:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    13fa:	ad e2       	ldi	r26, 0x2D	; 45
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	ed e2       	ldi	r30, 0x2D	; 45
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	8d 7f       	andi	r24, 0xFD	; 253
    1406:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    1408:	ae e2       	ldi	r26, 0x2E	; 46
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	ee e2       	ldi	r30, 0x2E	; 46
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	8e 7f       	andi	r24, 0xFE	; 254
    1414:	8c 93       	st	X, r24
    1416:	99 c0       	rjmp	.+306    	; 0x154a <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 1:
			SET_BIT(SPCR, 0);
    1418:	ad e2       	ldi	r26, 0x2D	; 45
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	ed e2       	ldi	r30, 0x2D	; 45
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	81 60       	ori	r24, 0x01	; 1
    1424:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    1426:	ad e2       	ldi	r26, 0x2D	; 45
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	ed e2       	ldi	r30, 0x2D	; 45
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	8d 7f       	andi	r24, 0xFD	; 253
    1432:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    1434:	ae e2       	ldi	r26, 0x2E	; 46
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	ee e2       	ldi	r30, 0x2E	; 46
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	8e 7f       	andi	r24, 0xFE	; 254
    1440:	8c 93       	st	X, r24
    1442:	83 c0       	rjmp	.+262    	; 0x154a <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 2:
			CLR_BIT(SPCR, 0);
    1444:	ad e2       	ldi	r26, 0x2D	; 45
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	ed e2       	ldi	r30, 0x2D	; 45
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	8e 7f       	andi	r24, 0xFE	; 254
    1450:	8c 93       	st	X, r24
			SET_BIT(SPCR, 1);
    1452:	ad e2       	ldi	r26, 0x2D	; 45
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ed e2       	ldi	r30, 0x2D	; 45
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	82 60       	ori	r24, 0x02	; 2
    145e:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    1460:	ae e2       	ldi	r26, 0x2E	; 46
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	ee e2       	ldi	r30, 0x2E	; 46
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	8e 7f       	andi	r24, 0xFE	; 254
    146c:	8c 93       	st	X, r24
    146e:	6d c0       	rjmp	.+218    	; 0x154a <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 3:
			SET_BIT(SPCR, 0);
    1470:	ad e2       	ldi	r26, 0x2D	; 45
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	ed e2       	ldi	r30, 0x2D	; 45
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	81 60       	ori	r24, 0x01	; 1
    147c:	8c 93       	st	X, r24
			SET_BIT(SPCR, 1);
    147e:	ad e2       	ldi	r26, 0x2D	; 45
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	ed e2       	ldi	r30, 0x2D	; 45
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	82 60       	ori	r24, 0x02	; 2
    148a:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    148c:	ae e2       	ldi	r26, 0x2E	; 46
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	ee e2       	ldi	r30, 0x2E	; 46
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	8e 7f       	andi	r24, 0xFE	; 254
    1498:	8c 93       	st	X, r24
    149a:	57 c0       	rjmp	.+174    	; 0x154a <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 4:
			CLR_BIT(SPCR, 0);
    149c:	ad e2       	ldi	r26, 0x2D	; 45
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	ed e2       	ldi	r30, 0x2D	; 45
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8e 7f       	andi	r24, 0xFE	; 254
    14a8:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    14aa:	ad e2       	ldi	r26, 0x2D	; 45
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	ed e2       	ldi	r30, 0x2D	; 45
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8d 7f       	andi	r24, 0xFD	; 253
    14b6:	8c 93       	st	X, r24
			SET_BIT(SPSR, 0);
    14b8:	ae e2       	ldi	r26, 0x2E	; 46
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	ee e2       	ldi	r30, 0x2E	; 46
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	81 60       	ori	r24, 0x01	; 1
    14c4:	8c 93       	st	X, r24
    14c6:	41 c0       	rjmp	.+130    	; 0x154a <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 5:
			SET_BIT(SPCR, 0);
    14c8:	ad e2       	ldi	r26, 0x2D	; 45
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	ed e2       	ldi	r30, 0x2D	; 45
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	81 60       	ori	r24, 0x01	; 1
    14d4:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    14d6:	ad e2       	ldi	r26, 0x2D	; 45
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	ed e2       	ldi	r30, 0x2D	; 45
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	8d 7f       	andi	r24, 0xFD	; 253
    14e2:	8c 93       	st	X, r24
			SET_BIT(SPSR, 0);
    14e4:	ae e2       	ldi	r26, 0x2E	; 46
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	ee e2       	ldi	r30, 0x2E	; 46
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	81 60       	ori	r24, 0x01	; 1
    14f0:	8c 93       	st	X, r24
    14f2:	2b c0       	rjmp	.+86     	; 0x154a <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 6:
			CLR_BIT(SPCR, 0);
    14f4:	ad e2       	ldi	r26, 0x2D	; 45
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	ed e2       	ldi	r30, 0x2D	; 45
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	8e 7f       	andi	r24, 0xFE	; 254
    1500:	8c 93       	st	X, r24
			SET_BIT(SPCR, 1);
    1502:	ad e2       	ldi	r26, 0x2D	; 45
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	ed e2       	ldi	r30, 0x2D	; 45
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	82 60       	ori	r24, 0x02	; 2
    150e:	8c 93       	st	X, r24
			SET_BIT(SPSR, 0);
    1510:	ae e2       	ldi	r26, 0x2E	; 46
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	ee e2       	ldi	r30, 0x2E	; 46
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	81 60       	ori	r24, 0x01	; 1
    151c:	8c 93       	st	X, r24
    151e:	15 c0       	rjmp	.+42     	; 0x154a <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		default :
			CLR_BIT(SPCR, 0);
    1520:	ad e2       	ldi	r26, 0x2D	; 45
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	ed e2       	ldi	r30, 0x2D	; 45
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	8e 7f       	andi	r24, 0xFE	; 254
    152c:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    152e:	ad e2       	ldi	r26, 0x2D	; 45
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	ed e2       	ldi	r30, 0x2D	; 45
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	8d 7f       	andi	r24, 0xFD	; 253
    153a:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    153c:	ae e2       	ldi	r26, 0x2E	; 46
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	ee e2       	ldi	r30, 0x2E	; 46
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	8e 7f       	andi	r24, 0xFE	; 254
    1548:	8c 93       	st	X, r24

		break;
	}
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <MSPI_VidChipSelect>:
 @Brief     :
 @Parameter :
 @Return    :
 */
void MSPI_VidChipSelect(u8 state)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	0f 92       	push	r0
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	89 83       	std	Y+1, r24	; 0x01
	if(state == 1)
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	31 f4       	brne	.+12     	; 0x1574 <MSPI_VidChipSelect+0x1e>
	{
		//MCAL_DIO_voidSETBIT(PB,PB4,LOW);
		DIO_u8setPinVal(DIO_PORT_B,DIO_PIN_4,DIO_LOW);
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	64 e0       	ldi	r22, 0x04	; 4
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
    1572:	05 c0       	rjmp	.+10     	; 0x157e <MSPI_VidChipSelect+0x28>
	}
	else
	{
		DIO_u8setPinVal(DIO_PORT_B,DIO_PIN_4,DIO_HIGH);
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	64 e0       	ldi	r22, 0x04	; 4
    1578:	41 e0       	ldi	r20, 0x01	; 1
    157a:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
	}
}
    157e:	0f 90       	pop	r0
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <MSPI_U8MasterTransmit>:
 @Brief     :
 @Parameter :
 @Return    :
 */
u8 MSPI_U8MasterTransmit(u8 Copy_u8SpiMessage)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	00 d0       	rcall	.+0      	; 0x158c <MSPI_U8MasterTransmit+0x6>
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	8a 83       	std	Y+2, r24	; 0x02
	u8 dataRead=0;
    1592:	19 82       	std	Y+1, r1	; 0x01
	SPDR = Copy_u8SpiMessage;
    1594:	ef e2       	ldi	r30, 0x2F	; 47
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	80 83       	st	Z, r24
	while(GET_BIT(SPSR, 7)==0);
    159c:	ee e2       	ldi	r30, 0x2E	; 46
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	88 23       	and	r24, r24
    15a4:	dc f7       	brge	.-10     	; 0x159c <MSPI_U8MasterTransmit+0x16>
	dataRead = SPDR;
    15a6:	ef e2       	ldi	r30, 0x2F	; 47
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	89 83       	std	Y+1, r24	; 0x01
	return dataRead;
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <EXTI_u8SetSource>:
static void (*INT0_Cbf_ptr)(void) = NULL;
static void (*INT1_Cbf_ptr)(void) = NULL;
static void (*INT2_Cbf_ptr)(void) = NULL;

//this function sets the interrupt source, it takes the external interrupt number and event;
u8 EXTI_u8SetSource(u8 Copy_u8INTx, u8 Copy_u8Source){
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	2b 97       	sbiw	r28, 0x0b	; 11
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	8a 83       	std	Y+2, r24	; 0x02
    15d0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Status = 0;
    15d2:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8INTx){
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	3b 87       	std	Y+11, r19	; 0x0b
    15dc:	2a 87       	std	Y+10, r18	; 0x0a
    15de:	8a 85       	ldd	r24, Y+10	; 0x0a
    15e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	91 05       	cpc	r25, r1
    15e6:	09 f4       	brne	.+2      	; 0x15ea <EXTI_u8SetSource+0x30>
    15e8:	77 c0       	rjmp	.+238    	; 0x16d8 <EXTI_u8SetSource+0x11e>
    15ea:	2a 85       	ldd	r18, Y+10	; 0x0a
    15ec:	3b 85       	ldd	r19, Y+11	; 0x0b
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <EXTI_u8SetSource+0x3c>
    15f4:	dd c0       	rjmp	.+442    	; 0x17b0 <EXTI_u8SetSource+0x1f6>
    15f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    15f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	09 f0       	breq	.+2      	; 0x1600 <EXTI_u8SetSource+0x46>
    15fe:	09 c1       	rjmp	.+530    	; 0x1812 <EXTI_u8SetSource+0x258>
	case EXTI_INT_0:
		CLR_BIT(EXTI_DDRD_REG, EXTI_PIN_2);  // make pd2 => input
    1600:	a1 e3       	ldi	r26, 0x31	; 49
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e1 e3       	ldi	r30, 0x31	; 49
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	8b 7f       	andi	r24, 0xFB	; 251
    160c:	8c 93       	st	X, r24
		SET_BIT(EXTI_PORTD_REG, EXTI_PIN_2);  //pull_up
    160e:	a2 e3       	ldi	r26, 0x32	; 50
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e2 e3       	ldi	r30, 0x32	; 50
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	84 60       	ori	r24, 0x04	; 4
    161a:	8c 93       	st	X, r24
		switch(Copy_u8Source){
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	39 87       	std	Y+9, r19	; 0x09
    1624:	28 87       	std	Y+8, r18	; 0x08
    1626:	88 85       	ldd	r24, Y+8	; 0x08
    1628:	99 85       	ldd	r25, Y+9	; 0x09
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	91 05       	cpc	r25, r1
    162e:	21 f1       	breq	.+72     	; 0x1678 <EXTI_u8SetSource+0xbe>
    1630:	28 85       	ldd	r18, Y+8	; 0x08
    1632:	39 85       	ldd	r19, Y+9	; 0x09
    1634:	22 30       	cpi	r18, 0x02	; 2
    1636:	31 05       	cpc	r19, r1
    1638:	2c f4       	brge	.+10     	; 0x1644 <EXTI_u8SetSource+0x8a>
    163a:	88 85       	ldd	r24, Y+8	; 0x08
    163c:	99 85       	ldd	r25, Y+9	; 0x09
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	61 f0       	breq	.+24     	; 0x165a <EXTI_u8SetSource+0xa0>
    1642:	47 c0       	rjmp	.+142    	; 0x16d2 <EXTI_u8SetSource+0x118>
    1644:	28 85       	ldd	r18, Y+8	; 0x08
    1646:	39 85       	ldd	r19, Y+9	; 0x09
    1648:	22 30       	cpi	r18, 0x02	; 2
    164a:	31 05       	cpc	r19, r1
    164c:	21 f1       	breq	.+72     	; 0x1696 <EXTI_u8SetSource+0xdc>
    164e:	88 85       	ldd	r24, Y+8	; 0x08
    1650:	99 85       	ldd	r25, Y+9	; 0x09
    1652:	83 30       	cpi	r24, 0x03	; 3
    1654:	91 05       	cpc	r25, r1
    1656:	71 f1       	breq	.+92     	; 0x16b4 <EXTI_u8SetSource+0xfa>
    1658:	3c c0       	rjmp	.+120    	; 0x16d2 <EXTI_u8SetSource+0x118>
		case EXTI_LOW_LEVEL:
			CLR_BIT(EXTI_MCUCR_REG, EXTI_PIN_0);
    165a:	a5 e5       	ldi	r26, 0x55	; 85
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e5 e5       	ldi	r30, 0x55	; 85
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	8e 7f       	andi	r24, 0xFE	; 254
    1666:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR_REG, EXTI_PIN_1);
    1668:	a5 e5       	ldi	r26, 0x55	; 85
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e5 e5       	ldi	r30, 0x55	; 85
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	8d 7f       	andi	r24, 0xFD	; 253
    1674:	8c 93       	st	X, r24
    1676:	cf c0       	rjmp	.+414    	; 0x1816 <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_ANY_CHANGE:
			SET_BIT(EXTI_MCUCR_REG,  EXTI_PIN_0);
    1678:	a5 e5       	ldi	r26, 0x55	; 85
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e5 e5       	ldi	r30, 0x55	; 85
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	81 60       	ori	r24, 0x01	; 1
    1684:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR_REG, EXTI_PIN_1);
    1686:	a5 e5       	ldi	r26, 0x55	; 85
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e5 e5       	ldi	r30, 0x55	; 85
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	8d 7f       	andi	r24, 0xFD	; 253
    1692:	8c 93       	st	X, r24
    1694:	c0 c0       	rjmp	.+384    	; 0x1816 <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_FALLING_EDGE:
			CLR_BIT(EXTI_MCUCR_REG,  EXTI_PIN_0);
    1696:	a5 e5       	ldi	r26, 0x55	; 85
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e5 e5       	ldi	r30, 0x55	; 85
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	8e 7f       	andi	r24, 0xFE	; 254
    16a2:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR_REG, EXTI_PIN_1);
    16a4:	a5 e5       	ldi	r26, 0x55	; 85
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e5 e5       	ldi	r30, 0x55	; 85
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	82 60       	ori	r24, 0x02	; 2
    16b0:	8c 93       	st	X, r24
    16b2:	b1 c0       	rjmp	.+354    	; 0x1816 <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(EXTI_MCUCR_REG,  EXTI_PIN_0);
    16b4:	a5 e5       	ldi	r26, 0x55	; 85
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e5 e5       	ldi	r30, 0x55	; 85
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	81 60       	ori	r24, 0x01	; 1
    16c0:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR_REG, EXTI_PIN_1);
    16c2:	a5 e5       	ldi	r26, 0x55	; 85
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e5 e5       	ldi	r30, 0x55	; 85
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	82 60       	ori	r24, 0x02	; 2
    16ce:	8c 93       	st	X, r24
    16d0:	a2 c0       	rjmp	.+324    	; 0x1816 <EXTI_u8SetSource+0x25c>
			break;
		default:Local_u8Status = 1;
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	89 83       	std	Y+1, r24	; 0x01
    16d6:	9f c0       	rjmp	.+318    	; 0x1816 <EXTI_u8SetSource+0x25c>
		}
		break;

	case EXTI_INT_1:
		CLR_BIT(EXTI_DDRD_REG, EXTI_PIN_3);  // make pd2 => input
    16d8:	a1 e3       	ldi	r26, 0x31	; 49
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e1 e3       	ldi	r30, 0x31	; 49
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	87 7f       	andi	r24, 0xF7	; 247
    16e4:	8c 93       	st	X, r24
		SET_BIT(EXTI_PORTD_REG, EXTI_PIN_3);  //pull_up
    16e6:	a2 e3       	ldi	r26, 0x32	; 50
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e2 e3       	ldi	r30, 0x32	; 50
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	88 60       	ori	r24, 0x08	; 8
    16f2:	8c 93       	st	X, r24
		switch(Copy_u8Source){
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	3f 83       	std	Y+7, r19	; 0x07
    16fc:	2e 83       	std	Y+6, r18	; 0x06
    16fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1700:	9f 81       	ldd	r25, Y+7	; 0x07
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	91 05       	cpc	r25, r1
    1706:	21 f1       	breq	.+72     	; 0x1750 <EXTI_u8SetSource+0x196>
    1708:	2e 81       	ldd	r18, Y+6	; 0x06
    170a:	3f 81       	ldd	r19, Y+7	; 0x07
    170c:	22 30       	cpi	r18, 0x02	; 2
    170e:	31 05       	cpc	r19, r1
    1710:	2c f4       	brge	.+10     	; 0x171c <EXTI_u8SetSource+0x162>
    1712:	8e 81       	ldd	r24, Y+6	; 0x06
    1714:	9f 81       	ldd	r25, Y+7	; 0x07
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	61 f0       	breq	.+24     	; 0x1732 <EXTI_u8SetSource+0x178>
    171a:	47 c0       	rjmp	.+142    	; 0x17aa <EXTI_u8SetSource+0x1f0>
    171c:	2e 81       	ldd	r18, Y+6	; 0x06
    171e:	3f 81       	ldd	r19, Y+7	; 0x07
    1720:	22 30       	cpi	r18, 0x02	; 2
    1722:	31 05       	cpc	r19, r1
    1724:	21 f1       	breq	.+72     	; 0x176e <EXTI_u8SetSource+0x1b4>
    1726:	8e 81       	ldd	r24, Y+6	; 0x06
    1728:	9f 81       	ldd	r25, Y+7	; 0x07
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	91 05       	cpc	r25, r1
    172e:	71 f1       	breq	.+92     	; 0x178c <EXTI_u8SetSource+0x1d2>
    1730:	3c c0       	rjmp	.+120    	; 0x17aa <EXTI_u8SetSource+0x1f0>
		case EXTI_LOW_LEVEL:
			CLR_BIT(EXTI_MCUCR_REG, EXTI_PIN_2);
    1732:	a5 e5       	ldi	r26, 0x55	; 85
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e5 e5       	ldi	r30, 0x55	; 85
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	8b 7f       	andi	r24, 0xFB	; 251
    173e:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR_REG, EXTI_PIN_3);
    1740:	a5 e5       	ldi	r26, 0x55	; 85
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e5 e5       	ldi	r30, 0x55	; 85
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	87 7f       	andi	r24, 0xF7	; 247
    174c:	8c 93       	st	X, r24
    174e:	63 c0       	rjmp	.+198    	; 0x1816 <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_ANY_CHANGE:
			SET_BIT(EXTI_MCUCR_REG,  EXTI_PIN_2);
    1750:	a5 e5       	ldi	r26, 0x55	; 85
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e5 e5       	ldi	r30, 0x55	; 85
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	84 60       	ori	r24, 0x04	; 4
    175c:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR_REG, EXTI_PIN_3);
    175e:	a5 e5       	ldi	r26, 0x55	; 85
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e5 e5       	ldi	r30, 0x55	; 85
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	87 7f       	andi	r24, 0xF7	; 247
    176a:	8c 93       	st	X, r24
    176c:	54 c0       	rjmp	.+168    	; 0x1816 <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_FALLING_EDGE:
			CLR_BIT(EXTI_MCUCR_REG,  EXTI_PIN_2);
    176e:	a5 e5       	ldi	r26, 0x55	; 85
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e5 e5       	ldi	r30, 0x55	; 85
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	8b 7f       	andi	r24, 0xFB	; 251
    177a:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR_REG, EXTI_PIN_3);
    177c:	a5 e5       	ldi	r26, 0x55	; 85
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e5 e5       	ldi	r30, 0x55	; 85
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	88 60       	ori	r24, 0x08	; 8
    1788:	8c 93       	st	X, r24
    178a:	45 c0       	rjmp	.+138    	; 0x1816 <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(EXTI_MCUCR_REG,  EXTI_PIN_2);
    178c:	a5 e5       	ldi	r26, 0x55	; 85
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e5 e5       	ldi	r30, 0x55	; 85
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	84 60       	ori	r24, 0x04	; 4
    1798:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR_REG, EXTI_PIN_3);
    179a:	a5 e5       	ldi	r26, 0x55	; 85
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e5 e5       	ldi	r30, 0x55	; 85
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	88 60       	ori	r24, 0x08	; 8
    17a6:	8c 93       	st	X, r24
    17a8:	36 c0       	rjmp	.+108    	; 0x1816 <EXTI_u8SetSource+0x25c>
			break;
		default:Local_u8Status = 1;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	33 c0       	rjmp	.+102    	; 0x1816 <EXTI_u8SetSource+0x25c>
		}
		break;

	case EXTI_INT_2:
		CLR_BIT(EXTI_DDRB_REG, EXTI_PIN_2);  // make pd2 => input
    17b0:	a7 e3       	ldi	r26, 0x37	; 55
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e7 e3       	ldi	r30, 0x37	; 55
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	8b 7f       	andi	r24, 0xFB	; 251
    17bc:	8c 93       	st	X, r24
		SET_BIT(EXTI_PORTB_REG, EXTI_PIN_2);  //pull_up
    17be:	a8 e3       	ldi	r26, 0x38	; 56
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e8 e3       	ldi	r30, 0x38	; 56
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	84 60       	ori	r24, 0x04	; 4
    17ca:	8c 93       	st	X, r24
		switch(Copy_u8Source){
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	3d 83       	std	Y+5, r19	; 0x05
    17d4:	2c 83       	std	Y+4, r18	; 0x04
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	9d 81       	ldd	r25, Y+5	; 0x05
    17da:	82 30       	cpi	r24, 0x02	; 2
    17dc:	91 05       	cpc	r25, r1
    17de:	31 f0       	breq	.+12     	; 0x17ec <EXTI_u8SetSource+0x232>
    17e0:	2c 81       	ldd	r18, Y+4	; 0x04
    17e2:	3d 81       	ldd	r19, Y+5	; 0x05
    17e4:	23 30       	cpi	r18, 0x03	; 3
    17e6:	31 05       	cpc	r19, r1
    17e8:	49 f0       	breq	.+18     	; 0x17fc <EXTI_u8SetSource+0x242>
    17ea:	10 c0       	rjmp	.+32     	; 0x180c <EXTI_u8SetSource+0x252>
		case EXTI_FALLING_EDGE:
			CLR_BIT(EXTI_MCUCSR_REG,  EXTI_PIN_6);
    17ec:	a4 e5       	ldi	r26, 0x54	; 84
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e4 e5       	ldi	r30, 0x54	; 84
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	8f 7b       	andi	r24, 0xBF	; 191
    17f8:	8c 93       	st	X, r24
    17fa:	0d c0       	rjmp	.+26     	; 0x1816 <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(EXTI_MCUCSR_REG, EXTI_PIN_6);
    17fc:	a4 e5       	ldi	r26, 0x54	; 84
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e4 e5       	ldi	r30, 0x54	; 84
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	80 64       	ori	r24, 0x40	; 64
    1808:	8c 93       	st	X, r24
    180a:	05 c0       	rjmp	.+10     	; 0x1816 <EXTI_u8SetSource+0x25c>
			break;
		default:Local_u8Status = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	89 83       	std	Y+1, r24	; 0x01
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <EXTI_u8SetSource+0x25c>
		}
		break;
		default: Local_u8Status = 1;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	89 83       	std	Y+1, r24	; 0x01
				SET_BIT(MCUCSR, PIN_6);
				break;
			default: Local_u8Status = 1;
			}
		}*/
	return Local_u8Status;
    1816:	89 81       	ldd	r24, Y+1	; 0x01
}
    1818:	2b 96       	adiw	r28, 0x0b	; 11
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <EXTI_u8EnablePIE>:

/*
	this function used to enable the PIE (set the corresponding bit in GICR to 1),
	it takes the external interrupt number;
 */
u8 EXTI_u8EnablePIE(u8 Copy_u8INTx){
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <EXTI_u8EnablePIE+0x6>
    1830:	00 d0       	rcall	.+0      	; 0x1832 <EXTI_u8EnablePIE+0x8>
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Status = 0;
    1838:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8INTx){
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	3c 83       	std	Y+4, r19	; 0x04
    1842:	2b 83       	std	Y+3, r18	; 0x03
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	9c 81       	ldd	r25, Y+4	; 0x04
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	91 05       	cpc	r25, r1
    184c:	89 f0       	breq	.+34     	; 0x1870 <EXTI_u8EnablePIE+0x46>
    184e:	2b 81       	ldd	r18, Y+3	; 0x03
    1850:	3c 81       	ldd	r19, Y+4	; 0x04
    1852:	22 30       	cpi	r18, 0x02	; 2
    1854:	31 05       	cpc	r19, r1
    1856:	a1 f0       	breq	.+40     	; 0x1880 <EXTI_u8EnablePIE+0x56>
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	9c 81       	ldd	r25, Y+4	; 0x04
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	c1 f4       	brne	.+48     	; 0x1890 <EXTI_u8EnablePIE+0x66>
	case EXTI_INT_0:
		SET_BIT(EXTI_GICR_REG, EXTI_PIN_6);
    1860:	ab e5       	ldi	r26, 0x5B	; 91
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	eb e5       	ldi	r30, 0x5B	; 91
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	80 64       	ori	r24, 0x40	; 64
    186c:	8c 93       	st	X, r24
    186e:	12 c0       	rjmp	.+36     	; 0x1894 <EXTI_u8EnablePIE+0x6a>
		break;
	case EXTI_INT_1:
		SET_BIT(EXTI_GICR_REG, EXTI_PIN_7);
    1870:	ab e5       	ldi	r26, 0x5B	; 91
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	eb e5       	ldi	r30, 0x5B	; 91
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	80 68       	ori	r24, 0x80	; 128
    187c:	8c 93       	st	X, r24
    187e:	0a c0       	rjmp	.+20     	; 0x1894 <EXTI_u8EnablePIE+0x6a>
		break;
	case EXTI_INT_2:
		SET_BIT(EXTI_GICR_REG, EXTI_PIN_5);
    1880:	ab e5       	ldi	r26, 0x5B	; 91
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	eb e5       	ldi	r30, 0x5B	; 91
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	80 62       	ori	r24, 0x20	; 32
    188c:	8c 93       	st	X, r24
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <EXTI_u8EnablePIE+0x6a>
		break;
	default: Local_u8Status = 1;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Status;
    1894:	89 81       	ldd	r24, Y+1	; 0x01
}
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <EXTI_u8DisablePIE>:

/*
	this function used to enable the PIE (set the corresponding bit in GICR to 1),
	it takes the external interrupt number;
 */
u8 EXTI_u8DisablePIE(u8 Copy_u8INTx){
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <EXTI_u8DisablePIE+0x6>
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <EXTI_u8DisablePIE+0x8>
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Status = 0;
    18b2:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8INTx){
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	3c 83       	std	Y+4, r19	; 0x04
    18bc:	2b 83       	std	Y+3, r18	; 0x03
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	91 05       	cpc	r25, r1
    18c6:	89 f0       	breq	.+34     	; 0x18ea <EXTI_u8DisablePIE+0x46>
    18c8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ca:	3c 81       	ldd	r19, Y+4	; 0x04
    18cc:	22 30       	cpi	r18, 0x02	; 2
    18ce:	31 05       	cpc	r19, r1
    18d0:	a1 f0       	breq	.+40     	; 0x18fa <EXTI_u8DisablePIE+0x56>
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	9c 81       	ldd	r25, Y+4	; 0x04
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	c1 f4       	brne	.+48     	; 0x190a <EXTI_u8DisablePIE+0x66>
	case EXTI_INT_0:
		CLR_BIT(EXTI_GICR_REG, EXTI_PIN_6);
    18da:	ab e5       	ldi	r26, 0x5B	; 91
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	eb e5       	ldi	r30, 0x5B	; 91
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	8f 7b       	andi	r24, 0xBF	; 191
    18e6:	8c 93       	st	X, r24
    18e8:	12 c0       	rjmp	.+36     	; 0x190e <EXTI_u8DisablePIE+0x6a>
		break;
	case EXTI_INT_1:
		CLR_BIT(EXTI_GICR_REG, EXTI_PIN_7);
    18ea:	ab e5       	ldi	r26, 0x5B	; 91
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	eb e5       	ldi	r30, 0x5B	; 91
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	8f 77       	andi	r24, 0x7F	; 127
    18f6:	8c 93       	st	X, r24
    18f8:	0a c0       	rjmp	.+20     	; 0x190e <EXTI_u8DisablePIE+0x6a>
		break;
	case EXTI_INT_2:
		CLR_BIT(EXTI_GICR_REG, EXTI_PIN_5);
    18fa:	ab e5       	ldi	r26, 0x5B	; 91
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	eb e5       	ldi	r30, 0x5B	; 91
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	8f 7d       	andi	r24, 0xDF	; 223
    1906:	8c 93       	st	X, r24
    1908:	02 c0       	rjmp	.+4      	; 0x190e <EXTI_u8DisablePIE+0x6a>
		break;
	default: Local_u8Status = 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Status;
    190e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <EXTI_voidEnableGIE>:

//this function used to enable the GIE (set the I_bit in SREG to 1)
void EXTI_voidEnableGIE(){
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_SREG_REG, EXTI_PIN_7);
    1926:	af e5       	ldi	r26, 0x5F	; 95
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	ef e5       	ldi	r30, 0x5F	; 95
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	80 68       	ori	r24, 0x80	; 128
    1932:	8c 93       	st	X, r24
}
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <EXTI_voidDisableGIE>:

//this function used to disable the GIE (set the I_bit in SREG to 0)
void EXTI_voidDisableGIE(){
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_SREG_REG, EXTI_PIN_7);
    1942:	af e5       	ldi	r26, 0x5F	; 95
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	ef e5       	ldi	r30, 0x5F	; 95
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	8f 77       	andi	r24, 0x7F	; 127
    194e:	8c 93       	st	X, r24
}
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <EXTI_voidSet_INT0_Cbf>:

//This function used to set INT0 call back function.
void EXTI_voidSet_INT0_Cbf(void (*fptr)(void)){
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	00 d0       	rcall	.+0      	; 0x195c <EXTI_voidSet_INT0_Cbf+0x6>
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	9a 83       	std	Y+2, r25	; 0x02
    1962:	89 83       	std	Y+1, r24	; 0x01
	if(fptr != NULL){
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	9a 81       	ldd	r25, Y+2	; 0x02
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	31 f0       	breq	.+12     	; 0x1978 <EXTI_voidSet_INT0_Cbf+0x22>
		INT0_Cbf_ptr = fptr;
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	90 93 73 00 	sts	0x0073, r25
    1974:	80 93 72 00 	sts	0x0072, r24
	}
}
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <EXTI_voidSet_INT1_Cbf>:

//This function used to set INT1 call back function.
void EXTI_voidSet_INT1_Cbf(void (*fptr)(void))
{
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	00 d0       	rcall	.+0      	; 0x1988 <EXTI_voidSet_INT1_Cbf+0x6>
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	89 83       	std	Y+1, r24	; 0x01
	if(fptr != NULL)
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	9a 81       	ldd	r25, Y+2	; 0x02
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	31 f0       	breq	.+12     	; 0x19a4 <EXTI_voidSet_INT1_Cbf+0x22>
	{
		INT1_Cbf_ptr = fptr;
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	9a 81       	ldd	r25, Y+2	; 0x02
    199c:	90 93 75 00 	sts	0x0075, r25
    19a0:	80 93 74 00 	sts	0x0074, r24
	}
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <EXTI_voidSet_INT2_Cbf>:

//This function used to set INT1 call back function.
void EXTI_voidSet_INT2_Cbf(void (*fptr)(void))
{
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	00 d0       	rcall	.+0      	; 0x19b4 <EXTI_voidSet_INT2_Cbf+0x6>
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	9a 83       	std	Y+2, r25	; 0x02
    19ba:	89 83       	std	Y+1, r24	; 0x01
	if(fptr != NULL)
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	31 f0       	breq	.+12     	; 0x19d0 <EXTI_voidSet_INT2_Cbf+0x22>
	{
		INT2_Cbf_ptr = fptr;
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	9a 81       	ldd	r25, Y+2	; 0x02
    19c8:	90 93 77 00 	sts	0x0077, r25
    19cc:	80 93 76 00 	sts	0x0076, r24
	}
}
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <__vector_1>:

ISR(INT0_vect){
    19da:	1f 92       	push	r1
    19dc:	0f 92       	push	r0
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	0f 92       	push	r0
    19e2:	11 24       	eor	r1, r1
    19e4:	2f 93       	push	r18
    19e6:	3f 93       	push	r19
    19e8:	4f 93       	push	r20
    19ea:	5f 93       	push	r21
    19ec:	6f 93       	push	r22
    19ee:	7f 93       	push	r23
    19f0:	8f 93       	push	r24
    19f2:	9f 93       	push	r25
    19f4:	af 93       	push	r26
    19f6:	bf 93       	push	r27
    19f8:	ef 93       	push	r30
    19fa:	ff 93       	push	r31
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Cbf_ptr != NULL){
    1a04:	80 91 72 00 	lds	r24, 0x0072
    1a08:	90 91 73 00 	lds	r25, 0x0073
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	29 f0       	breq	.+10     	; 0x1a1a <__vector_1+0x40>
		INT0_Cbf_ptr();
    1a10:	e0 91 72 00 	lds	r30, 0x0072
    1a14:	f0 91 73 00 	lds	r31, 0x0073
    1a18:	09 95       	icall
	}
}
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	ff 91       	pop	r31
    1a20:	ef 91       	pop	r30
    1a22:	bf 91       	pop	r27
    1a24:	af 91       	pop	r26
    1a26:	9f 91       	pop	r25
    1a28:	8f 91       	pop	r24
    1a2a:	7f 91       	pop	r23
    1a2c:	6f 91       	pop	r22
    1a2e:	5f 91       	pop	r21
    1a30:	4f 91       	pop	r20
    1a32:	3f 91       	pop	r19
    1a34:	2f 91       	pop	r18
    1a36:	0f 90       	pop	r0
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	0f 90       	pop	r0
    1a3c:	1f 90       	pop	r1
    1a3e:	18 95       	reti

00001a40 <__vector_2>:

ISR(INT1_vect){
    1a40:	1f 92       	push	r1
    1a42:	0f 92       	push	r0
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	0f 92       	push	r0
    1a48:	11 24       	eor	r1, r1
    1a4a:	2f 93       	push	r18
    1a4c:	3f 93       	push	r19
    1a4e:	4f 93       	push	r20
    1a50:	5f 93       	push	r21
    1a52:	6f 93       	push	r22
    1a54:	7f 93       	push	r23
    1a56:	8f 93       	push	r24
    1a58:	9f 93       	push	r25
    1a5a:	af 93       	push	r26
    1a5c:	bf 93       	push	r27
    1a5e:	ef 93       	push	r30
    1a60:	ff 93       	push	r31
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Cbf_ptr != NULL)
    1a6a:	80 91 74 00 	lds	r24, 0x0074
    1a6e:	90 91 75 00 	lds	r25, 0x0075
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	29 f0       	breq	.+10     	; 0x1a80 <__vector_2+0x40>
	{
		INT1_Cbf_ptr();
    1a76:	e0 91 74 00 	lds	r30, 0x0074
    1a7a:	f0 91 75 00 	lds	r31, 0x0075
    1a7e:	09 95       	icall
	}
}
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	ff 91       	pop	r31
    1a86:	ef 91       	pop	r30
    1a88:	bf 91       	pop	r27
    1a8a:	af 91       	pop	r26
    1a8c:	9f 91       	pop	r25
    1a8e:	8f 91       	pop	r24
    1a90:	7f 91       	pop	r23
    1a92:	6f 91       	pop	r22
    1a94:	5f 91       	pop	r21
    1a96:	4f 91       	pop	r20
    1a98:	3f 91       	pop	r19
    1a9a:	2f 91       	pop	r18
    1a9c:	0f 90       	pop	r0
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	0f 90       	pop	r0
    1aa2:	1f 90       	pop	r1
    1aa4:	18 95       	reti

00001aa6 <__vector_3>:

ISR(INT2_vect){
    1aa6:	1f 92       	push	r1
    1aa8:	0f 92       	push	r0
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	0f 92       	push	r0
    1aae:	11 24       	eor	r1, r1
    1ab0:	2f 93       	push	r18
    1ab2:	3f 93       	push	r19
    1ab4:	4f 93       	push	r20
    1ab6:	5f 93       	push	r21
    1ab8:	6f 93       	push	r22
    1aba:	7f 93       	push	r23
    1abc:	8f 93       	push	r24
    1abe:	9f 93       	push	r25
    1ac0:	af 93       	push	r26
    1ac2:	bf 93       	push	r27
    1ac4:	ef 93       	push	r30
    1ac6:	ff 93       	push	r31
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Cbf_ptr != NULL)
    1ad0:	80 91 76 00 	lds	r24, 0x0076
    1ad4:	90 91 77 00 	lds	r25, 0x0077
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	29 f0       	breq	.+10     	; 0x1ae6 <__vector_3+0x40>
	{
		INT2_Cbf_ptr();
    1adc:	e0 91 76 00 	lds	r30, 0x0076
    1ae0:	f0 91 77 00 	lds	r31, 0x0077
    1ae4:	09 95       	icall
	}
}
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	ff 91       	pop	r31
    1aec:	ef 91       	pop	r30
    1aee:	bf 91       	pop	r27
    1af0:	af 91       	pop	r26
    1af2:	9f 91       	pop	r25
    1af4:	8f 91       	pop	r24
    1af6:	7f 91       	pop	r23
    1af8:	6f 91       	pop	r22
    1afa:	5f 91       	pop	r21
    1afc:	4f 91       	pop	r20
    1afe:	3f 91       	pop	r19
    1b00:	2f 91       	pop	r18
    1b02:	0f 90       	pop	r0
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	0f 90       	pop	r0
    1b08:	1f 90       	pop	r1
    1b0a:	18 95       	reti

00001b0c <DIO_u8setPortDir>:
#include"DIO_init.h"


//PORT Functions
//set PORT direction
u8 DIO_u8setPortDir(u8 Copy_u8port, u8 Copy_u8dir){
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <DIO_u8setPortDir+0x6>
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <DIO_u8setPortDir+0x8>
    1b14:	0f 92       	push	r0
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	8a 83       	std	Y+2, r24	; 0x02
    1b1c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8statues = 0;
    1b1e:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8port){
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	3d 83       	std	Y+5, r19	; 0x05
    1b28:	2c 83       	std	Y+4, r18	; 0x04
    1b2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b2e:	81 30       	cpi	r24, 0x01	; 1
    1b30:	91 05       	cpc	r25, r1
    1b32:	d1 f0       	breq	.+52     	; 0x1b68 <DIO_u8setPortDir+0x5c>
    1b34:	2c 81       	ldd	r18, Y+4	; 0x04
    1b36:	3d 81       	ldd	r19, Y+5	; 0x05
    1b38:	22 30       	cpi	r18, 0x02	; 2
    1b3a:	31 05       	cpc	r19, r1
    1b3c:	2c f4       	brge	.+10     	; 0x1b48 <DIO_u8setPortDir+0x3c>
    1b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b40:	9d 81       	ldd	r25, Y+5	; 0x05
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	61 f0       	breq	.+24     	; 0x1b5e <DIO_u8setPortDir+0x52>
    1b46:	1f c0       	rjmp	.+62     	; 0x1b86 <DIO_u8setPortDir+0x7a>
    1b48:	2c 81       	ldd	r18, Y+4	; 0x04
    1b4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b4c:	22 30       	cpi	r18, 0x02	; 2
    1b4e:	31 05       	cpc	r19, r1
    1b50:	81 f0       	breq	.+32     	; 0x1b72 <DIO_u8setPortDir+0x66>
    1b52:	8c 81       	ldd	r24, Y+4	; 0x04
    1b54:	9d 81       	ldd	r25, Y+5	; 0x05
    1b56:	83 30       	cpi	r24, 0x03	; 3
    1b58:	91 05       	cpc	r25, r1
    1b5a:	81 f0       	breq	.+32     	; 0x1b7c <DIO_u8setPortDir+0x70>
    1b5c:	14 c0       	rjmp	.+40     	; 0x1b86 <DIO_u8setPortDir+0x7a>
	case DIO_PORT_A:	DDRA_REG = Copy_u8dir;  break;
    1b5e:	ea e3       	ldi	r30, 0x3A	; 58
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	80 83       	st	Z, r24
    1b66:	11 c0       	rjmp	.+34     	; 0x1b8a <DIO_u8setPortDir+0x7e>
	case DIO_PORT_B:	DDRB_REG = Copy_u8dir;  break;
    1b68:	e7 e3       	ldi	r30, 0x37	; 55
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	80 83       	st	Z, r24
    1b70:	0c c0       	rjmp	.+24     	; 0x1b8a <DIO_u8setPortDir+0x7e>
	case DIO_PORT_C:	DDRC_REG = Copy_u8dir;  break;
    1b72:	e4 e3       	ldi	r30, 0x34	; 52
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	80 83       	st	Z, r24
    1b7a:	07 c0       	rjmp	.+14     	; 0x1b8a <DIO_u8setPortDir+0x7e>
	case DIO_PORT_D:	DDRD_REG = Copy_u8dir;  break;
    1b7c:	e1 e3       	ldi	r30, 0x31	; 49
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	80 83       	st	Z, r24
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <DIO_u8setPortDir+0x7e>

	default: Local_u8statues = 1;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <DIO_u8setPortVal>:

//set PORT value
u8 DIO_u8setPortVal(u8 Copy_u8port, u8 Copy_u8val)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <DIO_u8setPortVal+0x6>
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <DIO_u8setPortVal+0x8>
    1ba4:	0f 92       	push	r0
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	8a 83       	std	Y+2, r24	; 0x02
    1bac:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8statues = 0;
    1bae:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8port){
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	3d 83       	std	Y+5, r19	; 0x05
    1bb8:	2c 83       	std	Y+4, r18	; 0x04
    1bba:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	d1 f0       	breq	.+52     	; 0x1bf8 <DIO_u8setPortVal+0x5c>
    1bc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc8:	22 30       	cpi	r18, 0x02	; 2
    1bca:	31 05       	cpc	r19, r1
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <DIO_u8setPortVal+0x3c>
    1bce:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	61 f0       	breq	.+24     	; 0x1bee <DIO_u8setPortVal+0x52>
    1bd6:	1f c0       	rjmp	.+62     	; 0x1c16 <DIO_u8setPortVal+0x7a>
    1bd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bda:	3d 81       	ldd	r19, Y+5	; 0x05
    1bdc:	22 30       	cpi	r18, 0x02	; 2
    1bde:	31 05       	cpc	r19, r1
    1be0:	81 f0       	breq	.+32     	; 0x1c02 <DIO_u8setPortVal+0x66>
    1be2:	8c 81       	ldd	r24, Y+4	; 0x04
    1be4:	9d 81       	ldd	r25, Y+5	; 0x05
    1be6:	83 30       	cpi	r24, 0x03	; 3
    1be8:	91 05       	cpc	r25, r1
    1bea:	81 f0       	breq	.+32     	; 0x1c0c <DIO_u8setPortVal+0x70>
    1bec:	14 c0       	rjmp	.+40     	; 0x1c16 <DIO_u8setPortVal+0x7a>
	case DIO_PORT_A:	PORTA_REG = Copy_u8val;  break;
    1bee:	eb e3       	ldi	r30, 0x3B	; 59
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	80 83       	st	Z, r24
    1bf6:	11 c0       	rjmp	.+34     	; 0x1c1a <DIO_u8setPortVal+0x7e>
	case DIO_PORT_B:	PORTB_REG = Copy_u8val;  break;
    1bf8:	e8 e3       	ldi	r30, 0x38	; 56
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	80 83       	st	Z, r24
    1c00:	0c c0       	rjmp	.+24     	; 0x1c1a <DIO_u8setPortVal+0x7e>
	case DIO_PORT_C:	PORTC_REG = Copy_u8val;  break;
    1c02:	e5 e3       	ldi	r30, 0x35	; 53
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	80 83       	st	Z, r24
    1c0a:	07 c0       	rjmp	.+14     	; 0x1c1a <DIO_u8setPortVal+0x7e>
	case DIO_PORT_D:	PORTD_REG = Copy_u8val;  break;
    1c0c:	e2 e3       	ldi	r30, 0x32	; 50
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	80 83       	st	Z, r24
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <DIO_u8setPortVal+0x7e>
	default: Local_u8statues = 1;
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <DIO_u8getPortVal>:
//get PORT value
u8 DIO_u8getPortVal(u8 Copy_u8port, u8 *Copy_u8valuePtr){
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <DIO_u8getPortVal+0x6>
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <DIO_u8getPortVal+0x8>
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <DIO_u8getPortVal+0xa>
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	8a 83       	std	Y+2, r24	; 0x02
    1c3c:	7c 83       	std	Y+4, r23	; 0x04
    1c3e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8statues = 0;
    1c40:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8port){
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	3e 83       	std	Y+6, r19	; 0x06
    1c4a:	2d 83       	std	Y+5, r18	; 0x05
    1c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c50:	81 30       	cpi	r24, 0x01	; 1
    1c52:	91 05       	cpc	r25, r1
    1c54:	e1 f0       	breq	.+56     	; 0x1c8e <DIO_u8getPortVal+0x62>
    1c56:	2d 81       	ldd	r18, Y+5	; 0x05
    1c58:	3e 81       	ldd	r19, Y+6	; 0x06
    1c5a:	22 30       	cpi	r18, 0x02	; 2
    1c5c:	31 05       	cpc	r19, r1
    1c5e:	2c f4       	brge	.+10     	; 0x1c6a <DIO_u8getPortVal+0x3e>
    1c60:	8d 81       	ldd	r24, Y+5	; 0x05
    1c62:	9e 81       	ldd	r25, Y+6	; 0x06
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	61 f0       	breq	.+24     	; 0x1c80 <DIO_u8getPortVal+0x54>
    1c68:	27 c0       	rjmp	.+78     	; 0x1cb8 <DIO_u8getPortVal+0x8c>
    1c6a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c6c:	3e 81       	ldd	r19, Y+6	; 0x06
    1c6e:	22 30       	cpi	r18, 0x02	; 2
    1c70:	31 05       	cpc	r19, r1
    1c72:	a1 f0       	breq	.+40     	; 0x1c9c <DIO_u8getPortVal+0x70>
    1c74:	8d 81       	ldd	r24, Y+5	; 0x05
    1c76:	9e 81       	ldd	r25, Y+6	; 0x06
    1c78:	83 30       	cpi	r24, 0x03	; 3
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	b1 f0       	breq	.+44     	; 0x1caa <DIO_u8getPortVal+0x7e>
    1c7e:	1c c0       	rjmp	.+56     	; 0x1cb8 <DIO_u8getPortVal+0x8c>
	case DIO_PORT_A:	*Copy_u8valuePtr = PINA_REG;  break;
    1c80:	e9 e3       	ldi	r30, 0x39	; 57
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	eb 81       	ldd	r30, Y+3	; 0x03
    1c88:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8a:	80 83       	st	Z, r24
    1c8c:	17 c0       	rjmp	.+46     	; 0x1cbc <DIO_u8getPortVal+0x90>
	case DIO_PORT_B:	*Copy_u8valuePtr = PINB_REG;  break;
    1c8e:	e6 e3       	ldi	r30, 0x36	; 54
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	eb 81       	ldd	r30, Y+3	; 0x03
    1c96:	fc 81       	ldd	r31, Y+4	; 0x04
    1c98:	80 83       	st	Z, r24
    1c9a:	10 c0       	rjmp	.+32     	; 0x1cbc <DIO_u8getPortVal+0x90>
	case DIO_PORT_C:	*Copy_u8valuePtr = PINC_REG;  break;
    1c9c:	e3 e3       	ldi	r30, 0x33	; 51
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ca4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ca6:	80 83       	st	Z, r24
    1ca8:	09 c0       	rjmp	.+18     	; 0x1cbc <DIO_u8getPortVal+0x90>
	case DIO_PORT_D:	*Copy_u8valuePtr = PIND_REG;  break;
    1caa:	e0 e3       	ldi	r30, 0x30	; 48
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	eb 81       	ldd	r30, Y+3	; 0x03
    1cb2:	fc 81       	ldd	r31, Y+4	; 0x04
    1cb4:	80 83       	st	Z, r24
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <DIO_u8getPortVal+0x90>

	default: Local_u8statues = 1;
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cbe:	26 96       	adiw	r28, 0x06	; 6
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <DIO_u8setPinDir>:

//PIN Functions
//set PIN direction
u8 DIO_u8setPinDir(u8 Copy_u8port, u8 Copy_u8pin, u8 Copy_u8dir){
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	28 97       	sbiw	r28, 0x08	; 8
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	8a 83       	std	Y+2, r24	; 0x02
    1ce6:	6b 83       	std	Y+3, r22	; 0x03
    1ce8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8statues = 0;
    1cea:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= 0 && Copy_u8pin <= 7){
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	88 30       	cpi	r24, 0x08	; 8
    1cf0:	08 f0       	brcs	.+2      	; 0x1cf4 <DIO_u8setPinDir+0x24>
    1cf2:	f4 c0       	rjmp	.+488    	; 0x1edc <DIO_u8setPinDir+0x20c>
		if(Copy_u8dir == DIO_INPUT){
    1cf4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf6:	88 23       	and	r24, r24
    1cf8:	09 f0       	breq	.+2      	; 0x1cfc <DIO_u8setPinDir+0x2c>
    1cfa:	77 c0       	rjmp	.+238    	; 0x1dea <DIO_u8setPinDir+0x11a>
			switch(Copy_u8port){
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	38 87       	std	Y+8, r19	; 0x08
    1d04:	2f 83       	std	Y+7, r18	; 0x07
    1d06:	8f 81       	ldd	r24, Y+7	; 0x07
    1d08:	98 85       	ldd	r25, Y+8	; 0x08
    1d0a:	81 30       	cpi	r24, 0x01	; 1
    1d0c:	91 05       	cpc	r25, r1
    1d0e:	59 f1       	breq	.+86     	; 0x1d66 <DIO_u8setPinDir+0x96>
    1d10:	2f 81       	ldd	r18, Y+7	; 0x07
    1d12:	38 85       	ldd	r19, Y+8	; 0x08
    1d14:	22 30       	cpi	r18, 0x02	; 2
    1d16:	31 05       	cpc	r19, r1
    1d18:	2c f4       	brge	.+10     	; 0x1d24 <DIO_u8setPinDir+0x54>
    1d1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d1c:	98 85       	ldd	r25, Y+8	; 0x08
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	69 f0       	breq	.+26     	; 0x1d3c <DIO_u8setPinDir+0x6c>
    1d22:	60 c0       	rjmp	.+192    	; 0x1de4 <DIO_u8setPinDir+0x114>
    1d24:	2f 81       	ldd	r18, Y+7	; 0x07
    1d26:	38 85       	ldd	r19, Y+8	; 0x08
    1d28:	22 30       	cpi	r18, 0x02	; 2
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	89 f1       	breq	.+98     	; 0x1d90 <DIO_u8setPinDir+0xc0>
    1d2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d30:	98 85       	ldd	r25, Y+8	; 0x08
    1d32:	83 30       	cpi	r24, 0x03	; 3
    1d34:	91 05       	cpc	r25, r1
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <DIO_u8setPinDir+0x6a>
    1d38:	40 c0       	rjmp	.+128    	; 0x1dba <DIO_u8setPinDir+0xea>
    1d3a:	54 c0       	rjmp	.+168    	; 0x1de4 <DIO_u8setPinDir+0x114>
			case DIO_PORT_A:	CLR_BIT(DDRA_REG, Copy_u8pin);  break;
    1d3c:	aa e3       	ldi	r26, 0x3A	; 58
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	ea e3       	ldi	r30, 0x3A	; 58
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	48 2f       	mov	r20, r24
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	02 2e       	mov	r0, r18
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <DIO_u8setPinDir+0x8a>
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	0a 94       	dec	r0
    1d5c:	e2 f7       	brpl	.-8      	; 0x1d56 <DIO_u8setPinDir+0x86>
    1d5e:	80 95       	com	r24
    1d60:	84 23       	and	r24, r20
    1d62:	8c 93       	st	X, r24
    1d64:	bd c0       	rjmp	.+378    	; 0x1ee0 <DIO_u8setPinDir+0x210>
			case DIO_PORT_B:	CLR_BIT(DDRB_REG, Copy_u8pin);  break;
    1d66:	a7 e3       	ldi	r26, 0x37	; 55
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e7 e3       	ldi	r30, 0x37	; 55
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	48 2f       	mov	r20, r24
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	02 2e       	mov	r0, r18
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <DIO_u8setPinDir+0xb4>
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	0a 94       	dec	r0
    1d86:	e2 f7       	brpl	.-8      	; 0x1d80 <DIO_u8setPinDir+0xb0>
    1d88:	80 95       	com	r24
    1d8a:	84 23       	and	r24, r20
    1d8c:	8c 93       	st	X, r24
    1d8e:	a8 c0       	rjmp	.+336    	; 0x1ee0 <DIO_u8setPinDir+0x210>
			case DIO_PORT_C:	CLR_BIT(DDRC_REG, Copy_u8pin);  break;
    1d90:	a4 e3       	ldi	r26, 0x34	; 52
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e4 e3       	ldi	r30, 0x34	; 52
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	48 2f       	mov	r20, r24
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	02 2e       	mov	r0, r18
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <DIO_u8setPinDir+0xde>
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	0a 94       	dec	r0
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <DIO_u8setPinDir+0xda>
    1db2:	80 95       	com	r24
    1db4:	84 23       	and	r24, r20
    1db6:	8c 93       	st	X, r24
    1db8:	93 c0       	rjmp	.+294    	; 0x1ee0 <DIO_u8setPinDir+0x210>
			case DIO_PORT_D:	CLR_BIT(DDRD_REG, Copy_u8pin);  break;
    1dba:	a1 e3       	ldi	r26, 0x31	; 49
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e1 e3       	ldi	r30, 0x31	; 49
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	48 2f       	mov	r20, r24
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	02 2e       	mov	r0, r18
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <DIO_u8setPinDir+0x108>
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	0a 94       	dec	r0
    1dda:	e2 f7       	brpl	.-8      	; 0x1dd4 <DIO_u8setPinDir+0x104>
    1ddc:	80 95       	com	r24
    1dde:	84 23       	and	r24, r20
    1de0:	8c 93       	st	X, r24
    1de2:	7e c0       	rjmp	.+252    	; 0x1ee0 <DIO_u8setPinDir+0x210>

			default: Local_u8statues = 1;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	7b c0       	rjmp	.+246    	; 0x1ee0 <DIO_u8setPinDir+0x210>
			}
		}else if(Copy_u8dir == DIO_OUTPUT){
    1dea:	8c 81       	ldd	r24, Y+4	; 0x04
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	09 f0       	breq	.+2      	; 0x1df2 <DIO_u8setPinDir+0x122>
    1df0:	72 c0       	rjmp	.+228    	; 0x1ed6 <DIO_u8setPinDir+0x206>
			switch(Copy_u8port){
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	3e 83       	std	Y+6, r19	; 0x06
    1dfa:	2d 83       	std	Y+5, r18	; 0x05
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	91 05       	cpc	r25, r1
    1e04:	49 f1       	breq	.+82     	; 0x1e58 <DIO_u8setPinDir+0x188>
    1e06:	2d 81       	ldd	r18, Y+5	; 0x05
    1e08:	3e 81       	ldd	r19, Y+6	; 0x06
    1e0a:	22 30       	cpi	r18, 0x02	; 2
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	2c f4       	brge	.+10     	; 0x1e1a <DIO_u8setPinDir+0x14a>
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	61 f0       	breq	.+24     	; 0x1e30 <DIO_u8setPinDir+0x160>
    1e18:	5b c0       	rjmp	.+182    	; 0x1ed0 <DIO_u8setPinDir+0x200>
    1e1a:	2d 81       	ldd	r18, Y+5	; 0x05
    1e1c:	3e 81       	ldd	r19, Y+6	; 0x06
    1e1e:	22 30       	cpi	r18, 0x02	; 2
    1e20:	31 05       	cpc	r19, r1
    1e22:	71 f1       	breq	.+92     	; 0x1e80 <DIO_u8setPinDir+0x1b0>
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	83 30       	cpi	r24, 0x03	; 3
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	e9 f1       	breq	.+122    	; 0x1ea8 <DIO_u8setPinDir+0x1d8>
    1e2e:	50 c0       	rjmp	.+160    	; 0x1ed0 <DIO_u8setPinDir+0x200>
			case DIO_PORT_A:	SET_BIT(DDRA_REG, Copy_u8pin);  break;
    1e30:	aa e3       	ldi	r26, 0x3A	; 58
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	ea e3       	ldi	r30, 0x3A	; 58
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	02 2e       	mov	r0, r18
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <DIO_u8setPinDir+0x17e>
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	0a 94       	dec	r0
    1e50:	e2 f7       	brpl	.-8      	; 0x1e4a <DIO_u8setPinDir+0x17a>
    1e52:	84 2b       	or	r24, r20
    1e54:	8c 93       	st	X, r24
    1e56:	44 c0       	rjmp	.+136    	; 0x1ee0 <DIO_u8setPinDir+0x210>
			case DIO_PORT_B:	SET_BIT(DDRB_REG, Copy_u8pin);  break;
    1e58:	a7 e3       	ldi	r26, 0x37	; 55
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e7 e3       	ldi	r30, 0x37	; 55
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	48 2f       	mov	r20, r24
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	02 2e       	mov	r0, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <DIO_u8setPinDir+0x1a6>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <DIO_u8setPinDir+0x1a2>
    1e7a:	84 2b       	or	r24, r20
    1e7c:	8c 93       	st	X, r24
    1e7e:	30 c0       	rjmp	.+96     	; 0x1ee0 <DIO_u8setPinDir+0x210>
			case DIO_PORT_C:	SET_BIT(DDRC_REG, Copy_u8pin);  break;
    1e80:	a4 e3       	ldi	r26, 0x34	; 52
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e4 e3       	ldi	r30, 0x34	; 52
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	48 2f       	mov	r20, r24
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	02 2e       	mov	r0, r18
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <DIO_u8setPinDir+0x1ce>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	0a 94       	dec	r0
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <DIO_u8setPinDir+0x1ca>
    1ea2:	84 2b       	or	r24, r20
    1ea4:	8c 93       	st	X, r24
    1ea6:	1c c0       	rjmp	.+56     	; 0x1ee0 <DIO_u8setPinDir+0x210>
			case DIO_PORT_D:	SET_BIT(DDRD_REG, Copy_u8pin);  break;
    1ea8:	a1 e3       	ldi	r26, 0x31	; 49
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e1 e3       	ldi	r30, 0x31	; 49
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	48 2f       	mov	r20, r24
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	02 2e       	mov	r0, r18
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <DIO_u8setPinDir+0x1f6>
    1ec2:	88 0f       	add	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	0a 94       	dec	r0
    1ec8:	e2 f7       	brpl	.-8      	; 0x1ec2 <DIO_u8setPinDir+0x1f2>
    1eca:	84 2b       	or	r24, r20
    1ecc:	8c 93       	st	X, r24
    1ece:	08 c0       	rjmp	.+16     	; 0x1ee0 <DIO_u8setPinDir+0x210>

			default: Local_u8statues = 1;
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	05 c0       	rjmp	.+10     	; 0x1ee0 <DIO_u8setPinDir+0x210>
			}
		}else{
			Local_u8statues=1;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <DIO_u8setPinDir+0x210>
		}

	}else{
		Local_u8statues=1;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee2:	28 96       	adiw	r28, 0x08	; 8
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <DIO_u8setPinVal>:
//set PIN value
u8 DIO_u8setPinVal(u8 Copy_u8port, u8 Copy_u8pin, u8 Copy_u8val){
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	28 97       	sbiw	r28, 0x08	; 8
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	8a 83       	std	Y+2, r24	; 0x02
    1f0a:	6b 83       	std	Y+3, r22	; 0x03
    1f0c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8statues = 0;
    1f0e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= 0 && Copy_u8pin <=7){
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	88 30       	cpi	r24, 0x08	; 8
    1f14:	08 f0       	brcs	.+2      	; 0x1f18 <DIO_u8setPinVal+0x24>
    1f16:	f4 c0       	rjmp	.+488    	; 0x2100 <DIO_u8setPinVal+0x20c>
		if(Copy_u8val == DIO_HIGH){
    1f18:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1a:	81 30       	cpi	r24, 0x01	; 1
    1f1c:	09 f0       	breq	.+2      	; 0x1f20 <DIO_u8setPinVal+0x2c>
    1f1e:	72 c0       	rjmp	.+228    	; 0x2004 <DIO_u8setPinVal+0x110>
			switch(Copy_u8port){
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	38 87       	std	Y+8, r19	; 0x08
    1f28:	2f 83       	std	Y+7, r18	; 0x07
    1f2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f2c:	98 85       	ldd	r25, Y+8	; 0x08
    1f2e:	81 30       	cpi	r24, 0x01	; 1
    1f30:	91 05       	cpc	r25, r1
    1f32:	49 f1       	breq	.+82     	; 0x1f86 <DIO_u8setPinVal+0x92>
    1f34:	2f 81       	ldd	r18, Y+7	; 0x07
    1f36:	38 85       	ldd	r19, Y+8	; 0x08
    1f38:	22 30       	cpi	r18, 0x02	; 2
    1f3a:	31 05       	cpc	r19, r1
    1f3c:	2c f4       	brge	.+10     	; 0x1f48 <DIO_u8setPinVal+0x54>
    1f3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f40:	98 85       	ldd	r25, Y+8	; 0x08
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	61 f0       	breq	.+24     	; 0x1f5e <DIO_u8setPinVal+0x6a>
    1f46:	5b c0       	rjmp	.+182    	; 0x1ffe <DIO_u8setPinVal+0x10a>
    1f48:	2f 81       	ldd	r18, Y+7	; 0x07
    1f4a:	38 85       	ldd	r19, Y+8	; 0x08
    1f4c:	22 30       	cpi	r18, 0x02	; 2
    1f4e:	31 05       	cpc	r19, r1
    1f50:	71 f1       	breq	.+92     	; 0x1fae <DIO_u8setPinVal+0xba>
    1f52:	8f 81       	ldd	r24, Y+7	; 0x07
    1f54:	98 85       	ldd	r25, Y+8	; 0x08
    1f56:	83 30       	cpi	r24, 0x03	; 3
    1f58:	91 05       	cpc	r25, r1
    1f5a:	e9 f1       	breq	.+122    	; 0x1fd6 <DIO_u8setPinVal+0xe2>
    1f5c:	50 c0       	rjmp	.+160    	; 0x1ffe <DIO_u8setPinVal+0x10a>
			case DIO_PORT_A:	SET_BIT(PORTA_REG, Copy_u8pin);  break;
    1f5e:	ab e3       	ldi	r26, 0x3B	; 59
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	eb e3       	ldi	r30, 0x3B	; 59
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	48 2f       	mov	r20, r24
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	02 2e       	mov	r0, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <DIO_u8setPinVal+0x88>
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	0a 94       	dec	r0
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <DIO_u8setPinVal+0x84>
    1f80:	84 2b       	or	r24, r20
    1f82:	8c 93       	st	X, r24
    1f84:	bf c0       	rjmp	.+382    	; 0x2104 <DIO_u8setPinVal+0x210>
			case DIO_PORT_B:	SET_BIT(PORTB_REG, Copy_u8pin);  break;
    1f86:	a8 e3       	ldi	r26, 0x38	; 56
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e8 e3       	ldi	r30, 0x38	; 56
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	48 2f       	mov	r20, r24
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	02 2e       	mov	r0, r18
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <DIO_u8setPinVal+0xb0>
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	0a 94       	dec	r0
    1fa6:	e2 f7       	brpl	.-8      	; 0x1fa0 <DIO_u8setPinVal+0xac>
    1fa8:	84 2b       	or	r24, r20
    1faa:	8c 93       	st	X, r24
    1fac:	ab c0       	rjmp	.+342    	; 0x2104 <DIO_u8setPinVal+0x210>
			case DIO_PORT_C:	SET_BIT(PORTC_REG, Copy_u8pin);  break;
    1fae:	a5 e3       	ldi	r26, 0x35	; 53
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e5 e3       	ldi	r30, 0x35	; 53
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	48 2f       	mov	r20, r24
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	02 2e       	mov	r0, r18
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <DIO_u8setPinVal+0xd8>
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	0a 94       	dec	r0
    1fce:	e2 f7       	brpl	.-8      	; 0x1fc8 <DIO_u8setPinVal+0xd4>
    1fd0:	84 2b       	or	r24, r20
    1fd2:	8c 93       	st	X, r24
    1fd4:	97 c0       	rjmp	.+302    	; 0x2104 <DIO_u8setPinVal+0x210>
			case DIO_PORT_D:	SET_BIT(PORTD_REG, Copy_u8pin);  break;
    1fd6:	a2 e3       	ldi	r26, 0x32	; 50
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e2 e3       	ldi	r30, 0x32	; 50
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	48 2f       	mov	r20, r24
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	02 2e       	mov	r0, r18
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <DIO_u8setPinVal+0x100>
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	0a 94       	dec	r0
    1ff6:	e2 f7       	brpl	.-8      	; 0x1ff0 <DIO_u8setPinVal+0xfc>
    1ff8:	84 2b       	or	r24, r20
    1ffa:	8c 93       	st	X, r24
    1ffc:	83 c0       	rjmp	.+262    	; 0x2104 <DIO_u8setPinVal+0x210>

			default: Local_u8statues = 1;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	89 83       	std	Y+1, r24	; 0x01
    2002:	80 c0       	rjmp	.+256    	; 0x2104 <DIO_u8setPinVal+0x210>
			}
		}else if(Copy_u8val == DIO_LOW){
    2004:	8c 81       	ldd	r24, Y+4	; 0x04
    2006:	88 23       	and	r24, r24
    2008:	09 f0       	breq	.+2      	; 0x200c <DIO_u8setPinVal+0x118>
    200a:	77 c0       	rjmp	.+238    	; 0x20fa <DIO_u8setPinVal+0x206>
			switch(Copy_u8port){
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	3e 83       	std	Y+6, r19	; 0x06
    2014:	2d 83       	std	Y+5, r18	; 0x05
    2016:	8d 81       	ldd	r24, Y+5	; 0x05
    2018:	9e 81       	ldd	r25, Y+6	; 0x06
    201a:	81 30       	cpi	r24, 0x01	; 1
    201c:	91 05       	cpc	r25, r1
    201e:	59 f1       	breq	.+86     	; 0x2076 <DIO_u8setPinVal+0x182>
    2020:	2d 81       	ldd	r18, Y+5	; 0x05
    2022:	3e 81       	ldd	r19, Y+6	; 0x06
    2024:	22 30       	cpi	r18, 0x02	; 2
    2026:	31 05       	cpc	r19, r1
    2028:	2c f4       	brge	.+10     	; 0x2034 <DIO_u8setPinVal+0x140>
    202a:	8d 81       	ldd	r24, Y+5	; 0x05
    202c:	9e 81       	ldd	r25, Y+6	; 0x06
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	69 f0       	breq	.+26     	; 0x204c <DIO_u8setPinVal+0x158>
    2032:	60 c0       	rjmp	.+192    	; 0x20f4 <DIO_u8setPinVal+0x200>
    2034:	2d 81       	ldd	r18, Y+5	; 0x05
    2036:	3e 81       	ldd	r19, Y+6	; 0x06
    2038:	22 30       	cpi	r18, 0x02	; 2
    203a:	31 05       	cpc	r19, r1
    203c:	89 f1       	breq	.+98     	; 0x20a0 <DIO_u8setPinVal+0x1ac>
    203e:	8d 81       	ldd	r24, Y+5	; 0x05
    2040:	9e 81       	ldd	r25, Y+6	; 0x06
    2042:	83 30       	cpi	r24, 0x03	; 3
    2044:	91 05       	cpc	r25, r1
    2046:	09 f4       	brne	.+2      	; 0x204a <DIO_u8setPinVal+0x156>
    2048:	40 c0       	rjmp	.+128    	; 0x20ca <DIO_u8setPinVal+0x1d6>
    204a:	54 c0       	rjmp	.+168    	; 0x20f4 <DIO_u8setPinVal+0x200>
			case DIO_PORT_A:	CLR_BIT(PORTA_REG, Copy_u8pin);  break;
    204c:	ab e3       	ldi	r26, 0x3B	; 59
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	eb e3       	ldi	r30, 0x3B	; 59
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	48 2f       	mov	r20, r24
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	02 2e       	mov	r0, r18
    2064:	02 c0       	rjmp	.+4      	; 0x206a <DIO_u8setPinVal+0x176>
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	0a 94       	dec	r0
    206c:	e2 f7       	brpl	.-8      	; 0x2066 <DIO_u8setPinVal+0x172>
    206e:	80 95       	com	r24
    2070:	84 23       	and	r24, r20
    2072:	8c 93       	st	X, r24
    2074:	47 c0       	rjmp	.+142    	; 0x2104 <DIO_u8setPinVal+0x210>
			case DIO_PORT_B:	CLR_BIT(PORTB_REG, Copy_u8pin);  break;
    2076:	a8 e3       	ldi	r26, 0x38	; 56
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e8 e3       	ldi	r30, 0x38	; 56
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	48 2f       	mov	r20, r24
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	02 2e       	mov	r0, r18
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <DIO_u8setPinVal+0x1a0>
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	0a 94       	dec	r0
    2096:	e2 f7       	brpl	.-8      	; 0x2090 <DIO_u8setPinVal+0x19c>
    2098:	80 95       	com	r24
    209a:	84 23       	and	r24, r20
    209c:	8c 93       	st	X, r24
    209e:	32 c0       	rjmp	.+100    	; 0x2104 <DIO_u8setPinVal+0x210>
			case DIO_PORT_C:	CLR_BIT(PORTC_REG, Copy_u8pin);  break;
    20a0:	a5 e3       	ldi	r26, 0x35	; 53
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e5 e3       	ldi	r30, 0x35	; 53
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	48 2f       	mov	r20, r24
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	02 2e       	mov	r0, r18
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <DIO_u8setPinVal+0x1ca>
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	0a 94       	dec	r0
    20c0:	e2 f7       	brpl	.-8      	; 0x20ba <DIO_u8setPinVal+0x1c6>
    20c2:	80 95       	com	r24
    20c4:	84 23       	and	r24, r20
    20c6:	8c 93       	st	X, r24
    20c8:	1d c0       	rjmp	.+58     	; 0x2104 <DIO_u8setPinVal+0x210>
			case DIO_PORT_D:	CLR_BIT(PORTD_REG, Copy_u8pin);  break;
    20ca:	a2 e3       	ldi	r26, 0x32	; 50
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	e2 e3       	ldi	r30, 0x32	; 50
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	48 2f       	mov	r20, r24
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	02 2e       	mov	r0, r18
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <DIO_u8setPinVal+0x1f4>
    20e4:	88 0f       	add	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	0a 94       	dec	r0
    20ea:	e2 f7       	brpl	.-8      	; 0x20e4 <DIO_u8setPinVal+0x1f0>
    20ec:	80 95       	com	r24
    20ee:	84 23       	and	r24, r20
    20f0:	8c 93       	st	X, r24
    20f2:	08 c0       	rjmp	.+16     	; 0x2104 <DIO_u8setPinVal+0x210>

			default: Local_u8statues = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	05 c0       	rjmp	.+10     	; 0x2104 <DIO_u8setPinVal+0x210>
			}
		}else{
			Local_u8statues=1;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <DIO_u8setPinVal+0x210>
		}
	}else{
		Local_u8statues=1;
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    2104:	89 81       	ldd	r24, Y+1	; 0x01
}
    2106:	28 96       	adiw	r28, 0x08	; 8
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	cf 91       	pop	r28
    2114:	df 91       	pop	r29
    2116:	08 95       	ret

00002118 <DIO_u8getPinVal>:

//get PIN value
u8 DIO_u8getPinVal(u8 Copy_u8port, u8 Copy_u8pin, u8 *Copy_u8valuePtr){
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	27 97       	sbiw	r28, 0x07	; 7
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	8a 83       	std	Y+2, r24	; 0x02
    212e:	6b 83       	std	Y+3, r22	; 0x03
    2130:	5d 83       	std	Y+5, r21	; 0x05
    2132:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8statues = 0;
    2134:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= 0 && Copy_u8pin <=7){
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	88 30       	cpi	r24, 0x08	; 8
    213a:	08 f0       	brcs	.+2      	; 0x213e <DIO_u8getPinVal+0x26>
    213c:	74 c0       	rjmp	.+232    	; 0x2226 <DIO_u8getPinVal+0x10e>
		switch(Copy_u8port){
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	3f 83       	std	Y+7, r19	; 0x07
    2146:	2e 83       	std	Y+6, r18	; 0x06
    2148:	4e 81       	ldd	r20, Y+6	; 0x06
    214a:	5f 81       	ldd	r21, Y+7	; 0x07
    214c:	41 30       	cpi	r20, 0x01	; 1
    214e:	51 05       	cpc	r21, r1
    2150:	59 f1       	breq	.+86     	; 0x21a8 <DIO_u8getPinVal+0x90>
    2152:	8e 81       	ldd	r24, Y+6	; 0x06
    2154:	9f 81       	ldd	r25, Y+7	; 0x07
    2156:	82 30       	cpi	r24, 0x02	; 2
    2158:	91 05       	cpc	r25, r1
    215a:	34 f4       	brge	.+12     	; 0x2168 <DIO_u8getPinVal+0x50>
    215c:	2e 81       	ldd	r18, Y+6	; 0x06
    215e:	3f 81       	ldd	r19, Y+7	; 0x07
    2160:	21 15       	cp	r18, r1
    2162:	31 05       	cpc	r19, r1
    2164:	69 f0       	breq	.+26     	; 0x2180 <DIO_u8getPinVal+0x68>
    2166:	5c c0       	rjmp	.+184    	; 0x2220 <DIO_u8getPinVal+0x108>
    2168:	4e 81       	ldd	r20, Y+6	; 0x06
    216a:	5f 81       	ldd	r21, Y+7	; 0x07
    216c:	42 30       	cpi	r20, 0x02	; 2
    216e:	51 05       	cpc	r21, r1
    2170:	79 f1       	breq	.+94     	; 0x21d0 <DIO_u8getPinVal+0xb8>
    2172:	8e 81       	ldd	r24, Y+6	; 0x06
    2174:	9f 81       	ldd	r25, Y+7	; 0x07
    2176:	83 30       	cpi	r24, 0x03	; 3
    2178:	91 05       	cpc	r25, r1
    217a:	09 f4       	brne	.+2      	; 0x217e <DIO_u8getPinVal+0x66>
    217c:	3d c0       	rjmp	.+122    	; 0x21f8 <DIO_u8getPinVal+0xe0>
    217e:	50 c0       	rjmp	.+160    	; 0x2220 <DIO_u8getPinVal+0x108>
		case DIO_PORT_A: *Copy_u8valuePtr = GET_BIT(PINA_REG, Copy_u8pin); break;
    2180:	e9 e3       	ldi	r30, 0x39	; 57
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	88 2f       	mov	r24, r24
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	a9 01       	movw	r20, r18
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <DIO_u8getPinVal+0x80>
    2194:	55 95       	asr	r21
    2196:	47 95       	ror	r20
    2198:	8a 95       	dec	r24
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <DIO_u8getPinVal+0x7c>
    219c:	ca 01       	movw	r24, r20
    219e:	81 70       	andi	r24, 0x01	; 1
    21a0:	ec 81       	ldd	r30, Y+4	; 0x04
    21a2:	fd 81       	ldd	r31, Y+5	; 0x05
    21a4:	80 83       	st	Z, r24
    21a6:	41 c0       	rjmp	.+130    	; 0x222a <DIO_u8getPinVal+0x112>
		case DIO_PORT_B: *Copy_u8valuePtr = GET_BIT(PINB_REG, Copy_u8pin); break;
    21a8:	e6 e3       	ldi	r30, 0x36	; 54
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	88 2f       	mov	r24, r24
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	a9 01       	movw	r20, r18
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <DIO_u8getPinVal+0xa8>
    21bc:	55 95       	asr	r21
    21be:	47 95       	ror	r20
    21c0:	8a 95       	dec	r24
    21c2:	e2 f7       	brpl	.-8      	; 0x21bc <DIO_u8getPinVal+0xa4>
    21c4:	ca 01       	movw	r24, r20
    21c6:	81 70       	andi	r24, 0x01	; 1
    21c8:	ec 81       	ldd	r30, Y+4	; 0x04
    21ca:	fd 81       	ldd	r31, Y+5	; 0x05
    21cc:	80 83       	st	Z, r24
    21ce:	2d c0       	rjmp	.+90     	; 0x222a <DIO_u8getPinVal+0x112>
		case DIO_PORT_C: *Copy_u8valuePtr = GET_BIT(PINC_REG, Copy_u8pin); break;
    21d0:	e3 e3       	ldi	r30, 0x33	; 51
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	88 2f       	mov	r24, r24
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	a9 01       	movw	r20, r18
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <DIO_u8getPinVal+0xd0>
    21e4:	55 95       	asr	r21
    21e6:	47 95       	ror	r20
    21e8:	8a 95       	dec	r24
    21ea:	e2 f7       	brpl	.-8      	; 0x21e4 <DIO_u8getPinVal+0xcc>
    21ec:	ca 01       	movw	r24, r20
    21ee:	81 70       	andi	r24, 0x01	; 1
    21f0:	ec 81       	ldd	r30, Y+4	; 0x04
    21f2:	fd 81       	ldd	r31, Y+5	; 0x05
    21f4:	80 83       	st	Z, r24
    21f6:	19 c0       	rjmp	.+50     	; 0x222a <DIO_u8getPinVal+0x112>
		case DIO_PORT_D: *Copy_u8valuePtr = GET_BIT(PIND_REG, Copy_u8pin); break;
    21f8:	e0 e3       	ldi	r30, 0x30	; 48
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	8b 81       	ldd	r24, Y+3	; 0x03
    2204:	88 2f       	mov	r24, r24
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	a9 01       	movw	r20, r18
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <DIO_u8getPinVal+0xf8>
    220c:	55 95       	asr	r21
    220e:	47 95       	ror	r20
    2210:	8a 95       	dec	r24
    2212:	e2 f7       	brpl	.-8      	; 0x220c <DIO_u8getPinVal+0xf4>
    2214:	ca 01       	movw	r24, r20
    2216:	81 70       	andi	r24, 0x01	; 1
    2218:	ec 81       	ldd	r30, Y+4	; 0x04
    221a:	fd 81       	ldd	r31, Y+5	; 0x05
    221c:	80 83       	st	Z, r24
    221e:	05 c0       	rjmp	.+10     	; 0x222a <DIO_u8getPinVal+0x112>

		default: Local_u8statues = 1;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	02 c0       	rjmp	.+4      	; 0x222a <DIO_u8getPinVal+0x112>
		}
	}else{
		Local_u8statues=1;
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8statues;
    222a:	89 81       	ldd	r24, Y+1	; 0x01
}
    222c:	27 96       	adiw	r28, 0x07	; 7
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <HMCP2515_voidWriteReg>:
 **************** Common Function Start  **********************/

/*********** Write Section Start ****************/

void HMCP2515_voidWriteReg(u8 Copy_u8RegAddress ,u8 Copy_u8Data)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	00 d0       	rcall	.+0      	; 0x2244 <HMCP2515_voidWriteReg+0x6>
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	89 83       	std	Y+1, r24	; 0x01
    224a:	6a 83       	std	Y+2, r22	; 0x02

	MSPI_VidChipSelect(1);
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <MSPI_VidChipSelect>
	MSPI_U8MasterTransmit(MCP2515_WRITE_INST);
    2252:	82 e0       	ldi	r24, 0x02	; 2
    2254:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8RegAddress );
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8Data);
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	MSPI_VidChipSelect(0);
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	0e 94 ab 0a 	call	0x1556	; 0x1556 <MSPI_VidChipSelect>
}
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <HMCP2515_U8ReadReg>:
/*********** Write Section End ****************/

/*********** Read Section Start ****************/
u8 HMCP2515_U8ReadReg(u8 Copy_u8RegAddress)
{
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	00 d0       	rcall	.+0      	; 0x227a <HMCP2515_U8ReadReg+0x6>
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	8a 83       	std	Y+2, r24	; 0x02
    u8 localValue2;
	MSPI_VidChipSelect(1);
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	0e 94 ab 0a 	call	0x1556	; 0x1556 <MSPI_VidChipSelect>
	MSPI_U8MasterTransmit(MCP2515_READ_INST);
    2286:	83 e0       	ldi	r24, 0x03	; 3
    2288:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8RegAddress);
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	localValue2 = MSPI_U8MasterTransmit(0);
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
    2298:	89 83       	std	Y+1, r24	; 0x01
	MSPI_VidChipSelect(0);
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	0e 94 ab 0a 	call	0x1556	; 0x1556 <MSPI_VidChipSelect>
    return localValue2;
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <HMCP2515_voidResetInst>:
/*********** Read Section End ****************/

/*********** Reset Section Start ****************/
void HMCP2515_voidResetInst(void)
{
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
	MSPI_VidChipSelect(1);
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	0e 94 ab 0a 	call	0x1556	; 0x1556 <MSPI_VidChipSelect>
	MSPI_U8MasterTransmit(MCP2515_RESET_INST);
    22ba:	80 ec       	ldi	r24, 0xC0	; 192
    22bc:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	MSPI_VidChipSelect(0);
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	0e 94 ab 0a 	call	0x1556	; 0x1556 <MSPI_VidChipSelect>
}
    22c6:	cf 91       	pop	r28
    22c8:	df 91       	pop	r29
    22ca:	08 95       	ret

000022cc <HMCP2515_voidBitModify>:
/*********** Reset Instruction End ****************/

/*********** Bit Modify Section Start ****************/
void  HMCP2515_voidBitModify(u8 Copy_RegAddress ,u8 Copy_u8Mask,u8 Copy_U8Data )
{
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <HMCP2515_voidBitModify+0x6>
    22d2:	0f 92       	push	r0
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	6a 83       	std	Y+2, r22	; 0x02
    22dc:	4b 83       	std	Y+3, r20	; 0x03

	MSPI_VidChipSelect(1);
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	0e 94 ab 0a 	call	0x1556	; 0x1556 <MSPI_VidChipSelect>
	MSPI_U8MasterTransmit(MCP2515_BITMODIFY_INST );
    22e4:	85 e0       	ldi	r24, 0x05	; 5
    22e6:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_RegAddress);
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8Mask);
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_U8Data);
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	MSPI_VidChipSelect(0);
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	0e 94 ab 0a 	call	0x1556	; 0x1556 <MSPI_VidChipSelect>

}
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	08 95       	ret

0000230e <HMCP2515_voidSetBitTiming>:
/*********** Bit Modify Section End ****************/

/*********** Bit Timing Section Start ****************/
void HMCP2515_voidSetBitTiming(u8 Copy_U8CNFVAL1 ,u8 Copy_U8CNFVAL2 ,u8 Copy_U8CNFVAL3)
{
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	00 d0       	rcall	.+0      	; 0x2314 <HMCP2515_voidSetBitTiming+0x6>
    2314:	0f 92       	push	r0
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	6a 83       	std	Y+2, r22	; 0x02
    231e:	4b 83       	std	Y+3, r20	; 0x03
     * 1 TQ for Synch bit
     * 6 TQ for Phase segment 2
     * 2 TQ For Propagation Segment
     * 7 TQ For Phase segment 1
     */
	HMCP2515_voidWriteReg(CNF1,Copy_U8CNFVAL1);
    2320:	8a e2       	ldi	r24, 0x2A	; 42
    2322:	69 81       	ldd	r22, Y+1	; 0x01
    2324:	0e 94 1f 11 	call	0x223e	; 0x223e <HMCP2515_voidWriteReg>
	HMCP2515_voidWriteReg(CNF2,Copy_U8CNFVAL2);
    2328:	89 e2       	ldi	r24, 0x29	; 41
    232a:	6a 81       	ldd	r22, Y+2	; 0x02
    232c:	0e 94 1f 11 	call	0x223e	; 0x223e <HMCP2515_voidWriteReg>
	HMCP2515_voidWriteReg(CNF3,Copy_U8CNFVAL3);
    2330:	88 e2       	ldi	r24, 0x28	; 40
    2332:	6b 81       	ldd	r22, Y+3	; 0x03
    2334:	0e 94 1f 11 	call	0x223e	; 0x223e <HMCP2515_voidWriteReg>
}
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret

00002344 <HMCP2515_voidSetMode>:
/*********** Bit Timing Section End ****************/

/*********** Set Mode Inst Section Start ****************/
void HMCP2515_voidSetMode(u8 Copy_U8Mode)
{
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	0f 92       	push	r0
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	89 83       	std	Y+1, r24	; 0x01
    HMCP2515_voidBitModify(CANCTRL ,0XE0,(Copy_U8Mode<<5));
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	98 2f       	mov	r25, r24
    2354:	92 95       	swap	r25
    2356:	99 0f       	add	r25, r25
    2358:	90 7e       	andi	r25, 0xE0	; 224
    235a:	8f e0       	ldi	r24, 0x0F	; 15
    235c:	60 ee       	ldi	r22, 0xE0	; 224
    235e:	49 2f       	mov	r20, r25
    2360:	0e 94 66 11 	call	0x22cc	; 0x22cc <HMCP2515_voidBitModify>
	//HMCP2515_voidWriteReg(CANCTRL,(Copy_U8Mode<<5));
    //u8 local1=HMCP2515_U8ReadReg(CANSTAT);
	while((HMCP2515_U8ReadReg(CANSTAT)>>5)!=Copy_U8Mode);
    2364:	8e e0       	ldi	r24, 0x0E	; 14
    2366:	0e 94 3a 11 	call	0x2274	; 0x2274 <HMCP2515_U8ReadReg>
    236a:	98 2f       	mov	r25, r24
    236c:	92 95       	swap	r25
    236e:	96 95       	lsr	r25
    2370:	97 70       	andi	r25, 0x07	; 7
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	98 17       	cp	r25, r24
    2376:	b1 f7       	brne	.-20     	; 0x2364 <HMCP2515_voidSetMode+0x20>
		HMCP2515_voidBitModify(CANCTRL ,0XE0,Copy_U8Mode<<5);
		 MCAL_DIO_voidSETBIT(PC,PC0,LOW);

	}*/

}
    2378:	0f 90       	pop	r0
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <HMCP2515_voidInitTransimiter>:
/*********** Set Mode Inst Section End ****************/

/************* Transmitter initialization Section Start ******************/
void HMCP2515_voidInitTransimiter(void)
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
	  //MCAL_DIO_voidDirectionPIN(PC,PC0,OUTPUT);
	  MSPI_voidSpiMasterInit();
    2388:	0e 94 79 09 	call	0x12f2	; 0x12f2 <MSPI_voidSpiMasterInit>
	  HMCP2515_voidResetInst();
    238c:	0e 94 56 11 	call	0x22ac	; 0x22ac <HMCP2515_voidResetInst>

	  /* enter conf mode and enable clock */
	  HMCP2515_voidWriteReg(CANCTRL,0x87);
    2390:	8f e0       	ldi	r24, 0x0F	; 15
    2392:	67 e8       	ldi	r22, 0x87	; 135
    2394:	0e 94 1f 11 	call	0x223e	; 0x223e <HMCP2515_voidWriteReg>
	   */
	 // HMCP2515_voidSetMode(CONFIG_MODE);

	 // HMCP2515_voidBitModify(CANCTRL ,0X04,0x04);
     // u8 local =HMCP2515_U8ReadReg(CANSTAT);
	 while((HMCP2515_U8ReadReg(CANSTAT)>>5) != CONFIG_MODE);
    2398:	8e e0       	ldi	r24, 0x0E	; 14
    239a:	0e 94 3a 11 	call	0x2274	; 0x2274 <HMCP2515_U8ReadReg>
    239e:	82 95       	swap	r24
    23a0:	86 95       	lsr	r24
    23a2:	87 70       	andi	r24, 0x07	; 7
    23a4:	84 30       	cpi	r24, 0x04	; 4
    23a6:	c1 f7       	brne	.-16     	; 0x2398 <HMCP2515_voidInitTransimiter+0x18>
	/* to run at 250KHz bitrate using 8MHz osc */
	 HMCP2515_voidSetBitTiming(2<<6, (1<<7)|(6<<3)|(1), (0x15));
    23a8:	80 e8       	ldi	r24, 0x80	; 128
    23aa:	61 eb       	ldi	r22, 0xB1	; 177
    23ac:	45 e1       	ldi	r20, 0x15	; 21
    23ae:	0e 94 87 11 	call	0x230e	; 0x230e <HMCP2515_voidSetBitTiming>
	// HMCP2515_voidSetBitTiming(0x80,0xB1,0x05);
  /*  return to normal mode sending ans Recieving*/
	  HMCP2515_voidSetMode(NORMAL_MODE);
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	0e 94 a2 11 	call	0x2344	; 0x2344 <HMCP2515_voidSetMode>

}
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	08 95       	ret

000023be <HMCP2515_VidSendCAN_Msg>:
/************* Transmitter initialization Section End  ******************/

/******************Transmitter Sending Message Start ****************/
void HMCP2515_VidSendCAN_Msg(u8 Copy_u8Address ,u32 Copy_u8MsgID, u8 Copy_u8DataLen_DLC , u8*Copy_u8data)
{
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
    23c6:	28 97       	sbiw	r28, 0x08	; 8
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	f8 94       	cli
    23cc:	de bf       	out	0x3e, r29	; 62
    23ce:	0f be       	out	0x3f, r0	; 63
    23d0:	cd bf       	out	0x3d, r28	; 61
    23d2:	8b 83       	std	Y+3, r24	; 0x03
    23d4:	7d 83       	std	Y+5, r23	; 0x05
    23d6:	6c 83       	std	Y+4, r22	; 0x04
    23d8:	4e 83       	std	Y+6, r20	; 0x06
    23da:	38 87       	std	Y+8, r19	; 0x08
    23dc:	2f 83       	std	Y+7, r18	; 0x07
	MSPI_VidChipSelect(1);
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	0e 94 ab 0a 	call	0x1556	; 0x1556 <MSPI_VidChipSelect>

	MSPI_U8MasterTransmit(MCP2515_WRITE_INST);
    23e4:	82 e0       	ldi	r24, 0x02	; 2
    23e6:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8Address);
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	/* any data can send Highest priority  (Mandatory)*/
	MSPI_U8MasterTransmit(0x03);
    23f0:	83 e0       	ldi	r24, 0x03	; 3
    23f2:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	/* full IDH */
	MSPI_U8MasterTransmit((u8)(Copy_u8MsgID>>3));
    23f6:	8c 81       	ldd	r24, Y+4	; 0x04
    23f8:	9d 81       	ldd	r25, Y+5	; 0x05
    23fa:	96 95       	lsr	r25
    23fc:	87 95       	ror	r24
    23fe:	96 95       	lsr	r25
    2400:	87 95       	ror	r24
    2402:	96 95       	lsr	r25
    2404:	87 95       	ror	r24
    2406:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit((u8)(Copy_u8MsgID<<5) | (0b00000001<<3));
    240a:	8c 81       	ldd	r24, Y+4	; 0x04
    240c:	82 95       	swap	r24
    240e:	88 0f       	add	r24, r24
    2410:	80 7e       	andi	r24, 0xE0	; 224
    2412:	88 60       	ori	r24, 0x08	; 8
    2414:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(0);
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(0);
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	/* DLC IS 1000 RTR IS 0 SO WRITE  */
	MSPI_U8MasterTransmit(Copy_u8DataLen_DLC&0x0F);
    2424:	8e 81       	ldd	r24, Y+6	; 0x06
    2426:	8f 70       	andi	r24, 0x0F	; 15
    2428:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	/* send data */
	for(int i =0; i<(Copy_u8DataLen_DLC&0x0F);i++)
    242c:	1a 82       	std	Y+2, r1	; 0x02
    242e:	19 82       	std	Y+1, r1	; 0x01
    2430:	0f c0       	rjmp	.+30     	; 0x2450 <HMCP2515_VidSendCAN_Msg+0x92>
	{
		MSPI_U8MasterTransmit(Copy_u8data[i]);
    2432:	29 81       	ldd	r18, Y+1	; 0x01
    2434:	3a 81       	ldd	r19, Y+2	; 0x02
    2436:	8f 81       	ldd	r24, Y+7	; 0x07
    2438:	98 85       	ldd	r25, Y+8	; 0x08
    243a:	fc 01       	movw	r30, r24
    243c:	e2 0f       	add	r30, r18
    243e:	f3 1f       	adc	r31, r19
    2440:	80 81       	ld	r24, Z
    2442:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(0);
	MSPI_U8MasterTransmit(0);
	/* DLC IS 1000 RTR IS 0 SO WRITE  */
	MSPI_U8MasterTransmit(Copy_u8DataLen_DLC&0x0F);
	/* send data */
	for(int i =0; i<(Copy_u8DataLen_DLC&0x0F);i++)
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	01 96       	adiw	r24, 0x01	; 1
    244c:	9a 83       	std	Y+2, r25	; 0x02
    244e:	89 83       	std	Y+1, r24	; 0x01
    2450:	8e 81       	ldd	r24, Y+6	; 0x06
    2452:	88 2f       	mov	r24, r24
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	9c 01       	movw	r18, r24
    2458:	2f 70       	andi	r18, 0x0F	; 15
    245a:	30 70       	andi	r19, 0x00	; 0
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	82 17       	cp	r24, r18
    2462:	93 07       	cpc	r25, r19
    2464:	34 f3       	brlt	.-52     	; 0x2432 <HMCP2515_VidSendCAN_Msg+0x74>
	{
		MSPI_U8MasterTransmit(Copy_u8data[i]);
	}

	/* good bye for bus */
	MSPI_VidChipSelect(0);
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	0e 94 ab 0a 	call	0x1556	; 0x1556 <MSPI_VidChipSelect>

	/* Request to send data */
	MSPI_VidChipSelect(1);
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <MSPI_VidChipSelect>

	MSPI_U8MasterTransmit(MCP2515_MREG2SENDTXB0_INST);
    2472:	81 e8       	ldi	r24, 0x81	; 129
    2474:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>

	MSPI_VidChipSelect(0);
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	0e 94 ab 0a 	call	0x1556	; 0x1556 <MSPI_VidChipSelect>


}
    247e:	28 96       	adiw	r28, 0x08	; 8
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	de bf       	out	0x3e, r29	; 62
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	cd bf       	out	0x3d, r28	; 61
    248a:	cf 91       	pop	r28
    248c:	df 91       	pop	r29
    248e:	08 95       	ret

00002490 <HMCP2515_voidRollOver>:
*/

/**** Declaration End  *****/

void HMCP2515_voidRollOver(u8 Copy_u8BUKT)
	{
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	0f 92       	push	r0
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	89 83       	std	Y+1, r24	; 0x01
		HMCP2515_voidBitModify(RXB0CTRL , 1<<Copy_u8BUKT, 1<<Copy_u8BUKT );
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	28 2f       	mov	r18, r24
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <HMCP2515_voidRollOver+0x1c>
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	2a 95       	dec	r18
    24ae:	e2 f7       	brpl	.-8      	; 0x24a8 <HMCP2515_voidRollOver+0x18>
    24b0:	48 2f       	mov	r20, r24
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	28 2f       	mov	r18, r24
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <HMCP2515_voidRollOver+0x32>
    24be:	88 0f       	add	r24, r24
    24c0:	99 1f       	adc	r25, r25
    24c2:	2a 95       	dec	r18
    24c4:	e2 f7       	brpl	.-8      	; 0x24be <HMCP2515_voidRollOver+0x2e>
    24c6:	98 2f       	mov	r25, r24
    24c8:	80 e6       	ldi	r24, 0x60	; 96
    24ca:	64 2f       	mov	r22, r20
    24cc:	49 2f       	mov	r20, r25
    24ce:	0e 94 66 11 	call	0x22cc	; 0x22cc <HMCP2515_voidBitModify>
	}
    24d2:	0f 90       	pop	r0
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	08 95       	ret

000024da <HMCP2515_voidSetMask>:

void HMCP2515_voidSetMask(u8 Copy_u8address_mask_Reg ,u32 Copy_u32Mask_Value ,u8 Copy_u8Extended)
{
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	00 d0       	rcall	.+0      	; 0x24e0 <HMCP2515_voidSetMask+0x6>
    24e0:	00 d0       	rcall	.+0      	; 0x24e2 <HMCP2515_voidSetMask+0x8>
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	89 83       	std	Y+1, r24	; 0x01
    24e8:	7b 83       	std	Y+3, r23	; 0x03
    24ea:	6a 83       	std	Y+2, r22	; 0x02
    24ec:	4c 83       	std	Y+4, r20	; 0x04
		  MSPI_VidChipSelect(1);
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	0e 94 ab 0a 	call	0x1556	; 0x1556 <MSPI_VidChipSelect>
		  MSPI_U8MasterTransmit(MCP2515_WRITE_INST);
    24f4:	82 e0       	ldi	r24, 0x02	; 2
    24f6:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit(Copy_u8address_mask_Reg);
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	  if(Copy_u8Extended)
    2500:	8c 81       	ldd	r24, Y+4	; 0x04
    2502:	88 23       	and	r24, r24
    2504:	59 f1       	breq	.+86     	; 0x255c <HMCP2515_voidSetMask+0x82>
	  {
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value>>3));
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	9b 81       	ldd	r25, Y+3	; 0x03
    250a:	96 95       	lsr	r25
    250c:	87 95       	ror	r24
    250e:	96 95       	lsr	r25
    2510:	87 95       	ror	r24
    2512:	96 95       	lsr	r25
    2514:	87 95       	ror	r24
    2516:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value<<5) | 0b00000001<<3);
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	82 95       	swap	r24
    251e:	88 0f       	add	r24, r24
    2520:	80 7e       	andi	r24, 0xE0	; 224
    2522:	88 60       	ori	r24, 0x08	; 8
    2524:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value>>3)|(u8)(Copy_u32Mask_Value>>27));
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	9b 81       	ldd	r25, Y+3	; 0x03
    252c:	96 95       	lsr	r25
    252e:	87 95       	ror	r24
    2530:	96 95       	lsr	r25
    2532:	87 95       	ror	r24
    2534:	96 95       	lsr	r25
    2536:	87 95       	ror	r24
    2538:	28 2f       	mov	r18, r24
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	9b 81       	ldd	r25, Y+3	; 0x03
    253e:	99 27       	eor	r25, r25
    2540:	88 27       	eor	r24, r24
    2542:	82 2b       	or	r24, r18
    2544:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value>>11));
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	9b 81       	ldd	r25, Y+3	; 0x03
    254c:	89 2f       	mov	r24, r25
    254e:	99 27       	eor	r25, r25
    2550:	86 95       	lsr	r24
    2552:	86 95       	lsr	r24
    2554:	86 95       	lsr	r24
    2556:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
    255a:	10 c0       	rjmp	.+32     	; 0x257c <HMCP2515_voidSetMask+0xa2>
	  }
	  else
	  {
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value>>3));
    255c:	8a 81       	ldd	r24, Y+2	; 0x02
    255e:	9b 81       	ldd	r25, Y+3	; 0x03
    2560:	96 95       	lsr	r25
    2562:	87 95       	ror	r24
    2564:	96 95       	lsr	r25
    2566:	87 95       	ror	r24
    2568:	96 95       	lsr	r25
    256a:	87 95       	ror	r24
    256c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value<<5));
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	82 95       	swap	r24
    2574:	88 0f       	add	r24, r24
    2576:	80 7e       	andi	r24, 0xE0	; 224
    2578:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	  }
	    MSPI_VidChipSelect(0);
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <MSPI_VidChipSelect>
}
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <HMCP2515_voidRecievInit>:

void HMCP2515_voidRecievInit(void)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
	MSPI_voidSpiMasterInit();
    2598:	0e 94 79 09 	call	0x12f2	; 0x12f2 <MSPI_voidSpiMasterInit>
	HMCP2515_voidResetInst();
    259c:	0e 94 56 11 	call	0x22ac	; 0x22ac <HMCP2515_voidResetInst>
	/* CONFIG mode and Enable clock */
	HMCP2515_voidWriteReg(CANCTRL,0x87);
    25a0:	8f e0       	ldi	r24, 0x0F	; 15
    25a2:	67 e8       	ldi	r22, 0x87	; 135
    25a4:	0e 94 1f 11 	call	0x223e	; 0x223e <HMCP2515_voidWriteReg>
	/*
	 */
	while((HMCP2515_U8ReadReg(CANSTAT)>>5) != CONFIG_MODE){}
    25a8:	8e e0       	ldi	r24, 0x0E	; 14
    25aa:	0e 94 3a 11 	call	0x2274	; 0x2274 <HMCP2515_U8ReadReg>
    25ae:	82 95       	swap	r24
    25b0:	86 95       	lsr	r24
    25b2:	87 70       	andi	r24, 0x07	; 7
    25b4:	84 30       	cpi	r24, 0x04	; 4
    25b6:	c1 f7       	brne	.-16     	; 0x25a8 <HMCP2515_voidRecievInit+0x18>
     //8MHZ
	HMCP2515_voidSetBitTiming(2<<6, (1<<7)|(6<<3)|(1), (0x15));
    25b8:	80 e8       	ldi	r24, 0x80	; 128
    25ba:	61 eb       	ldi	r22, 0xB1	; 177
    25bc:	45 e1       	ldi	r20, 0x15	; 21
    25be:	0e 94 87 11 	call	0x230e	; 0x230e <HMCP2515_voidSetBitTiming>

	HMCP2515_voidSetMask(RXF0SIDH, 0x00000001, 1) ;
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	61 e0       	ldi	r22, 0x01	; 1
    25c6:	70 e0       	ldi	r23, 0x00	; 0
    25c8:	41 e0       	ldi	r20, 0x01	; 1
    25ca:	0e 94 6d 12 	call	0x24da	; 0x24da <HMCP2515_voidSetMask>
	HMCP2515_voidSetMask(RXF1SIDH, 0x00000003, 1) ;
    25ce:	84 e0       	ldi	r24, 0x04	; 4
    25d0:	63 e0       	ldi	r22, 0x03	; 3
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	41 e0       	ldi	r20, 0x01	; 1
    25d6:	0e 94 6d 12 	call	0x24da	; 0x24da <HMCP2515_voidSetMask>
	HMCP2515_voidSetMask(RXM0SIDH, 0x0000000f, 1);
    25da:	80 e2       	ldi	r24, 0x20	; 32
    25dc:	6f e0       	ldi	r22, 0x0F	; 15
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	41 e0       	ldi	r20, 0x01	; 1
    25e2:	0e 94 6d 12 	call	0x24da	; 0x24da <HMCP2515_voidSetMask>
	HMCP2515_voidSetMask(RXM1SIDH, 0x0000000f, 1);
    25e6:	84 e2       	ldi	r24, 0x24	; 36
    25e8:	6f e0       	ldi	r22, 0x0F	; 15
    25ea:	70 e0       	ldi	r23, 0x00	; 0
    25ec:	41 e0       	ldi	r20, 0x01	; 1
    25ee:	0e 94 6d 12 	call	0x24da	; 0x24da <HMCP2515_voidSetMask>

	HMCP2515_voidRollOver(1);
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	0e 94 48 12 	call	0x2490	; 0x2490 <HMCP2515_voidRollOver>

	HMCP2515_voidBitModify(CANINTE, 1<<0, 1<<RX0IE);
    25f8:	8b e2       	ldi	r24, 0x2B	; 43
    25fa:	61 e0       	ldi	r22, 0x01	; 1
    25fc:	41 e0       	ldi	r20, 0x01	; 1
    25fe:	0e 94 66 11 	call	0x22cc	; 0x22cc <HMCP2515_voidBitModify>

	HMCP2515_voidSetMode(NORMAL_MODE);
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	0e 94 a2 11 	call	0x2344	; 0x2344 <HMCP2515_voidSetMode>
}
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <HMCP2515_voidRecieveMess>:

void HMCP2515_voidRecieveMess(u8 Copy_u8REC_Buff_addres)
{
    260e:	0f 93       	push	r16
    2610:	1f 93       	push	r17
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	00 d0       	rcall	.+0      	; 0x2618 <HMCP2515_voidRecieveMess+0xa>
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	8a 83       	std	Y+2, r24	; 0x02

	MSPI_VidChipSelect(1);
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	0e 94 ab 0a 	call	0x1556	; 0x1556 <MSPI_VidChipSelect>

	MSPI_U8MasterTransmit(MCP2515_READ_INST);
    2624:	83 e0       	ldi	r24, 0x03	; 3
    2626:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8REC_Buff_addres);
    262a:	8a 81       	ldd	r24, Y+2	; 0x02
    262c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>

     for (u8 buff_index = 0 ; buff_index < 14; buff_index++)
    2630:	19 82       	std	Y+1, r1	; 0x01
    2632:	0d c0       	rjmp	.+26     	; 0x264e <HMCP2515_voidRecieveMess+0x40>
     {
    	 REC_Message[buff_index]=MSPI_U8MasterTransmit(0);
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	08 2f       	mov	r16, r24
    2638:	10 e0       	ldi	r17, 0x00	; 0
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <MSPI_U8MasterTransmit>
    2640:	f8 01       	movw	r30, r16
    2642:	e8 56       	subi	r30, 0x68	; 104
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	80 83       	st	Z, r24
	MSPI_VidChipSelect(1);

	MSPI_U8MasterTransmit(MCP2515_READ_INST);
	MSPI_U8MasterTransmit(Copy_u8REC_Buff_addres);

     for (u8 buff_index = 0 ; buff_index < 14; buff_index++)
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	8f 5f       	subi	r24, 0xFF	; 255
    264c:	89 83       	std	Y+1, r24	; 0x01
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	8e 30       	cpi	r24, 0x0E	; 14
    2652:	80 f3       	brcs	.-32     	; 0x2634 <HMCP2515_voidRecieveMess+0x26>
     {
    	 REC_Message[buff_index]=MSPI_U8MasterTransmit(0);
     }

	MSPI_VidChipSelect(0);
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	0e 94 ab 0a 	call	0x1556	; 0x1556 <MSPI_VidChipSelect>
	/*Clear Flag  */
	HMCP2515_voidWriteReg(CANINTF,0);
    265a:	8c e2       	ldi	r24, 0x2C	; 44
    265c:	60 e0       	ldi	r22, 0x00	; 0
    265e:	0e 94 1f 11 	call	0x223e	; 0x223e <HMCP2515_voidWriteReg>
}
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	1f 91       	pop	r17
    266c:	0f 91       	pop	r16
    266e:	08 95       	ret

00002670 <LED_u8Mapping>:

/*
 *This function takes the led number, and returns the port and pin of that specific led;
 * it also return 1 if the led exist(between 1 and 8), 0 Otherwise;
 */
static u8 LED_u8Mapping(u8 Copy_u8LedNumber, u8 *Copy_u8PortPtr, u8 *Copy_u8PinPtr){
    2670:	df 93       	push	r29
    2672:	cf 93       	push	r28
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	28 97       	sbiw	r28, 0x08	; 8
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	f8 94       	cli
    267e:	de bf       	out	0x3e, r29	; 62
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	cd bf       	out	0x3d, r28	; 61
    2684:	8a 83       	std	Y+2, r24	; 0x02
    2686:	7c 83       	std	Y+4, r23	; 0x04
    2688:	6b 83       	std	Y+3, r22	; 0x03
    268a:	5e 83       	std	Y+6, r21	; 0x06
    268c:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8LedNumberStatus = 1;
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8LedNumber){
    2692:	8a 81       	ldd	r24, Y+2	; 0x02
    2694:	28 2f       	mov	r18, r24
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	38 87       	std	Y+8, r19	; 0x08
    269a:	2f 83       	std	Y+7, r18	; 0x07
    269c:	8f 81       	ldd	r24, Y+7	; 0x07
    269e:	98 85       	ldd	r25, Y+8	; 0x08
    26a0:	84 30       	cpi	r24, 0x04	; 4
    26a2:	91 05       	cpc	r25, r1
    26a4:	09 f4       	brne	.+2      	; 0x26a8 <LED_u8Mapping+0x38>
    26a6:	41 c0       	rjmp	.+130    	; 0x272a <LED_u8Mapping+0xba>
    26a8:	2f 81       	ldd	r18, Y+7	; 0x07
    26aa:	38 85       	ldd	r19, Y+8	; 0x08
    26ac:	25 30       	cpi	r18, 0x05	; 5
    26ae:	31 05       	cpc	r19, r1
    26b0:	84 f4       	brge	.+32     	; 0x26d2 <LED_u8Mapping+0x62>
    26b2:	8f 81       	ldd	r24, Y+7	; 0x07
    26b4:	98 85       	ldd	r25, Y+8	; 0x08
    26b6:	82 30       	cpi	r24, 0x02	; 2
    26b8:	91 05       	cpc	r25, r1
    26ba:	39 f1       	breq	.+78     	; 0x270a <LED_u8Mapping+0x9a>
    26bc:	2f 81       	ldd	r18, Y+7	; 0x07
    26be:	38 85       	ldd	r19, Y+8	; 0x08
    26c0:	23 30       	cpi	r18, 0x03	; 3
    26c2:	31 05       	cpc	r19, r1
    26c4:	54 f5       	brge	.+84     	; 0x271a <LED_u8Mapping+0xaa>
    26c6:	8f 81       	ldd	r24, Y+7	; 0x07
    26c8:	98 85       	ldd	r25, Y+8	; 0x08
    26ca:	81 30       	cpi	r24, 0x01	; 1
    26cc:	91 05       	cpc	r25, r1
    26ce:	b1 f0       	breq	.+44     	; 0x26fc <LED_u8Mapping+0x8c>
    26d0:	54 c0       	rjmp	.+168    	; 0x277a <LED_u8Mapping+0x10a>
    26d2:	2f 81       	ldd	r18, Y+7	; 0x07
    26d4:	38 85       	ldd	r19, Y+8	; 0x08
    26d6:	26 30       	cpi	r18, 0x06	; 6
    26d8:	31 05       	cpc	r19, r1
    26da:	b9 f1       	breq	.+110    	; 0x274a <LED_u8Mapping+0xda>
    26dc:	8f 81       	ldd	r24, Y+7	; 0x07
    26de:	98 85       	ldd	r25, Y+8	; 0x08
    26e0:	86 30       	cpi	r24, 0x06	; 6
    26e2:	91 05       	cpc	r25, r1
    26e4:	54 f1       	brlt	.+84     	; 0x273a <LED_u8Mapping+0xca>
    26e6:	2f 81       	ldd	r18, Y+7	; 0x07
    26e8:	38 85       	ldd	r19, Y+8	; 0x08
    26ea:	27 30       	cpi	r18, 0x07	; 7
    26ec:	31 05       	cpc	r19, r1
    26ee:	a9 f1       	breq	.+106    	; 0x275a <LED_u8Mapping+0xea>
    26f0:	8f 81       	ldd	r24, Y+7	; 0x07
    26f2:	98 85       	ldd	r25, Y+8	; 0x08
    26f4:	88 30       	cpi	r24, 0x08	; 8
    26f6:	91 05       	cpc	r25, r1
    26f8:	c1 f1       	breq	.+112    	; 0x276a <LED_u8Mapping+0xfa>
    26fa:	3f c0       	rjmp	.+126    	; 0x277a <LED_u8Mapping+0x10a>
			case LED_e_1:
				*Copy_u8PortPtr = LED_1_PORT;
    26fc:	eb 81       	ldd	r30, Y+3	; 0x03
    26fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2700:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_1_PIN;
    2702:	ed 81       	ldd	r30, Y+5	; 0x05
    2704:	fe 81       	ldd	r31, Y+6	; 0x06
    2706:	10 82       	st	Z, r1
    2708:	39 c0       	rjmp	.+114    	; 0x277c <LED_u8Mapping+0x10c>
				break;
			case LED_e_2:
				*Copy_u8PortPtr = LED_2_PORT;
    270a:	eb 81       	ldd	r30, Y+3	; 0x03
    270c:	fc 81       	ldd	r31, Y+4	; 0x04
    270e:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_2_PIN;
    2710:	ed 81       	ldd	r30, Y+5	; 0x05
    2712:	fe 81       	ldd	r31, Y+6	; 0x06
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	80 83       	st	Z, r24
    2718:	31 c0       	rjmp	.+98     	; 0x277c <LED_u8Mapping+0x10c>
				break;
			case LED_e_3:
				*Copy_u8PortPtr = LED_3_PORT;
    271a:	eb 81       	ldd	r30, Y+3	; 0x03
    271c:	fc 81       	ldd	r31, Y+4	; 0x04
    271e:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_3_PIN;
    2720:	ed 81       	ldd	r30, Y+5	; 0x05
    2722:	fe 81       	ldd	r31, Y+6	; 0x06
    2724:	82 e0       	ldi	r24, 0x02	; 2
    2726:	80 83       	st	Z, r24
    2728:	29 c0       	rjmp	.+82     	; 0x277c <LED_u8Mapping+0x10c>
				break;
			case LED_e_4:
				*Copy_u8PortPtr = LED_4_PORT;
    272a:	eb 81       	ldd	r30, Y+3	; 0x03
    272c:	fc 81       	ldd	r31, Y+4	; 0x04
    272e:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_4_PIN;
    2730:	ed 81       	ldd	r30, Y+5	; 0x05
    2732:	fe 81       	ldd	r31, Y+6	; 0x06
    2734:	83 e0       	ldi	r24, 0x03	; 3
    2736:	80 83       	st	Z, r24
    2738:	21 c0       	rjmp	.+66     	; 0x277c <LED_u8Mapping+0x10c>
				break;
			case LED_e_5:
				*Copy_u8PortPtr = LED_5_PORT;
    273a:	eb 81       	ldd	r30, Y+3	; 0x03
    273c:	fc 81       	ldd	r31, Y+4	; 0x04
    273e:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_5_PIN;
    2740:	ed 81       	ldd	r30, Y+5	; 0x05
    2742:	fe 81       	ldd	r31, Y+6	; 0x06
    2744:	84 e0       	ldi	r24, 0x04	; 4
    2746:	80 83       	st	Z, r24
    2748:	19 c0       	rjmp	.+50     	; 0x277c <LED_u8Mapping+0x10c>
				break;
			case LED_e_6:
				*Copy_u8PortPtr = LED_6_PORT;
    274a:	eb 81       	ldd	r30, Y+3	; 0x03
    274c:	fc 81       	ldd	r31, Y+4	; 0x04
    274e:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_6_PIN;
    2750:	ed 81       	ldd	r30, Y+5	; 0x05
    2752:	fe 81       	ldd	r31, Y+6	; 0x06
    2754:	85 e0       	ldi	r24, 0x05	; 5
    2756:	80 83       	st	Z, r24
    2758:	11 c0       	rjmp	.+34     	; 0x277c <LED_u8Mapping+0x10c>
				break;
			case LED_e_7:
				*Copy_u8PortPtr = LED_7_PORT;
    275a:	eb 81       	ldd	r30, Y+3	; 0x03
    275c:	fc 81       	ldd	r31, Y+4	; 0x04
    275e:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_7_PIN;
    2760:	ed 81       	ldd	r30, Y+5	; 0x05
    2762:	fe 81       	ldd	r31, Y+6	; 0x06
    2764:	86 e0       	ldi	r24, 0x06	; 6
    2766:	80 83       	st	Z, r24
    2768:	09 c0       	rjmp	.+18     	; 0x277c <LED_u8Mapping+0x10c>
				break;
			case LED_e_8:
				*Copy_u8PortPtr = LED_8_PORT;
    276a:	eb 81       	ldd	r30, Y+3	; 0x03
    276c:	fc 81       	ldd	r31, Y+4	; 0x04
    276e:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_8_PIN;
    2770:	ed 81       	ldd	r30, Y+5	; 0x05
    2772:	fe 81       	ldd	r31, Y+6	; 0x06
    2774:	87 e0       	ldi	r24, 0x07	; 7
    2776:	80 83       	st	Z, r24
    2778:	01 c0       	rjmp	.+2      	; 0x277c <LED_u8Mapping+0x10c>
				break;
			default:
				Local_u8LedNumberStatus = 0;
    277a:	19 82       	std	Y+1, r1	; 0x01
		}
	return Local_u8LedNumberStatus;
    277c:	89 81       	ldd	r24, Y+1	; 0x01
}
    277e:	28 96       	adiw	r28, 0x08	; 8
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	cd bf       	out	0x3d, r28	; 61
    278a:	cf 91       	pop	r28
    278c:	df 91       	pop	r29
    278e:	08 95       	ret

00002790 <LED_vidInit>:
/*This function used to initialize the LEDs,
 * it takes:
 * 			1-the array address of type LED_e (this array contains the LEDs you want to initialize).
 * 			2-and the array size.
*/
void LED_vidInit(LED_e *arr_ptr, u8 Copy_u8LedsNumber){
    2790:	df 93       	push	r29
    2792:	cf 93       	push	r28
    2794:	00 d0       	rcall	.+0      	; 0x2796 <LED_vidInit+0x6>
    2796:	00 d0       	rcall	.+0      	; 0x2798 <LED_vidInit+0x8>
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
    279c:	9b 83       	std	Y+3, r25	; 0x03
    279e:	8a 83       	std	Y+2, r24	; 0x02
    27a0:	6c 83       	std	Y+4, r22	; 0x04
	for(u8 i=0; i < Copy_u8LedsNumber; i++){
    27a2:	19 82       	std	Y+1, r1	; 0x01
    27a4:	21 c0       	rjmp	.+66     	; 0x27e8 <LED_vidInit+0x58>
		LED_NUMBER_STATUS = LED_u8Mapping(arr_ptr[i], &LED_PORT, &LED_PIN);
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	28 2f       	mov	r18, r24
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	9b 81       	ldd	r25, Y+3	; 0x03
    27b0:	fc 01       	movw	r30, r24
    27b2:	e2 0f       	add	r30, r18
    27b4:	f3 1f       	adc	r31, r19
    27b6:	80 81       	ld	r24, Z
    27b8:	29 e7       	ldi	r18, 0x79	; 121
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	4a e7       	ldi	r20, 0x7A	; 122
    27be:	50 e0       	ldi	r21, 0x00	; 0
    27c0:	b9 01       	movw	r22, r18
    27c2:	0e 94 38 13 	call	0x2670	; 0x2670 <LED_u8Mapping>
    27c6:	80 93 78 00 	sts	0x0078, r24
		if(LED_NUMBER_STATUS){
    27ca:	80 91 78 00 	lds	r24, 0x0078
    27ce:	88 23       	and	r24, r24
    27d0:	41 f0       	breq	.+16     	; 0x27e2 <LED_vidInit+0x52>
			DIO_u8setPinDir(LED_PORT, LED_PIN, DIO_OUTPUT);
    27d2:	80 91 79 00 	lds	r24, 0x0079
    27d6:	90 91 7a 00 	lds	r25, 0x007A
    27da:	69 2f       	mov	r22, r25
    27dc:	41 e0       	ldi	r20, 0x01	; 1
    27de:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_u8setPinDir>
 * it takes:
 * 			1-the array address of type LED_e (this array contains the LEDs you want to initialize).
 * 			2-and the array size.
*/
void LED_vidInit(LED_e *arr_ptr, u8 Copy_u8LedsNumber){
	for(u8 i=0; i < Copy_u8LedsNumber; i++){
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	8f 5f       	subi	r24, 0xFF	; 255
    27e6:	89 83       	std	Y+1, r24	; 0x01
    27e8:	99 81       	ldd	r25, Y+1	; 0x01
    27ea:	8c 81       	ldd	r24, Y+4	; 0x04
    27ec:	98 17       	cp	r25, r24
    27ee:	d8 f2       	brcs	.-74     	; 0x27a6 <LED_vidInit+0x16>
		LED_NUMBER_STATUS = LED_u8Mapping(arr_ptr[i], &LED_PORT, &LED_PIN);
		if(LED_NUMBER_STATUS){
			DIO_u8setPinDir(LED_PORT, LED_PIN, DIO_OUTPUT);
		}
	}
}
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	cf 91       	pop	r28
    27fa:	df 91       	pop	r29
    27fc:	08 95       	ret

000027fe <LED_vidToggleLed>:

//This function used to toggle the led, it takes the led number;
void LED_vidToggleLed(u8 Copy_u8LedNumber){
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	00 d0       	rcall	.+0      	; 0x2804 <LED_vidToggleLed+0x6>
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8LedStatus;

	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
    280a:	29 e7       	ldi	r18, 0x79	; 121
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	4a e7       	ldi	r20, 0x7A	; 122
    2810:	50 e0       	ldi	r21, 0x00	; 0
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	b9 01       	movw	r22, r18
    2816:	0e 94 38 13 	call	0x2670	; 0x2670 <LED_u8Mapping>
    281a:	80 93 78 00 	sts	0x0078, r24
	if(LED_NUMBER_STATUS){
    281e:	80 91 78 00 	lds	r24, 0x0078
    2822:	88 23       	and	r24, r24
    2824:	f9 f0       	breq	.+62     	; 0x2864 <LED_vidToggleLed+0x66>
		DIO_u8getPinVal(LED_PORT, LED_PIN, &Local_u8LedStatus);
    2826:	80 91 79 00 	lds	r24, 0x0079
    282a:	90 91 7a 00 	lds	r25, 0x007A
    282e:	69 2f       	mov	r22, r25
    2830:	9e 01       	movw	r18, r28
    2832:	2f 5f       	subi	r18, 0xFF	; 255
    2834:	3f 4f       	sbci	r19, 0xFF	; 255
    2836:	a9 01       	movw	r20, r18
    2838:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8getPinVal>
		if(Local_u8LedStatus){
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	88 23       	and	r24, r24
    2840:	49 f0       	breq	.+18     	; 0x2854 <LED_vidToggleLed+0x56>
			DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_LOW);
    2842:	80 91 79 00 	lds	r24, 0x0079
    2846:	90 91 7a 00 	lds	r25, 0x007A
    284a:	69 2f       	mov	r22, r25
    284c:	40 e0       	ldi	r20, 0x00	; 0
    284e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
    2852:	08 c0       	rjmp	.+16     	; 0x2864 <LED_vidToggleLed+0x66>
		}else{
			DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_HIGH);
    2854:	80 91 79 00 	lds	r24, 0x0079
    2858:	90 91 7a 00 	lds	r25, 0x007A
    285c:	69 2f       	mov	r22, r25
    285e:	41 e0       	ldi	r20, 0x01	; 1
    2860:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
		}
	}

}
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	08 95       	ret

0000286e <LED_vidTurnOnLed>:

//This function used to turn on the led, it takes the led number;
void LED_vidTurnOnLed(u8 Copy_u8LedNumber){
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	0f 92       	push	r0
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	89 83       	std	Y+1, r24	; 0x01
#if LEDS_Configuration == COMMON_CATHODE
	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
    287a:	29 e7       	ldi	r18, 0x79	; 121
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	4a e7       	ldi	r20, 0x7A	; 122
    2880:	50 e0       	ldi	r21, 0x00	; 0
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	b9 01       	movw	r22, r18
    2886:	0e 94 38 13 	call	0x2670	; 0x2670 <LED_u8Mapping>
    288a:	80 93 78 00 	sts	0x0078, r24
	if(LED_NUMBER_STATUS){
    288e:	80 91 78 00 	lds	r24, 0x0078
    2892:	88 23       	and	r24, r24
    2894:	41 f0       	breq	.+16     	; 0x28a6 <LED_vidTurnOnLed+0x38>
		DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_HIGH);
    2896:	80 91 79 00 	lds	r24, 0x0079
    289a:	90 91 7a 00 	lds	r25, 0x007A
    289e:	69 2f       	mov	r22, r25
    28a0:	41 e0       	ldi	r20, 0x01	; 1
    28a2:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
	if(LED_NUMBER_STATUS){
		DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_LOW);
	}
#endif
}
    28a6:	0f 90       	pop	r0
    28a8:	cf 91       	pop	r28
    28aa:	df 91       	pop	r29
    28ac:	08 95       	ret

000028ae <LED_vidTurnOffLed>:


//This function used to turn off the led, it takes the led number;
void LED_vidTurnOffLed(u8 Copy_u8LedNumber){
    28ae:	df 93       	push	r29
    28b0:	cf 93       	push	r28
    28b2:	0f 92       	push	r0
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
    28b8:	89 83       	std	Y+1, r24	; 0x01
#if LEDS_Configuration == COMMON_CATHODE
	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
    28ba:	29 e7       	ldi	r18, 0x79	; 121
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	4a e7       	ldi	r20, 0x7A	; 122
    28c0:	50 e0       	ldi	r21, 0x00	; 0
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	b9 01       	movw	r22, r18
    28c6:	0e 94 38 13 	call	0x2670	; 0x2670 <LED_u8Mapping>
    28ca:	80 93 78 00 	sts	0x0078, r24
	if(LED_NUMBER_STATUS){
    28ce:	80 91 78 00 	lds	r24, 0x0078
    28d2:	88 23       	and	r24, r24
    28d4:	41 f0       	breq	.+16     	; 0x28e6 <LED_vidTurnOffLed+0x38>
		DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_LOW);
    28d6:	80 91 79 00 	lds	r24, 0x0079
    28da:	90 91 7a 00 	lds	r25, 0x007A
    28de:	69 2f       	mov	r22, r25
    28e0:	40 e0       	ldi	r20, 0x00	; 0
    28e2:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
	if(LED_NUMBER_STATUS){
		DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_HIGH);
	}
#endif
}
    28e6:	0f 90       	pop	r0
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	08 95       	ret

000028ee <LCD_vidInit>:
#include "../LCD_Handler_V2/LCD_cmds.h"
#include "../LCD_Handler_V2/LCD_err.h"
#include "../LCD_Handler_V2/LCD_int.h"

//function to initialize the LCD
void LCD_vidInit(void){
    28ee:	0f 93       	push	r16
    28f0:	1f 93       	push	r17
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	cf 54       	subi	r28, 0x4F	; 79
    28fc:	d0 40       	sbci	r29, 0x00	; 0
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	f8 94       	cli
    2902:	de bf       	out	0x3e, r29	; 62
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8SetFunction = SET_FUNCTION_CMD;
    2908:	fe 01       	movw	r30, r28
    290a:	e1 5b       	subi	r30, 0xB1	; 177
    290c:	ff 4f       	sbci	r31, 0xFF	; 255
    290e:	80 e2       	ldi	r24, 0x20	; 32
    2910:	80 83       	st	Z, r24
	u8 local_u8DisplayControl = DISPLAY_CONTROL;
    2912:	fe 01       	movw	r30, r28
    2914:	e2 5b       	subi	r30, 0xB2	; 178
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	88 e0       	ldi	r24, 0x08	; 8
    291a:	80 83       	st	Z, r24
	u8 local_u8EntryModeSet = ENTRY_MODE_SET;
    291c:	fe 01       	movw	r30, r28
    291e:	e3 5b       	subi	r30, 0xB3	; 179
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	84 e0       	ldi	r24, 0x04	; 4
    2924:	80 83       	st	Z, r24

	local_u8SetFunction 	|= ((LCD_MODE<<4) | (NO_OF_LINES<<3));
    2926:	de 01       	movw	r26, r28
    2928:	a1 5b       	subi	r26, 0xB1	; 177
    292a:	bf 4f       	sbci	r27, 0xFF	; 255
    292c:	fe 01       	movw	r30, r28
    292e:	e1 5b       	subi	r30, 0xB1	; 177
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	80 81       	ld	r24, Z
    2934:	88 61       	ori	r24, 0x18	; 24
    2936:	8c 93       	st	X, r24
	local_u8DisplayControl 	|= ((DISPLAY_STATE <<2) | (CURSOR_STATE <<1) | CURSOR_BLINKING);
    2938:	de 01       	movw	r26, r28
    293a:	a2 5b       	subi	r26, 0xB2	; 178
    293c:	bf 4f       	sbci	r27, 0xFF	; 255
    293e:	fe 01       	movw	r30, r28
    2940:	e2 5b       	subi	r30, 0xB2	; 178
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	80 81       	ld	r24, Z
    2946:	86 60       	ori	r24, 0x06	; 6
    2948:	8c 93       	st	X, r24
	local_u8EntryModeSet   	|= ((CURSOR_MOVE_DIRECTION<<1) | (DISPLAY_SHIFT_OPERATION));
    294a:	de 01       	movw	r26, r28
    294c:	a3 5b       	subi	r26, 0xB3	; 179
    294e:	bf 4f       	sbci	r27, 0xFF	; 255
    2950:	fe 01       	movw	r30, r28
    2952:	e3 5b       	subi	r30, 0xB3	; 179
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 81       	ld	r24, Z
    2958:	82 60       	ori	r24, 0x02	; 2
    295a:	8c 93       	st	X, r24

	DIO_u8setPortDir(LCD_DATA_PORT, DIO_FULL_OUTPUT);
    295c:	82 e0       	ldi	r24, 0x02	; 2
    295e:	6f ef       	ldi	r22, 0xFF	; 255
    2960:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <DIO_u8setPortDir>
	DIO_u8setPinDir(RS_PORT, RS_PIN, DIO_OUTPUT);
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	62 e0       	ldi	r22, 0x02	; 2
    2968:	41 e0       	ldi	r20, 0x01	; 1
    296a:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_u8setPinDir>
	DIO_u8setPinDir(RW_PORT, RW_PIN, DIO_OUTPUT);
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	61 e0       	ldi	r22, 0x01	; 1
    2972:	41 e0       	ldi	r20, 0x01	; 1
    2974:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_u8setPinDir>
	DIO_u8setPinDir(E_PORT, E_PIN, DIO_OUTPUT);
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	60 e0       	ldi	r22, 0x00	; 0
    297c:	41 e0       	ldi	r20, 0x01	; 1
    297e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_u8setPinDir>
    2982:	fe 01       	movw	r30, r28
    2984:	e7 5b       	subi	r30, 0xB7	; 183
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	a0 e2       	ldi	r26, 0x20	; 32
    298e:	b2 e4       	ldi	r27, 0x42	; 66
    2990:	80 83       	st	Z, r24
    2992:	91 83       	std	Z+1, r25	; 0x01
    2994:	a2 83       	std	Z+2, r26	; 0x02
    2996:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2998:	8e 01       	movw	r16, r28
    299a:	0b 5b       	subi	r16, 0xBB	; 187
    299c:	1f 4f       	sbci	r17, 0xFF	; 255
    299e:	fe 01       	movw	r30, r28
    29a0:	e7 5b       	subi	r30, 0xB7	; 183
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	60 81       	ld	r22, Z
    29a6:	71 81       	ldd	r23, Z+1	; 0x01
    29a8:	82 81       	ldd	r24, Z+2	; 0x02
    29aa:	93 81       	ldd	r25, Z+3	; 0x03
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	4a ef       	ldi	r20, 0xFA	; 250
    29b2:	54 e4       	ldi	r21, 0x44	; 68
    29b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	f8 01       	movw	r30, r16
    29be:	80 83       	st	Z, r24
    29c0:	91 83       	std	Z+1, r25	; 0x01
    29c2:	a2 83       	std	Z+2, r26	; 0x02
    29c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29c6:	fe 01       	movw	r30, r28
    29c8:	eb 5b       	subi	r30, 0xBB	; 187
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	60 81       	ld	r22, Z
    29ce:	71 81       	ldd	r23, Z+1	; 0x01
    29d0:	82 81       	ldd	r24, Z+2	; 0x02
    29d2:	93 81       	ldd	r25, Z+3	; 0x03
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e8       	ldi	r20, 0x80	; 128
    29da:	5f e3       	ldi	r21, 0x3F	; 63
    29dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29e0:	88 23       	and	r24, r24
    29e2:	44 f4       	brge	.+16     	; 0x29f4 <LCD_vidInit+0x106>
		__ticks = 1;
    29e4:	fe 01       	movw	r30, r28
    29e6:	ed 5b       	subi	r30, 0xBD	; 189
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	80 83       	st	Z, r24
    29f2:	64 c0       	rjmp	.+200    	; 0x2abc <LCD_vidInit+0x1ce>
	else if (__tmp > 65535)
    29f4:	fe 01       	movw	r30, r28
    29f6:	eb 5b       	subi	r30, 0xBB	; 187
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	60 81       	ld	r22, Z
    29fc:	71 81       	ldd	r23, Z+1	; 0x01
    29fe:	82 81       	ldd	r24, Z+2	; 0x02
    2a00:	93 81       	ldd	r25, Z+3	; 0x03
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	3f ef       	ldi	r19, 0xFF	; 255
    2a06:	4f e7       	ldi	r20, 0x7F	; 127
    2a08:	57 e4       	ldi	r21, 0x47	; 71
    2a0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a0e:	18 16       	cp	r1, r24
    2a10:	0c f0       	brlt	.+2      	; 0x2a14 <LCD_vidInit+0x126>
    2a12:	43 c0       	rjmp	.+134    	; 0x2a9a <LCD_vidInit+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a14:	fe 01       	movw	r30, r28
    2a16:	e7 5b       	subi	r30, 0xB7	; 183
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	60 81       	ld	r22, Z
    2a1c:	71 81       	ldd	r23, Z+1	; 0x01
    2a1e:	82 81       	ldd	r24, Z+2	; 0x02
    2a20:	93 81       	ldd	r25, Z+3	; 0x03
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e2       	ldi	r20, 0x20	; 32
    2a28:	51 e4       	ldi	r21, 0x41	; 65
    2a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	8e 01       	movw	r16, r28
    2a34:	0d 5b       	subi	r16, 0xBD	; 189
    2a36:	1f 4f       	sbci	r17, 0xFF	; 255
    2a38:	bc 01       	movw	r22, r24
    2a3a:	cd 01       	movw	r24, r26
    2a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	f8 01       	movw	r30, r16
    2a46:	91 83       	std	Z+1, r25	; 0x01
    2a48:	80 83       	st	Z, r24
    2a4a:	1f c0       	rjmp	.+62     	; 0x2a8a <LCD_vidInit+0x19c>
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	ef 5b       	subi	r30, 0xBF	; 191
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	88 ec       	ldi	r24, 0xC8	; 200
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	91 83       	std	Z+1, r25	; 0x01
    2a58:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	ef 5b       	subi	r30, 0xBF	; 191
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	80 81       	ld	r24, Z
    2a62:	91 81       	ldd	r25, Z+1	; 0x01
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	f1 f7       	brne	.-4      	; 0x2a64 <LCD_vidInit+0x176>
    2a68:	fe 01       	movw	r30, r28
    2a6a:	ef 5b       	subi	r30, 0xBF	; 191
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	91 83       	std	Z+1, r25	; 0x01
    2a70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a72:	de 01       	movw	r26, r28
    2a74:	ad 5b       	subi	r26, 0xBD	; 189
    2a76:	bf 4f       	sbci	r27, 0xFF	; 255
    2a78:	fe 01       	movw	r30, r28
    2a7a:	ed 5b       	subi	r30, 0xBD	; 189
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	80 81       	ld	r24, Z
    2a80:	91 81       	ldd	r25, Z+1	; 0x01
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	11 96       	adiw	r26, 0x01	; 1
    2a86:	9c 93       	st	X, r25
    2a88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	ed 5b       	subi	r30, 0xBD	; 189
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	80 81       	ld	r24, Z
    2a92:	91 81       	ldd	r25, Z+1	; 0x01
    2a94:	00 97       	sbiw	r24, 0x00	; 0
    2a96:	d1 f6       	brne	.-76     	; 0x2a4c <LCD_vidInit+0x15e>
    2a98:	24 c0       	rjmp	.+72     	; 0x2ae2 <LCD_vidInit+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9a:	8e 01       	movw	r16, r28
    2a9c:	0d 5b       	subi	r16, 0xBD	; 189
    2a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	eb 5b       	subi	r30, 0xBB	; 187
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	f8 01       	movw	r30, r16
    2ab8:	91 83       	std	Z+1, r25	; 0x01
    2aba:	80 83       	st	Z, r24
    2abc:	fe 01       	movw	r30, r28
    2abe:	ed 5b       	subi	r30, 0xBD	; 189
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	80 81       	ld	r24, Z
    2ac4:	91 81       	ldd	r25, Z+1	; 0x01
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	ff 96       	adiw	r30, 0x3f	; 63
    2aca:	91 83       	std	Z+1, r25	; 0x01
    2acc:	80 83       	st	Z, r24
    2ace:	fe 01       	movw	r30, r28
    2ad0:	ff 96       	adiw	r30, 0x3f	; 63
    2ad2:	80 81       	ld	r24, Z
    2ad4:	91 81       	ldd	r25, Z+1	; 0x01
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <LCD_vidInit+0x1e8>
    2ada:	fe 01       	movw	r30, r28
    2adc:	ff 96       	adiw	r30, 0x3f	; 63
    2ade:	91 83       	std	Z+1, r25	; 0x01
    2ae0:	80 83       	st	Z, r24


#if  LCD_MODE == EIGHT_BITS
	_delay_ms(40);
	LCD_vidSendCmd(local_u8SetFunction);
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	e1 5b       	subi	r30, 0xB1	; 177
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	80 81       	ld	r24, Z
    2aea:	0e 94 80 17 	call	0x2f00	; 0x2f00 <LCD_vidSendCmd>
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	a8 e4       	ldi	r26, 0x48	; 72
    2af4:	b2 e4       	ldi	r27, 0x42	; 66
    2af6:	8b af       	std	Y+59, r24	; 0x3b
    2af8:	9c af       	std	Y+60, r25	; 0x3c
    2afa:	ad af       	std	Y+61, r26	; 0x3d
    2afc:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2afe:	6b ad       	ldd	r22, Y+59	; 0x3b
    2b00:	7c ad       	ldd	r23, Y+60	; 0x3c
    2b02:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b04:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b06:	2b ea       	ldi	r18, 0xAB	; 171
    2b08:	3a ea       	ldi	r19, 0xAA	; 170
    2b0a:	4a e2       	ldi	r20, 0x2A	; 42
    2b0c:	50 e4       	ldi	r21, 0x40	; 64
    2b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	8f ab       	std	Y+55, r24	; 0x37
    2b18:	98 af       	std	Y+56, r25	; 0x38
    2b1a:	a9 af       	std	Y+57, r26	; 0x39
    2b1c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2b1e:	6f a9       	ldd	r22, Y+55	; 0x37
    2b20:	78 ad       	ldd	r23, Y+56	; 0x38
    2b22:	89 ad       	ldd	r24, Y+57	; 0x39
    2b24:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e8       	ldi	r20, 0x80	; 128
    2b2c:	5f e3       	ldi	r21, 0x3F	; 63
    2b2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b32:	88 23       	and	r24, r24
    2b34:	1c f4       	brge	.+6      	; 0x2b3c <LCD_vidInit+0x24e>
		__ticks = 1;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	8e ab       	std	Y+54, r24	; 0x36
    2b3a:	91 c0       	rjmp	.+290    	; 0x2c5e <LCD_vidInit+0x370>
	else if (__tmp > 255)
    2b3c:	6f a9       	ldd	r22, Y+55	; 0x37
    2b3e:	78 ad       	ldd	r23, Y+56	; 0x38
    2b40:	89 ad       	ldd	r24, Y+57	; 0x39
    2b42:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	4f e7       	ldi	r20, 0x7F	; 127
    2b4a:	53 e4       	ldi	r21, 0x43	; 67
    2b4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b50:	18 16       	cp	r1, r24
    2b52:	0c f0       	brlt	.+2      	; 0x2b56 <LCD_vidInit+0x268>
    2b54:	7b c0       	rjmp	.+246    	; 0x2c4c <LCD_vidInit+0x35e>
	{
		_delay_ms(__us / 1000.0);
    2b56:	6b ad       	ldd	r22, Y+59	; 0x3b
    2b58:	7c ad       	ldd	r23, Y+60	; 0x3c
    2b5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	4a e7       	ldi	r20, 0x7A	; 122
    2b64:	54 e4       	ldi	r21, 0x44	; 68
    2b66:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	8a ab       	std	Y+50, r24	; 0x32
    2b70:	9b ab       	std	Y+51, r25	; 0x33
    2b72:	ac ab       	std	Y+52, r26	; 0x34
    2b74:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b76:	6a a9       	ldd	r22, Y+50	; 0x32
    2b78:	7b a9       	ldd	r23, Y+51	; 0x33
    2b7a:	8c a9       	ldd	r24, Y+52	; 0x34
    2b7c:	9d a9       	ldd	r25, Y+53	; 0x35
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	4a ef       	ldi	r20, 0xFA	; 250
    2b84:	54 e4       	ldi	r21, 0x44	; 68
    2b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	8e a7       	std	Y+46, r24	; 0x2e
    2b90:	9f a7       	std	Y+47, r25	; 0x2f
    2b92:	a8 ab       	std	Y+48, r26	; 0x30
    2b94:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2b96:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b98:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b9a:	88 a9       	ldd	r24, Y+48	; 0x30
    2b9c:	99 a9       	ldd	r25, Y+49	; 0x31
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e8       	ldi	r20, 0x80	; 128
    2ba4:	5f e3       	ldi	r21, 0x3F	; 63
    2ba6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2baa:	88 23       	and	r24, r24
    2bac:	2c f4       	brge	.+10     	; 0x2bb8 <LCD_vidInit+0x2ca>
		__ticks = 1;
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	9d a7       	std	Y+45, r25	; 0x2d
    2bb4:	8c a7       	std	Y+44, r24	; 0x2c
    2bb6:	3f c0       	rjmp	.+126    	; 0x2c36 <LCD_vidInit+0x348>
	else if (__tmp > 65535)
    2bb8:	6e a5       	ldd	r22, Y+46	; 0x2e
    2bba:	7f a5       	ldd	r23, Y+47	; 0x2f
    2bbc:	88 a9       	ldd	r24, Y+48	; 0x30
    2bbe:	99 a9       	ldd	r25, Y+49	; 0x31
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	3f ef       	ldi	r19, 0xFF	; 255
    2bc4:	4f e7       	ldi	r20, 0x7F	; 127
    2bc6:	57 e4       	ldi	r21, 0x47	; 71
    2bc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bcc:	18 16       	cp	r1, r24
    2bce:	4c f5       	brge	.+82     	; 0x2c22 <LCD_vidInit+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd0:	6a a9       	ldd	r22, Y+50	; 0x32
    2bd2:	7b a9       	ldd	r23, Y+51	; 0x33
    2bd4:	8c a9       	ldd	r24, Y+52	; 0x34
    2bd6:	9d a9       	ldd	r25, Y+53	; 0x35
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	40 e2       	ldi	r20, 0x20	; 32
    2bde:	51 e4       	ldi	r21, 0x41	; 65
    2be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	bc 01       	movw	r22, r24
    2bea:	cd 01       	movw	r24, r26
    2bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	9d a7       	std	Y+45, r25	; 0x2d
    2bf6:	8c a7       	std	Y+44, r24	; 0x2c
    2bf8:	0f c0       	rjmp	.+30     	; 0x2c18 <LCD_vidInit+0x32a>
    2bfa:	88 ec       	ldi	r24, 0xC8	; 200
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	9b a7       	std	Y+43, r25	; 0x2b
    2c00:	8a a7       	std	Y+42, r24	; 0x2a
    2c02:	8a a5       	ldd	r24, Y+42	; 0x2a
    2c04:	9b a5       	ldd	r25, Y+43	; 0x2b
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	f1 f7       	brne	.-4      	; 0x2c06 <LCD_vidInit+0x318>
    2c0a:	9b a7       	std	Y+43, r25	; 0x2b
    2c0c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c0e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c10:	9d a5       	ldd	r25, Y+45	; 0x2d
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	9d a7       	std	Y+45, r25	; 0x2d
    2c16:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c18:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c1a:	9d a5       	ldd	r25, Y+45	; 0x2d
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	69 f7       	brne	.-38     	; 0x2bfa <LCD_vidInit+0x30c>
    2c20:	24 c0       	rjmp	.+72     	; 0x2c6a <LCD_vidInit+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c22:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c24:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c26:	88 a9       	ldd	r24, Y+48	; 0x30
    2c28:	99 a9       	ldd	r25, Y+49	; 0x31
    2c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	9d a7       	std	Y+45, r25	; 0x2d
    2c34:	8c a7       	std	Y+44, r24	; 0x2c
    2c36:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c38:	9d a5       	ldd	r25, Y+45	; 0x2d
    2c3a:	99 a7       	std	Y+41, r25	; 0x29
    2c3c:	88 a7       	std	Y+40, r24	; 0x28
    2c3e:	88 a5       	ldd	r24, Y+40	; 0x28
    2c40:	99 a5       	ldd	r25, Y+41	; 0x29
    2c42:	01 97       	sbiw	r24, 0x01	; 1
    2c44:	f1 f7       	brne	.-4      	; 0x2c42 <LCD_vidInit+0x354>
    2c46:	99 a7       	std	Y+41, r25	; 0x29
    2c48:	88 a7       	std	Y+40, r24	; 0x28
    2c4a:	0f c0       	rjmp	.+30     	; 0x2c6a <LCD_vidInit+0x37c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c4c:	6f a9       	ldd	r22, Y+55	; 0x37
    2c4e:	78 ad       	ldd	r23, Y+56	; 0x38
    2c50:	89 ad       	ldd	r24, Y+57	; 0x39
    2c52:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	8e ab       	std	Y+54, r24	; 0x36
    2c5e:	8e a9       	ldd	r24, Y+54	; 0x36
    2c60:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c62:	8f a1       	ldd	r24, Y+39	; 0x27
    2c64:	8a 95       	dec	r24
    2c66:	f1 f7       	brne	.-4      	; 0x2c64 <LCD_vidInit+0x376>
    2c68:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	LCD_vidSendCmd(local_u8DisplayControl);
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	e2 5b       	subi	r30, 0xB2	; 178
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	80 81       	ld	r24, Z
    2c72:	0e 94 80 17 	call	0x2f00	; 0x2f00 <LCD_vidSendCmd>
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	a8 e4       	ldi	r26, 0x48	; 72
    2c7c:	b2 e4       	ldi	r27, 0x42	; 66
    2c7e:	8b a3       	std	Y+35, r24	; 0x23
    2c80:	9c a3       	std	Y+36, r25	; 0x24
    2c82:	ad a3       	std	Y+37, r26	; 0x25
    2c84:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c86:	6b a1       	ldd	r22, Y+35	; 0x23
    2c88:	7c a1       	ldd	r23, Y+36	; 0x24
    2c8a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c8c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c8e:	2b ea       	ldi	r18, 0xAB	; 171
    2c90:	3a ea       	ldi	r19, 0xAA	; 170
    2c92:	4a e2       	ldi	r20, 0x2A	; 42
    2c94:	50 e4       	ldi	r21, 0x40	; 64
    2c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	8f 8f       	std	Y+31, r24	; 0x1f
    2ca0:	98 a3       	std	Y+32, r25	; 0x20
    2ca2:	a9 a3       	std	Y+33, r26	; 0x21
    2ca4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2ca6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ca8:	78 a1       	ldd	r23, Y+32	; 0x20
    2caa:	89 a1       	ldd	r24, Y+33	; 0x21
    2cac:	9a a1       	ldd	r25, Y+34	; 0x22
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 e8       	ldi	r20, 0x80	; 128
    2cb4:	5f e3       	ldi	r21, 0x3F	; 63
    2cb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cba:	88 23       	and	r24, r24
    2cbc:	1c f4       	brge	.+6      	; 0x2cc4 <LCD_vidInit+0x3d6>
		__ticks = 1;
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	8e 8f       	std	Y+30, r24	; 0x1e
    2cc2:	91 c0       	rjmp	.+290    	; 0x2de6 <LCD_vidInit+0x4f8>
	else if (__tmp > 255)
    2cc4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2cc6:	78 a1       	ldd	r23, Y+32	; 0x20
    2cc8:	89 a1       	ldd	r24, Y+33	; 0x21
    2cca:	9a a1       	ldd	r25, Y+34	; 0x22
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	4f e7       	ldi	r20, 0x7F	; 127
    2cd2:	53 e4       	ldi	r21, 0x43	; 67
    2cd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cd8:	18 16       	cp	r1, r24
    2cda:	0c f0       	brlt	.+2      	; 0x2cde <LCD_vidInit+0x3f0>
    2cdc:	7b c0       	rjmp	.+246    	; 0x2dd4 <LCD_vidInit+0x4e6>
	{
		_delay_ms(__us / 1000.0);
    2cde:	6b a1       	ldd	r22, Y+35	; 0x23
    2ce0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ce2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ce4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	4a e7       	ldi	r20, 0x7A	; 122
    2cec:	54 e4       	ldi	r21, 0x44	; 68
    2cee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	8a 8f       	std	Y+26, r24	; 0x1a
    2cf8:	9b 8f       	std	Y+27, r25	; 0x1b
    2cfa:	ac 8f       	std	Y+28, r26	; 0x1c
    2cfc:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfe:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2d00:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2d02:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d04:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	4a ef       	ldi	r20, 0xFA	; 250
    2d0c:	54 e4       	ldi	r21, 0x44	; 68
    2d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	8e 8b       	std	Y+22, r24	; 0x16
    2d18:	9f 8b       	std	Y+23, r25	; 0x17
    2d1a:	a8 8f       	std	Y+24, r26	; 0x18
    2d1c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2d1e:	6e 89       	ldd	r22, Y+22	; 0x16
    2d20:	7f 89       	ldd	r23, Y+23	; 0x17
    2d22:	88 8d       	ldd	r24, Y+24	; 0x18
    2d24:	99 8d       	ldd	r25, Y+25	; 0x19
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e8       	ldi	r20, 0x80	; 128
    2d2c:	5f e3       	ldi	r21, 0x3F	; 63
    2d2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d32:	88 23       	and	r24, r24
    2d34:	2c f4       	brge	.+10     	; 0x2d40 <LCD_vidInit+0x452>
		__ticks = 1;
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	9d 8b       	std	Y+21, r25	; 0x15
    2d3c:	8c 8b       	std	Y+20, r24	; 0x14
    2d3e:	3f c0       	rjmp	.+126    	; 0x2dbe <LCD_vidInit+0x4d0>
	else if (__tmp > 65535)
    2d40:	6e 89       	ldd	r22, Y+22	; 0x16
    2d42:	7f 89       	ldd	r23, Y+23	; 0x17
    2d44:	88 8d       	ldd	r24, Y+24	; 0x18
    2d46:	99 8d       	ldd	r25, Y+25	; 0x19
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	3f ef       	ldi	r19, 0xFF	; 255
    2d4c:	4f e7       	ldi	r20, 0x7F	; 127
    2d4e:	57 e4       	ldi	r21, 0x47	; 71
    2d50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d54:	18 16       	cp	r1, r24
    2d56:	4c f5       	brge	.+82     	; 0x2daa <LCD_vidInit+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d58:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2d5a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2d5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d5e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e2       	ldi	r20, 0x20	; 32
    2d66:	51 e4       	ldi	r21, 0x41	; 65
    2d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	bc 01       	movw	r22, r24
    2d72:	cd 01       	movw	r24, r26
    2d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	9d 8b       	std	Y+21, r25	; 0x15
    2d7e:	8c 8b       	std	Y+20, r24	; 0x14
    2d80:	0f c0       	rjmp	.+30     	; 0x2da0 <LCD_vidInit+0x4b2>
    2d82:	88 ec       	ldi	r24, 0xC8	; 200
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	9b 8b       	std	Y+19, r25	; 0x13
    2d88:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d8a:	8a 89       	ldd	r24, Y+18	; 0x12
    2d8c:	9b 89       	ldd	r25, Y+19	; 0x13
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	f1 f7       	brne	.-4      	; 0x2d8e <LCD_vidInit+0x4a0>
    2d92:	9b 8b       	std	Y+19, r25	; 0x13
    2d94:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d96:	8c 89       	ldd	r24, Y+20	; 0x14
    2d98:	9d 89       	ldd	r25, Y+21	; 0x15
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	9d 8b       	std	Y+21, r25	; 0x15
    2d9e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da0:	8c 89       	ldd	r24, Y+20	; 0x14
    2da2:	9d 89       	ldd	r25, Y+21	; 0x15
    2da4:	00 97       	sbiw	r24, 0x00	; 0
    2da6:	69 f7       	brne	.-38     	; 0x2d82 <LCD_vidInit+0x494>
    2da8:	24 c0       	rjmp	.+72     	; 0x2df2 <LCD_vidInit+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2daa:	6e 89       	ldd	r22, Y+22	; 0x16
    2dac:	7f 89       	ldd	r23, Y+23	; 0x17
    2dae:	88 8d       	ldd	r24, Y+24	; 0x18
    2db0:	99 8d       	ldd	r25, Y+25	; 0x19
    2db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	9d 8b       	std	Y+21, r25	; 0x15
    2dbc:	8c 8b       	std	Y+20, r24	; 0x14
    2dbe:	8c 89       	ldd	r24, Y+20	; 0x14
    2dc0:	9d 89       	ldd	r25, Y+21	; 0x15
    2dc2:	99 8b       	std	Y+17, r25	; 0x11
    2dc4:	88 8b       	std	Y+16, r24	; 0x10
    2dc6:	88 89       	ldd	r24, Y+16	; 0x10
    2dc8:	99 89       	ldd	r25, Y+17	; 0x11
    2dca:	01 97       	sbiw	r24, 0x01	; 1
    2dcc:	f1 f7       	brne	.-4      	; 0x2dca <LCD_vidInit+0x4dc>
    2dce:	99 8b       	std	Y+17, r25	; 0x11
    2dd0:	88 8b       	std	Y+16, r24	; 0x10
    2dd2:	0f c0       	rjmp	.+30     	; 0x2df2 <LCD_vidInit+0x504>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2dd4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2dd6:	78 a1       	ldd	r23, Y+32	; 0x20
    2dd8:	89 a1       	ldd	r24, Y+33	; 0x21
    2dda:	9a a1       	ldd	r25, Y+34	; 0x22
    2ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	8e 8f       	std	Y+30, r24	; 0x1e
    2de6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2de8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dea:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dec:	8a 95       	dec	r24
    2dee:	f1 f7       	brne	.-4      	; 0x2dec <LCD_vidInit+0x4fe>
    2df0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_vidSendCmd(DISPLAY_CLEAR);
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	0e 94 80 17 	call	0x2f00	; 0x2f00 <LCD_vidSendCmd>
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	a0 e0       	ldi	r26, 0x00	; 0
    2dfe:	b0 e4       	ldi	r27, 0x40	; 64
    2e00:	8b 87       	std	Y+11, r24	; 0x0b
    2e02:	9c 87       	std	Y+12, r25	; 0x0c
    2e04:	ad 87       	std	Y+13, r26	; 0x0d
    2e06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	4a ef       	ldi	r20, 0xFA	; 250
    2e16:	54 e4       	ldi	r21, 0x44	; 68
    2e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	8f 83       	std	Y+7, r24	; 0x07
    2e22:	98 87       	std	Y+8, r25	; 0x08
    2e24:	a9 87       	std	Y+9, r26	; 0x09
    2e26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e28:	6f 81       	ldd	r22, Y+7	; 0x07
    2e2a:	78 85       	ldd	r23, Y+8	; 0x08
    2e2c:	89 85       	ldd	r24, Y+9	; 0x09
    2e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	40 e8       	ldi	r20, 0x80	; 128
    2e36:	5f e3       	ldi	r21, 0x3F	; 63
    2e38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e3c:	88 23       	and	r24, r24
    2e3e:	2c f4       	brge	.+10     	; 0x2e4a <LCD_vidInit+0x55c>
		__ticks = 1;
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	9e 83       	std	Y+6, r25	; 0x06
    2e46:	8d 83       	std	Y+5, r24	; 0x05
    2e48:	3f c0       	rjmp	.+126    	; 0x2ec8 <LCD_vidInit+0x5da>
	else if (__tmp > 65535)
    2e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e4c:	78 85       	ldd	r23, Y+8	; 0x08
    2e4e:	89 85       	ldd	r24, Y+9	; 0x09
    2e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	3f ef       	ldi	r19, 0xFF	; 255
    2e56:	4f e7       	ldi	r20, 0x7F	; 127
    2e58:	57 e4       	ldi	r21, 0x47	; 71
    2e5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e5e:	18 16       	cp	r1, r24
    2e60:	4c f5       	brge	.+82     	; 0x2eb4 <LCD_vidInit+0x5c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	40 e2       	ldi	r20, 0x20	; 32
    2e70:	51 e4       	ldi	r21, 0x41	; 65
    2e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	bc 01       	movw	r22, r24
    2e7c:	cd 01       	movw	r24, r26
    2e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	9e 83       	std	Y+6, r25	; 0x06
    2e88:	8d 83       	std	Y+5, r24	; 0x05
    2e8a:	0f c0       	rjmp	.+30     	; 0x2eaa <LCD_vidInit+0x5bc>
    2e8c:	88 ec       	ldi	r24, 0xC8	; 200
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	9c 83       	std	Y+4, r25	; 0x04
    2e92:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e94:	8b 81       	ldd	r24, Y+3	; 0x03
    2e96:	9c 81       	ldd	r25, Y+4	; 0x04
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	f1 f7       	brne	.-4      	; 0x2e98 <LCD_vidInit+0x5aa>
    2e9c:	9c 83       	std	Y+4, r25	; 0x04
    2e9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	9e 83       	std	Y+6, r25	; 0x06
    2ea8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2eac:	9e 81       	ldd	r25, Y+6	; 0x06
    2eae:	00 97       	sbiw	r24, 0x00	; 0
    2eb0:	69 f7       	brne	.-38     	; 0x2e8c <LCD_vidInit+0x59e>
    2eb2:	14 c0       	rjmp	.+40     	; 0x2edc <LCD_vidInit+0x5ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb6:	78 85       	ldd	r23, Y+8	; 0x08
    2eb8:	89 85       	ldd	r24, Y+9	; 0x09
    2eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	9e 83       	std	Y+6, r25	; 0x06
    2ec6:	8d 83       	std	Y+5, r24	; 0x05
    2ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eca:	9e 81       	ldd	r25, Y+6	; 0x06
    2ecc:	9a 83       	std	Y+2, r25	; 0x02
    2ece:	89 83       	std	Y+1, r24	; 0x01
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	f1 f7       	brne	.-4      	; 0x2ed4 <LCD_vidInit+0x5e6>
    2ed8:	9a 83       	std	Y+2, r25	; 0x02
    2eda:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_vidSendCmd(local_u8EntryModeSet);
    2edc:	fe 01       	movw	r30, r28
    2ede:	e3 5b       	subi	r30, 0xB3	; 179
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	80 81       	ld	r24, Z
    2ee4:	0e 94 80 17 	call	0x2f00	; 0x2f00 <LCD_vidSendCmd>

#elif LCD_MODE == FOUR_BITS
#else
#error "Wrong Configuration !"
#endif
}
    2ee8:	c1 5b       	subi	r28, 0xB1	; 177
    2eea:	df 4f       	sbci	r29, 0xFF	; 255
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	cf 91       	pop	r28
    2ef8:	df 91       	pop	r29
    2efa:	1f 91       	pop	r17
    2efc:	0f 91       	pop	r16
    2efe:	08 95       	ret

00002f00 <LCD_vidSendCmd>:

//function to send command
void LCD_vidSendCmd(u8 Copy_u8Cmd){
    2f00:	df 93       	push	r29
    2f02:	cf 93       	push	r28
    2f04:	cd b7       	in	r28, 0x3d	; 61
    2f06:	de b7       	in	r29, 0x3e	; 62
    2f08:	69 97       	sbiw	r28, 0x19	; 25
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	f8 94       	cli
    2f0e:	de bf       	out	0x3e, r29	; 62
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	cd bf       	out	0x3d, r28	; 61
    2f14:	89 8f       	std	Y+25, r24	; 0x19
	DIO_u8setPinVal(RS_PORT, RS_PIN, DIO_LOW);
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	62 e0       	ldi	r22, 0x02	; 2
    2f1a:	40 e0       	ldi	r20, 0x00	; 0
    2f1c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
	DIO_u8setPinVal(RW_PORT, RW_PIN, DIO_LOW);
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	61 e0       	ldi	r22, 0x01	; 1
    2f24:	40 e0       	ldi	r20, 0x00	; 0
    2f26:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>

#if  LCD_MODE == EIGHT_BITS
	DIO_u8setPinVal(E_PORT, E_PIN, DIO_HIGH);
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	60 e0       	ldi	r22, 0x00	; 0
    2f2e:	41 e0       	ldi	r20, 0x01	; 1
    2f30:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
	DIO_u8setPortVal(LCD_DATA_PORT, Copy_u8Cmd);
    2f34:	82 e0       	ldi	r24, 0x02	; 2
    2f36:	69 8d       	ldd	r22, Y+25	; 0x19
    2f38:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <DIO_u8setPortVal>
	DIO_u8setPinVal(E_PORT, E_PIN, DIO_LOW);
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	60 e0       	ldi	r22, 0x00	; 0
    2f40:	40 e0       	ldi	r20, 0x00	; 0
    2f42:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	a0 e8       	ldi	r26, 0x80	; 128
    2f4c:	bf e3       	ldi	r27, 0x3F	; 63
    2f4e:	8d 8b       	std	Y+21, r24	; 0x15
    2f50:	9e 8b       	std	Y+22, r25	; 0x16
    2f52:	af 8b       	std	Y+23, r26	; 0x17
    2f54:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f56:	6d 89       	ldd	r22, Y+21	; 0x15
    2f58:	7e 89       	ldd	r23, Y+22	; 0x16
    2f5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f5e:	2b ea       	ldi	r18, 0xAB	; 171
    2f60:	3a ea       	ldi	r19, 0xAA	; 170
    2f62:	4a e2       	ldi	r20, 0x2A	; 42
    2f64:	50 e4       	ldi	r21, 0x40	; 64
    2f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	89 8b       	std	Y+17, r24	; 0x11
    2f70:	9a 8b       	std	Y+18, r25	; 0x12
    2f72:	ab 8b       	std	Y+19, r26	; 0x13
    2f74:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2f76:	69 89       	ldd	r22, Y+17	; 0x11
    2f78:	7a 89       	ldd	r23, Y+18	; 0x12
    2f7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	40 e8       	ldi	r20, 0x80	; 128
    2f84:	5f e3       	ldi	r21, 0x3F	; 63
    2f86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f8a:	88 23       	and	r24, r24
    2f8c:	1c f4       	brge	.+6      	; 0x2f94 <LCD_vidSendCmd+0x94>
		__ticks = 1;
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	88 8b       	std	Y+16, r24	; 0x10
    2f92:	91 c0       	rjmp	.+290    	; 0x30b6 <LCD_vidSendCmd+0x1b6>
	else if (__tmp > 255)
    2f94:	69 89       	ldd	r22, Y+17	; 0x11
    2f96:	7a 89       	ldd	r23, Y+18	; 0x12
    2f98:	8b 89       	ldd	r24, Y+19	; 0x13
    2f9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	4f e7       	ldi	r20, 0x7F	; 127
    2fa2:	53 e4       	ldi	r21, 0x43	; 67
    2fa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fa8:	18 16       	cp	r1, r24
    2faa:	0c f0       	brlt	.+2      	; 0x2fae <LCD_vidSendCmd+0xae>
    2fac:	7b c0       	rjmp	.+246    	; 0x30a4 <LCD_vidSendCmd+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    2fae:	6d 89       	ldd	r22, Y+21	; 0x15
    2fb0:	7e 89       	ldd	r23, Y+22	; 0x16
    2fb2:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb4:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	4a e7       	ldi	r20, 0x7A	; 122
    2fbc:	54 e4       	ldi	r21, 0x44	; 68
    2fbe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	8c 87       	std	Y+12, r24	; 0x0c
    2fc8:	9d 87       	std	Y+13, r25	; 0x0d
    2fca:	ae 87       	std	Y+14, r26	; 0x0e
    2fcc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fce:	6c 85       	ldd	r22, Y+12	; 0x0c
    2fd0:	7d 85       	ldd	r23, Y+13	; 0x0d
    2fd2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fd4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	4a ef       	ldi	r20, 0xFA	; 250
    2fdc:	54 e4       	ldi	r21, 0x44	; 68
    2fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	88 87       	std	Y+8, r24	; 0x08
    2fe8:	99 87       	std	Y+9, r25	; 0x09
    2fea:	aa 87       	std	Y+10, r26	; 0x0a
    2fec:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2fee:	68 85       	ldd	r22, Y+8	; 0x08
    2ff0:	79 85       	ldd	r23, Y+9	; 0x09
    2ff2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ff4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	40 e8       	ldi	r20, 0x80	; 128
    2ffc:	5f e3       	ldi	r21, 0x3F	; 63
    2ffe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3002:	88 23       	and	r24, r24
    3004:	2c f4       	brge	.+10     	; 0x3010 <LCD_vidSendCmd+0x110>
		__ticks = 1;
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	9f 83       	std	Y+7, r25	; 0x07
    300c:	8e 83       	std	Y+6, r24	; 0x06
    300e:	3f c0       	rjmp	.+126    	; 0x308e <LCD_vidSendCmd+0x18e>
	else if (__tmp > 65535)
    3010:	68 85       	ldd	r22, Y+8	; 0x08
    3012:	79 85       	ldd	r23, Y+9	; 0x09
    3014:	8a 85       	ldd	r24, Y+10	; 0x0a
    3016:	9b 85       	ldd	r25, Y+11	; 0x0b
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	3f ef       	ldi	r19, 0xFF	; 255
    301c:	4f e7       	ldi	r20, 0x7F	; 127
    301e:	57 e4       	ldi	r21, 0x47	; 71
    3020:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3024:	18 16       	cp	r1, r24
    3026:	4c f5       	brge	.+82     	; 0x307a <LCD_vidSendCmd+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3028:	6c 85       	ldd	r22, Y+12	; 0x0c
    302a:	7d 85       	ldd	r23, Y+13	; 0x0d
    302c:	8e 85       	ldd	r24, Y+14	; 0x0e
    302e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e2       	ldi	r20, 0x20	; 32
    3036:	51 e4       	ldi	r21, 0x41	; 65
    3038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	bc 01       	movw	r22, r24
    3042:	cd 01       	movw	r24, r26
    3044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	9f 83       	std	Y+7, r25	; 0x07
    304e:	8e 83       	std	Y+6, r24	; 0x06
    3050:	0f c0       	rjmp	.+30     	; 0x3070 <LCD_vidSendCmd+0x170>
    3052:	88 ec       	ldi	r24, 0xC8	; 200
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	9d 83       	std	Y+5, r25	; 0x05
    3058:	8c 83       	std	Y+4, r24	; 0x04
    305a:	8c 81       	ldd	r24, Y+4	; 0x04
    305c:	9d 81       	ldd	r25, Y+5	; 0x05
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	f1 f7       	brne	.-4      	; 0x305e <LCD_vidSendCmd+0x15e>
    3062:	9d 83       	std	Y+5, r25	; 0x05
    3064:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3066:	8e 81       	ldd	r24, Y+6	; 0x06
    3068:	9f 81       	ldd	r25, Y+7	; 0x07
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	9f 83       	std	Y+7, r25	; 0x07
    306e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3070:	8e 81       	ldd	r24, Y+6	; 0x06
    3072:	9f 81       	ldd	r25, Y+7	; 0x07
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	69 f7       	brne	.-38     	; 0x3052 <LCD_vidSendCmd+0x152>
    3078:	24 c0       	rjmp	.+72     	; 0x30c2 <LCD_vidSendCmd+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307a:	68 85       	ldd	r22, Y+8	; 0x08
    307c:	79 85       	ldd	r23, Y+9	; 0x09
    307e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3080:	9b 85       	ldd	r25, Y+11	; 0x0b
    3082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	9f 83       	std	Y+7, r25	; 0x07
    308c:	8e 83       	std	Y+6, r24	; 0x06
    308e:	8e 81       	ldd	r24, Y+6	; 0x06
    3090:	9f 81       	ldd	r25, Y+7	; 0x07
    3092:	9b 83       	std	Y+3, r25	; 0x03
    3094:	8a 83       	std	Y+2, r24	; 0x02
    3096:	8a 81       	ldd	r24, Y+2	; 0x02
    3098:	9b 81       	ldd	r25, Y+3	; 0x03
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	f1 f7       	brne	.-4      	; 0x309a <LCD_vidSendCmd+0x19a>
    309e:	9b 83       	std	Y+3, r25	; 0x03
    30a0:	8a 83       	std	Y+2, r24	; 0x02
    30a2:	0f c0       	rjmp	.+30     	; 0x30c2 <LCD_vidSendCmd+0x1c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    30a4:	69 89       	ldd	r22, Y+17	; 0x11
    30a6:	7a 89       	ldd	r23, Y+18	; 0x12
    30a8:	8b 89       	ldd	r24, Y+19	; 0x13
    30aa:	9c 89       	ldd	r25, Y+20	; 0x14
    30ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	88 8b       	std	Y+16, r24	; 0x10
    30b6:	88 89       	ldd	r24, Y+16	; 0x10
    30b8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	8a 95       	dec	r24
    30be:	f1 f7       	brne	.-4      	; 0x30bc <LCD_vidSendCmd+0x1bc>
    30c0:	89 83       	std	Y+1, r24	; 0x01
#elif LCD_MODE == FOUR_BITS

#else
#error "Wrong Configuration !"
#endif
}
    30c2:	69 96       	adiw	r28, 0x19	; 25
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	f8 94       	cli
    30c8:	de bf       	out	0x3e, r29	; 62
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	cd bf       	out	0x3d, r28	; 61
    30ce:	cf 91       	pop	r28
    30d0:	df 91       	pop	r29
    30d2:	08 95       	ret

000030d4 <LCD_vidWriteChar>:
//function to send data
void LCD_vidWriteChar(u8 Copy_u8Char){
    30d4:	df 93       	push	r29
    30d6:	cf 93       	push	r28
    30d8:	cd b7       	in	r28, 0x3d	; 61
    30da:	de b7       	in	r29, 0x3e	; 62
    30dc:	69 97       	sbiw	r28, 0x19	; 25
    30de:	0f b6       	in	r0, 0x3f	; 63
    30e0:	f8 94       	cli
    30e2:	de bf       	out	0x3e, r29	; 62
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	cd bf       	out	0x3d, r28	; 61
    30e8:	89 8f       	std	Y+25, r24	; 0x19
	DIO_u8setPinVal(RS_PORT, RS_PIN, DIO_HIGH);
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	62 e0       	ldi	r22, 0x02	; 2
    30ee:	41 e0       	ldi	r20, 0x01	; 1
    30f0:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
	DIO_u8setPinVal(RW_PORT, RW_PIN, DIO_LOW);
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	61 e0       	ldi	r22, 0x01	; 1
    30f8:	40 e0       	ldi	r20, 0x00	; 0
    30fa:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>

#if  LCD_MODE == EIGHT_BITS
	DIO_u8setPinVal(E_PORT, E_PIN, DIO_HIGH);
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	60 e0       	ldi	r22, 0x00	; 0
    3102:	41 e0       	ldi	r20, 0x01	; 1
    3104:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
	DIO_u8setPortVal(LCD_DATA_PORT, Copy_u8Char);
    3108:	82 e0       	ldi	r24, 0x02	; 2
    310a:	69 8d       	ldd	r22, Y+25	; 0x19
    310c:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <DIO_u8setPortVal>
	DIO_u8setPinVal(E_PORT, E_PIN, DIO_LOW);
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	60 e0       	ldi	r22, 0x00	; 0
    3114:	40 e0       	ldi	r20, 0x00	; 0
    3116:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	a0 e8       	ldi	r26, 0x80	; 128
    3120:	bf e3       	ldi	r27, 0x3F	; 63
    3122:	8d 8b       	std	Y+21, r24	; 0x15
    3124:	9e 8b       	std	Y+22, r25	; 0x16
    3126:	af 8b       	std	Y+23, r26	; 0x17
    3128:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    312a:	6d 89       	ldd	r22, Y+21	; 0x15
    312c:	7e 89       	ldd	r23, Y+22	; 0x16
    312e:	8f 89       	ldd	r24, Y+23	; 0x17
    3130:	98 8d       	ldd	r25, Y+24	; 0x18
    3132:	2b ea       	ldi	r18, 0xAB	; 171
    3134:	3a ea       	ldi	r19, 0xAA	; 170
    3136:	4a e2       	ldi	r20, 0x2A	; 42
    3138:	50 e4       	ldi	r21, 0x40	; 64
    313a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	89 8b       	std	Y+17, r24	; 0x11
    3144:	9a 8b       	std	Y+18, r25	; 0x12
    3146:	ab 8b       	std	Y+19, r26	; 0x13
    3148:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    314a:	69 89       	ldd	r22, Y+17	; 0x11
    314c:	7a 89       	ldd	r23, Y+18	; 0x12
    314e:	8b 89       	ldd	r24, Y+19	; 0x13
    3150:	9c 89       	ldd	r25, Y+20	; 0x14
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	40 e8       	ldi	r20, 0x80	; 128
    3158:	5f e3       	ldi	r21, 0x3F	; 63
    315a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    315e:	88 23       	and	r24, r24
    3160:	1c f4       	brge	.+6      	; 0x3168 <LCD_vidWriteChar+0x94>
		__ticks = 1;
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	88 8b       	std	Y+16, r24	; 0x10
    3166:	91 c0       	rjmp	.+290    	; 0x328a <LCD_vidWriteChar+0x1b6>
	else if (__tmp > 255)
    3168:	69 89       	ldd	r22, Y+17	; 0x11
    316a:	7a 89       	ldd	r23, Y+18	; 0x12
    316c:	8b 89       	ldd	r24, Y+19	; 0x13
    316e:	9c 89       	ldd	r25, Y+20	; 0x14
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	4f e7       	ldi	r20, 0x7F	; 127
    3176:	53 e4       	ldi	r21, 0x43	; 67
    3178:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    317c:	18 16       	cp	r1, r24
    317e:	0c f0       	brlt	.+2      	; 0x3182 <LCD_vidWriteChar+0xae>
    3180:	7b c0       	rjmp	.+246    	; 0x3278 <LCD_vidWriteChar+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    3182:	6d 89       	ldd	r22, Y+21	; 0x15
    3184:	7e 89       	ldd	r23, Y+22	; 0x16
    3186:	8f 89       	ldd	r24, Y+23	; 0x17
    3188:	98 8d       	ldd	r25, Y+24	; 0x18
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	4a e7       	ldi	r20, 0x7A	; 122
    3190:	54 e4       	ldi	r21, 0x44	; 68
    3192:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	8c 87       	std	Y+12, r24	; 0x0c
    319c:	9d 87       	std	Y+13, r25	; 0x0d
    319e:	ae 87       	std	Y+14, r26	; 0x0e
    31a0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    31a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    31a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    31a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	4a ef       	ldi	r20, 0xFA	; 250
    31b0:	54 e4       	ldi	r21, 0x44	; 68
    31b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	88 87       	std	Y+8, r24	; 0x08
    31bc:	99 87       	std	Y+9, r25	; 0x09
    31be:	aa 87       	std	Y+10, r26	; 0x0a
    31c0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    31c2:	68 85       	ldd	r22, Y+8	; 0x08
    31c4:	79 85       	ldd	r23, Y+9	; 0x09
    31c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    31c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e8       	ldi	r20, 0x80	; 128
    31d0:	5f e3       	ldi	r21, 0x3F	; 63
    31d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31d6:	88 23       	and	r24, r24
    31d8:	2c f4       	brge	.+10     	; 0x31e4 <LCD_vidWriteChar+0x110>
		__ticks = 1;
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	9f 83       	std	Y+7, r25	; 0x07
    31e0:	8e 83       	std	Y+6, r24	; 0x06
    31e2:	3f c0       	rjmp	.+126    	; 0x3262 <LCD_vidWriteChar+0x18e>
	else if (__tmp > 65535)
    31e4:	68 85       	ldd	r22, Y+8	; 0x08
    31e6:	79 85       	ldd	r23, Y+9	; 0x09
    31e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    31ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	3f ef       	ldi	r19, 0xFF	; 255
    31f0:	4f e7       	ldi	r20, 0x7F	; 127
    31f2:	57 e4       	ldi	r21, 0x47	; 71
    31f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31f8:	18 16       	cp	r1, r24
    31fa:	4c f5       	brge	.+82     	; 0x324e <LCD_vidWriteChar+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    31fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    3200:	8e 85       	ldd	r24, Y+14	; 0x0e
    3202:	9f 85       	ldd	r25, Y+15	; 0x0f
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	40 e2       	ldi	r20, 0x20	; 32
    320a:	51 e4       	ldi	r21, 0x41	; 65
    320c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	bc 01       	movw	r22, r24
    3216:	cd 01       	movw	r24, r26
    3218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	9f 83       	std	Y+7, r25	; 0x07
    3222:	8e 83       	std	Y+6, r24	; 0x06
    3224:	0f c0       	rjmp	.+30     	; 0x3244 <LCD_vidWriteChar+0x170>
    3226:	88 ec       	ldi	r24, 0xC8	; 200
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	9d 83       	std	Y+5, r25	; 0x05
    322c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    322e:	8c 81       	ldd	r24, Y+4	; 0x04
    3230:	9d 81       	ldd	r25, Y+5	; 0x05
    3232:	01 97       	sbiw	r24, 0x01	; 1
    3234:	f1 f7       	brne	.-4      	; 0x3232 <LCD_vidWriteChar+0x15e>
    3236:	9d 83       	std	Y+5, r25	; 0x05
    3238:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    323a:	8e 81       	ldd	r24, Y+6	; 0x06
    323c:	9f 81       	ldd	r25, Y+7	; 0x07
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	9f 83       	std	Y+7, r25	; 0x07
    3242:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3244:	8e 81       	ldd	r24, Y+6	; 0x06
    3246:	9f 81       	ldd	r25, Y+7	; 0x07
    3248:	00 97       	sbiw	r24, 0x00	; 0
    324a:	69 f7       	brne	.-38     	; 0x3226 <LCD_vidWriteChar+0x152>
    324c:	24 c0       	rjmp	.+72     	; 0x3296 <LCD_vidWriteChar+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    324e:	68 85       	ldd	r22, Y+8	; 0x08
    3250:	79 85       	ldd	r23, Y+9	; 0x09
    3252:	8a 85       	ldd	r24, Y+10	; 0x0a
    3254:	9b 85       	ldd	r25, Y+11	; 0x0b
    3256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	9f 83       	std	Y+7, r25	; 0x07
    3260:	8e 83       	std	Y+6, r24	; 0x06
    3262:	8e 81       	ldd	r24, Y+6	; 0x06
    3264:	9f 81       	ldd	r25, Y+7	; 0x07
    3266:	9b 83       	std	Y+3, r25	; 0x03
    3268:	8a 83       	std	Y+2, r24	; 0x02
    326a:	8a 81       	ldd	r24, Y+2	; 0x02
    326c:	9b 81       	ldd	r25, Y+3	; 0x03
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	f1 f7       	brne	.-4      	; 0x326e <LCD_vidWriteChar+0x19a>
    3272:	9b 83       	std	Y+3, r25	; 0x03
    3274:	8a 83       	std	Y+2, r24	; 0x02
    3276:	0f c0       	rjmp	.+30     	; 0x3296 <LCD_vidWriteChar+0x1c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3278:	69 89       	ldd	r22, Y+17	; 0x11
    327a:	7a 89       	ldd	r23, Y+18	; 0x12
    327c:	8b 89       	ldd	r24, Y+19	; 0x13
    327e:	9c 89       	ldd	r25, Y+20	; 0x14
    3280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	88 8b       	std	Y+16, r24	; 0x10
    328a:	88 89       	ldd	r24, Y+16	; 0x10
    328c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	8a 95       	dec	r24
    3292:	f1 f7       	brne	.-4      	; 0x3290 <LCD_vidWriteChar+0x1bc>
    3294:	89 83       	std	Y+1, r24	; 0x01
#elif LCD_MODE == FOUR_BITS

#else
#error "Wrong Configuration !"
#endif
}
    3296:	69 96       	adiw	r28, 0x19	; 25
    3298:	0f b6       	in	r0, 0x3f	; 63
    329a:	f8 94       	cli
    329c:	de bf       	out	0x3e, r29	; 62
    329e:	0f be       	out	0x3f, r0	; 63
    32a0:	cd bf       	out	0x3d, r28	; 61
    32a2:	cf 91       	pop	r28
    32a4:	df 91       	pop	r29
    32a6:	08 95       	ret

000032a8 <LCD_vidClear>:

//function to clear the display
void LCD_vidClear(void){
    32a8:	df 93       	push	r29
    32aa:	cf 93       	push	r28
    32ac:	cd b7       	in	r28, 0x3d	; 61
    32ae:	de b7       	in	r29, 0x3e	; 62
    32b0:	68 97       	sbiw	r28, 0x18	; 24
    32b2:	0f b6       	in	r0, 0x3f	; 63
    32b4:	f8 94       	cli
    32b6:	de bf       	out	0x3e, r29	; 62
    32b8:	0f be       	out	0x3f, r0	; 63
    32ba:	cd bf       	out	0x3d, r28	; 61
	LCD_vidSendCmd(DISPLAY_CLEAR);
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	0e 94 80 17 	call	0x2f00	; 0x2f00 <LCD_vidSendCmd>
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	a8 ec       	ldi	r26, 0xC8	; 200
    32c8:	b2 e4       	ldi	r27, 0x42	; 66
    32ca:	8d 8b       	std	Y+21, r24	; 0x15
    32cc:	9e 8b       	std	Y+22, r25	; 0x16
    32ce:	af 8b       	std	Y+23, r26	; 0x17
    32d0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32d2:	6d 89       	ldd	r22, Y+21	; 0x15
    32d4:	7e 89       	ldd	r23, Y+22	; 0x16
    32d6:	8f 89       	ldd	r24, Y+23	; 0x17
    32d8:	98 8d       	ldd	r25, Y+24	; 0x18
    32da:	2b ea       	ldi	r18, 0xAB	; 171
    32dc:	3a ea       	ldi	r19, 0xAA	; 170
    32de:	4a e2       	ldi	r20, 0x2A	; 42
    32e0:	50 e4       	ldi	r21, 0x40	; 64
    32e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	89 8b       	std	Y+17, r24	; 0x11
    32ec:	9a 8b       	std	Y+18, r25	; 0x12
    32ee:	ab 8b       	std	Y+19, r26	; 0x13
    32f0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    32f2:	69 89       	ldd	r22, Y+17	; 0x11
    32f4:	7a 89       	ldd	r23, Y+18	; 0x12
    32f6:	8b 89       	ldd	r24, Y+19	; 0x13
    32f8:	9c 89       	ldd	r25, Y+20	; 0x14
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	40 e8       	ldi	r20, 0x80	; 128
    3300:	5f e3       	ldi	r21, 0x3F	; 63
    3302:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3306:	88 23       	and	r24, r24
    3308:	1c f4       	brge	.+6      	; 0x3310 <LCD_vidClear+0x68>
		__ticks = 1;
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	88 8b       	std	Y+16, r24	; 0x10
    330e:	91 c0       	rjmp	.+290    	; 0x3432 <LCD_vidClear+0x18a>
	else if (__tmp > 255)
    3310:	69 89       	ldd	r22, Y+17	; 0x11
    3312:	7a 89       	ldd	r23, Y+18	; 0x12
    3314:	8b 89       	ldd	r24, Y+19	; 0x13
    3316:	9c 89       	ldd	r25, Y+20	; 0x14
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	4f e7       	ldi	r20, 0x7F	; 127
    331e:	53 e4       	ldi	r21, 0x43	; 67
    3320:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3324:	18 16       	cp	r1, r24
    3326:	0c f0       	brlt	.+2      	; 0x332a <LCD_vidClear+0x82>
    3328:	7b c0       	rjmp	.+246    	; 0x3420 <LCD_vidClear+0x178>
	{
		_delay_ms(__us / 1000.0);
    332a:	6d 89       	ldd	r22, Y+21	; 0x15
    332c:	7e 89       	ldd	r23, Y+22	; 0x16
    332e:	8f 89       	ldd	r24, Y+23	; 0x17
    3330:	98 8d       	ldd	r25, Y+24	; 0x18
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	4a e7       	ldi	r20, 0x7A	; 122
    3338:	54 e4       	ldi	r21, 0x44	; 68
    333a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	8c 87       	std	Y+12, r24	; 0x0c
    3344:	9d 87       	std	Y+13, r25	; 0x0d
    3346:	ae 87       	std	Y+14, r26	; 0x0e
    3348:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    334a:	6c 85       	ldd	r22, Y+12	; 0x0c
    334c:	7d 85       	ldd	r23, Y+13	; 0x0d
    334e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3350:	9f 85       	ldd	r25, Y+15	; 0x0f
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	4a ef       	ldi	r20, 0xFA	; 250
    3358:	54 e4       	ldi	r21, 0x44	; 68
    335a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	88 87       	std	Y+8, r24	; 0x08
    3364:	99 87       	std	Y+9, r25	; 0x09
    3366:	aa 87       	std	Y+10, r26	; 0x0a
    3368:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    336a:	68 85       	ldd	r22, Y+8	; 0x08
    336c:	79 85       	ldd	r23, Y+9	; 0x09
    336e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3370:	9b 85       	ldd	r25, Y+11	; 0x0b
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	40 e8       	ldi	r20, 0x80	; 128
    3378:	5f e3       	ldi	r21, 0x3F	; 63
    337a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    337e:	88 23       	and	r24, r24
    3380:	2c f4       	brge	.+10     	; 0x338c <LCD_vidClear+0xe4>
		__ticks = 1;
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	9f 83       	std	Y+7, r25	; 0x07
    3388:	8e 83       	std	Y+6, r24	; 0x06
    338a:	3f c0       	rjmp	.+126    	; 0x340a <LCD_vidClear+0x162>
	else if (__tmp > 65535)
    338c:	68 85       	ldd	r22, Y+8	; 0x08
    338e:	79 85       	ldd	r23, Y+9	; 0x09
    3390:	8a 85       	ldd	r24, Y+10	; 0x0a
    3392:	9b 85       	ldd	r25, Y+11	; 0x0b
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	3f ef       	ldi	r19, 0xFF	; 255
    3398:	4f e7       	ldi	r20, 0x7F	; 127
    339a:	57 e4       	ldi	r21, 0x47	; 71
    339c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33a0:	18 16       	cp	r1, r24
    33a2:	4c f5       	brge	.+82     	; 0x33f6 <LCD_vidClear+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    33a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    33a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    33aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	40 e2       	ldi	r20, 0x20	; 32
    33b2:	51 e4       	ldi	r21, 0x41	; 65
    33b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	bc 01       	movw	r22, r24
    33be:	cd 01       	movw	r24, r26
    33c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	9f 83       	std	Y+7, r25	; 0x07
    33ca:	8e 83       	std	Y+6, r24	; 0x06
    33cc:	0f c0       	rjmp	.+30     	; 0x33ec <LCD_vidClear+0x144>
    33ce:	88 ec       	ldi	r24, 0xC8	; 200
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	9d 83       	std	Y+5, r25	; 0x05
    33d4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33d6:	8c 81       	ldd	r24, Y+4	; 0x04
    33d8:	9d 81       	ldd	r25, Y+5	; 0x05
    33da:	01 97       	sbiw	r24, 0x01	; 1
    33dc:	f1 f7       	brne	.-4      	; 0x33da <LCD_vidClear+0x132>
    33de:	9d 83       	std	Y+5, r25	; 0x05
    33e0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e2:	8e 81       	ldd	r24, Y+6	; 0x06
    33e4:	9f 81       	ldd	r25, Y+7	; 0x07
    33e6:	01 97       	sbiw	r24, 0x01	; 1
    33e8:	9f 83       	std	Y+7, r25	; 0x07
    33ea:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ec:	8e 81       	ldd	r24, Y+6	; 0x06
    33ee:	9f 81       	ldd	r25, Y+7	; 0x07
    33f0:	00 97       	sbiw	r24, 0x00	; 0
    33f2:	69 f7       	brne	.-38     	; 0x33ce <LCD_vidClear+0x126>
    33f4:	24 c0       	rjmp	.+72     	; 0x343e <LCD_vidClear+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f6:	68 85       	ldd	r22, Y+8	; 0x08
    33f8:	79 85       	ldd	r23, Y+9	; 0x09
    33fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    33fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    33fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	9f 83       	std	Y+7, r25	; 0x07
    3408:	8e 83       	std	Y+6, r24	; 0x06
    340a:	8e 81       	ldd	r24, Y+6	; 0x06
    340c:	9f 81       	ldd	r25, Y+7	; 0x07
    340e:	9b 83       	std	Y+3, r25	; 0x03
    3410:	8a 83       	std	Y+2, r24	; 0x02
    3412:	8a 81       	ldd	r24, Y+2	; 0x02
    3414:	9b 81       	ldd	r25, Y+3	; 0x03
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	f1 f7       	brne	.-4      	; 0x3416 <LCD_vidClear+0x16e>
    341a:	9b 83       	std	Y+3, r25	; 0x03
    341c:	8a 83       	std	Y+2, r24	; 0x02
    341e:	0f c0       	rjmp	.+30     	; 0x343e <LCD_vidClear+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3420:	69 89       	ldd	r22, Y+17	; 0x11
    3422:	7a 89       	ldd	r23, Y+18	; 0x12
    3424:	8b 89       	ldd	r24, Y+19	; 0x13
    3426:	9c 89       	ldd	r25, Y+20	; 0x14
    3428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	88 8b       	std	Y+16, r24	; 0x10
    3432:	88 89       	ldd	r24, Y+16	; 0x10
    3434:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	8a 95       	dec	r24
    343a:	f1 f7       	brne	.-4      	; 0x3438 <LCD_vidClear+0x190>
    343c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);								//delay to force the next instructions to wait until the clear ins is executed
}
    343e:	68 96       	adiw	r28, 0x18	; 24
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	f8 94       	cli
    3444:	de bf       	out	0x3e, r29	; 62
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	cd bf       	out	0x3d, r28	; 61
    344a:	cf 91       	pop	r28
    344c:	df 91       	pop	r29
    344e:	08 95       	ret

00003450 <LCD_u8Goto>:

//function to go to specific segment
u8 LCD_u8Goto(u8 Copy_u8Row, u8 Copy_u8Col){
    3450:	df 93       	push	r29
    3452:	cf 93       	push	r28
    3454:	00 d0       	rcall	.+0      	; 0x3456 <LCD_u8Goto+0x6>
    3456:	00 d0       	rcall	.+0      	; 0x3458 <LCD_u8Goto+0x8>
    3458:	00 d0       	rcall	.+0      	; 0x345a <LCD_u8Goto+0xa>
    345a:	cd b7       	in	r28, 0x3d	; 61
    345c:	de b7       	in	r29, 0x3e	; 62
    345e:	8b 83       	std	Y+3, r24	; 0x03
    3460:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_u8ErrorStatus = RT_OK;
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8Set_DDRAM_Address = SET_DDRAM_ADDRESS;
    3466:	80 e8       	ldi	r24, 0x80	; 128
    3468:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8Row){
    346a:	8b 81       	ldd	r24, Y+3	; 0x03
    346c:	28 2f       	mov	r18, r24
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	3e 83       	std	Y+6, r19	; 0x06
    3472:	2d 83       	std	Y+5, r18	; 0x05
    3474:	8d 81       	ldd	r24, Y+5	; 0x05
    3476:	9e 81       	ldd	r25, Y+6	; 0x06
    3478:	81 30       	cpi	r24, 0x01	; 1
    347a:	91 05       	cpc	r25, r1
    347c:	31 f0       	breq	.+12     	; 0x348a <LCD_u8Goto+0x3a>
    347e:	2d 81       	ldd	r18, Y+5	; 0x05
    3480:	3e 81       	ldd	r19, Y+6	; 0x06
    3482:	22 30       	cpi	r18, 0x02	; 2
    3484:	31 05       	cpc	r19, r1
    3486:	81 f0       	breq	.+32     	; 0x34a8 <LCD_u8Goto+0x58>
    3488:	1e c0       	rjmp	.+60     	; 0x34c6 <LCD_u8Goto+0x76>
	case 1:
		if(Copy_u8Col <= 64){
    348a:	8c 81       	ldd	r24, Y+4	; 0x04
    348c:	81 34       	cpi	r24, 0x41	; 65
    348e:	48 f4       	brcc	.+18     	; 0x34a2 <LCD_u8Goto+0x52>
			local_u8Set_DDRAM_Address += (Copy_u8Col - 1);
    3490:	9c 81       	ldd	r25, Y+4	; 0x04
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	89 0f       	add	r24, r25
    3496:	81 50       	subi	r24, 0x01	; 1
    3498:	89 83       	std	Y+1, r24	; 0x01
			LCD_vidSendCmd(local_u8Set_DDRAM_Address);
    349a:	89 81       	ldd	r24, Y+1	; 0x01
    349c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <LCD_vidSendCmd>
    34a0:	14 c0       	rjmp	.+40     	; 0x34ca <LCD_u8Goto+0x7a>
		}else{
			local_u8ErrorStatus = RT_WRONG_COLUMN_NUMBER;
    34a2:	82 e0       	ldi	r24, 0x02	; 2
    34a4:	8a 83       	std	Y+2, r24	; 0x02
    34a6:	11 c0       	rjmp	.+34     	; 0x34ca <LCD_u8Goto+0x7a>
		}
		break;
	case 2:
		if(Copy_u8Col <= 16){
    34a8:	8c 81       	ldd	r24, Y+4	; 0x04
    34aa:	81 31       	cpi	r24, 0x11	; 17
    34ac:	48 f4       	brcc	.+18     	; 0x34c0 <LCD_u8Goto+0x70>
			local_u8Set_DDRAM_Address += (64 + (Copy_u8Col-1));
    34ae:	9c 81       	ldd	r25, Y+4	; 0x04
    34b0:	89 81       	ldd	r24, Y+1	; 0x01
    34b2:	89 0f       	add	r24, r25
    34b4:	81 5c       	subi	r24, 0xC1	; 193
    34b6:	89 83       	std	Y+1, r24	; 0x01
			LCD_vidSendCmd(local_u8Set_DDRAM_Address);
    34b8:	89 81       	ldd	r24, Y+1	; 0x01
    34ba:	0e 94 80 17 	call	0x2f00	; 0x2f00 <LCD_vidSendCmd>
    34be:	05 c0       	rjmp	.+10     	; 0x34ca <LCD_u8Goto+0x7a>
		}else{
			local_u8ErrorStatus = RT_WRONG_COLUMN_NUMBER;
    34c0:	82 e0       	ldi	r24, 0x02	; 2
    34c2:	8a 83       	std	Y+2, r24	; 0x02
    34c4:	02 c0       	rjmp	.+4      	; 0x34ca <LCD_u8Goto+0x7a>
		}
		break;
	default:
		local_u8ErrorStatus = RT_WRONG_ROW_NUMBER;
    34c6:	83 e0       	ldi	r24, 0x03	; 3
    34c8:	8a 83       	std	Y+2, r24	; 0x02
	}

	return local_u8ErrorStatus;
    34ca:	8a 81       	ldd	r24, Y+2	; 0x02
}
    34cc:	26 96       	adiw	r28, 0x06	; 6
    34ce:	0f b6       	in	r0, 0x3f	; 63
    34d0:	f8 94       	cli
    34d2:	de bf       	out	0x3e, r29	; 62
    34d4:	0f be       	out	0x3f, r0	; 63
    34d6:	cd bf       	out	0x3d, r28	; 61
    34d8:	cf 91       	pop	r28
    34da:	df 91       	pop	r29
    34dc:	08 95       	ret

000034de <LCD_vidSendString>:

//function to send string
void LCD_vidSendString(u8 * Copy_u8CharPtr){
    34de:	df 93       	push	r29
    34e0:	cf 93       	push	r28
    34e2:	00 d0       	rcall	.+0      	; 0x34e4 <LCD_vidSendString+0x6>
    34e4:	0f 92       	push	r0
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
    34ea:	9b 83       	std	Y+3, r25	; 0x03
    34ec:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0;
    34ee:	19 82       	std	Y+1, r1	; 0x01
    34f0:	0e c0       	rjmp	.+28     	; 0x350e <LCD_vidSendString+0x30>
	while(*(Copy_u8CharPtr + i) != '\0'){
		LCD_vidWriteChar(* (Copy_u8CharPtr + i));
    34f2:	89 81       	ldd	r24, Y+1	; 0x01
    34f4:	28 2f       	mov	r18, r24
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	8a 81       	ldd	r24, Y+2	; 0x02
    34fa:	9b 81       	ldd	r25, Y+3	; 0x03
    34fc:	fc 01       	movw	r30, r24
    34fe:	e2 0f       	add	r30, r18
    3500:	f3 1f       	adc	r31, r19
    3502:	80 81       	ld	r24, Z
    3504:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <LCD_vidWriteChar>
		i++;
    3508:	89 81       	ldd	r24, Y+1	; 0x01
    350a:	8f 5f       	subi	r24, 0xFF	; 255
    350c:	89 83       	std	Y+1, r24	; 0x01
}

//function to send string
void LCD_vidSendString(u8 * Copy_u8CharPtr){
	u8 i =0;
	while(*(Copy_u8CharPtr + i) != '\0'){
    350e:	89 81       	ldd	r24, Y+1	; 0x01
    3510:	28 2f       	mov	r18, r24
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	8a 81       	ldd	r24, Y+2	; 0x02
    3516:	9b 81       	ldd	r25, Y+3	; 0x03
    3518:	fc 01       	movw	r30, r24
    351a:	e2 0f       	add	r30, r18
    351c:	f3 1f       	adc	r31, r19
    351e:	80 81       	ld	r24, Z
    3520:	88 23       	and	r24, r24
    3522:	39 f7       	brne	.-50     	; 0x34f2 <LCD_vidSendString+0x14>
		LCD_vidWriteChar(* (Copy_u8CharPtr + i));
		i++;
	}
}
    3524:	0f 90       	pop	r0
    3526:	0f 90       	pop	r0
    3528:	0f 90       	pop	r0
    352a:	cf 91       	pop	r28
    352c:	df 91       	pop	r29
    352e:	08 95       	ret

00003530 <LCD_vidSendInt>:

//function to display integers
void LCD_vidSendInt(u32 Copy_u32IntNumber){
    3530:	df 93       	push	r29
    3532:	cf 93       	push	r28
    3534:	00 d0       	rcall	.+0      	; 0x3536 <LCD_vidSendInt+0x6>
    3536:	00 d0       	rcall	.+0      	; 0x3538 <LCD_vidSendInt+0x8>
    3538:	00 d0       	rcall	.+0      	; 0x353a <LCD_vidSendInt+0xa>
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62
    353e:	9e 83       	std	Y+6, r25	; 0x06
    3540:	8d 83       	std	Y+5, r24	; 0x05
	if(Copy_u32IntNumber != 0){
    3542:	8d 81       	ldd	r24, Y+5	; 0x05
    3544:	9e 81       	ldd	r25, Y+6	; 0x06
    3546:	00 97       	sbiw	r24, 0x00	; 0
    3548:	09 f4       	brne	.+2      	; 0x354c <LCD_vidSendInt+0x1c>
    354a:	5a c0       	rjmp	.+180    	; 0x3600 <LCD_vidSendInt+0xd0>
		u32 local_u32NewNumber = 0;
    354c:	1c 82       	std	Y+4, r1	; 0x04
    354e:	1b 82       	std	Y+3, r1	; 0x03
		u8 local_u8NewDigit = 0;
    3550:	1a 82       	std	Y+2, r1	; 0x02
		u8 counter = 0;
    3552:	19 82       	std	Y+1, r1	; 0x01
    3554:	28 c0       	rjmp	.+80     	; 0x35a6 <LCD_vidSendInt+0x76>
		while(Copy_u32IntNumber !=0){
			local_u8NewDigit = Copy_u32IntNumber % 10;
    3556:	8d 81       	ldd	r24, Y+5	; 0x05
    3558:	9e 81       	ldd	r25, Y+6	; 0x06
    355a:	2a e0       	ldi	r18, 0x0A	; 10
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	b9 01       	movw	r22, r18
    3560:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <__udivmodhi4>
    3564:	8a 83       	std	Y+2, r24	; 0x02
			local_u32NewNumber = (local_u32NewNumber * 10) + local_u8NewDigit;
    3566:	8b 81       	ldd	r24, Y+3	; 0x03
    3568:	9c 81       	ldd	r25, Y+4	; 0x04
    356a:	9c 01       	movw	r18, r24
    356c:	22 0f       	add	r18, r18
    356e:	33 1f       	adc	r19, r19
    3570:	c9 01       	movw	r24, r18
    3572:	88 0f       	add	r24, r24
    3574:	99 1f       	adc	r25, r25
    3576:	88 0f       	add	r24, r24
    3578:	99 1f       	adc	r25, r25
    357a:	28 0f       	add	r18, r24
    357c:	39 1f       	adc	r19, r25
    357e:	8a 81       	ldd	r24, Y+2	; 0x02
    3580:	88 2f       	mov	r24, r24
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	82 0f       	add	r24, r18
    3586:	93 1f       	adc	r25, r19
    3588:	9c 83       	std	Y+4, r25	; 0x04
    358a:	8b 83       	std	Y+3, r24	; 0x03
			Copy_u32IntNumber /= 10;
    358c:	8d 81       	ldd	r24, Y+5	; 0x05
    358e:	9e 81       	ldd	r25, Y+6	; 0x06
    3590:	2a e0       	ldi	r18, 0x0A	; 10
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	b9 01       	movw	r22, r18
    3596:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <__udivmodhi4>
    359a:	cb 01       	movw	r24, r22
    359c:	9e 83       	std	Y+6, r25	; 0x06
    359e:	8d 83       	std	Y+5, r24	; 0x05
			counter++;
    35a0:	89 81       	ldd	r24, Y+1	; 0x01
    35a2:	8f 5f       	subi	r24, 0xFF	; 255
    35a4:	89 83       	std	Y+1, r24	; 0x01
void LCD_vidSendInt(u32 Copy_u32IntNumber){
	if(Copy_u32IntNumber != 0){
		u32 local_u32NewNumber = 0;
		u8 local_u8NewDigit = 0;
		u8 counter = 0;
		while(Copy_u32IntNumber !=0){
    35a6:	8d 81       	ldd	r24, Y+5	; 0x05
    35a8:	9e 81       	ldd	r25, Y+6	; 0x06
    35aa:	00 97       	sbiw	r24, 0x00	; 0
    35ac:	a1 f6       	brne	.-88     	; 0x3556 <LCD_vidSendInt+0x26>
    35ae:	19 c0       	rjmp	.+50     	; 0x35e2 <LCD_vidSendInt+0xb2>
			Copy_u32IntNumber /= 10;
			counter++;
		}

		while(local_u32NewNumber !=0 ){
			local_u8NewDigit = local_u32NewNumber % 10;
    35b0:	8b 81       	ldd	r24, Y+3	; 0x03
    35b2:	9c 81       	ldd	r25, Y+4	; 0x04
    35b4:	2a e0       	ldi	r18, 0x0A	; 10
    35b6:	30 e0       	ldi	r19, 0x00	; 0
    35b8:	b9 01       	movw	r22, r18
    35ba:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <__udivmodhi4>
    35be:	8a 83       	std	Y+2, r24	; 0x02
			local_u32NewNumber /= 10;
    35c0:	8b 81       	ldd	r24, Y+3	; 0x03
    35c2:	9c 81       	ldd	r25, Y+4	; 0x04
    35c4:	2a e0       	ldi	r18, 0x0A	; 10
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	b9 01       	movw	r22, r18
    35ca:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <__udivmodhi4>
    35ce:	cb 01       	movw	r24, r22
    35d0:	9c 83       	std	Y+4, r25	; 0x04
    35d2:	8b 83       	std	Y+3, r24	; 0x03
			LCD_vidWriteChar('0' + local_u8NewDigit);
    35d4:	8a 81       	ldd	r24, Y+2	; 0x02
    35d6:	80 5d       	subi	r24, 0xD0	; 208
    35d8:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <LCD_vidWriteChar>
			counter--;
    35dc:	89 81       	ldd	r24, Y+1	; 0x01
    35de:	81 50       	subi	r24, 0x01	; 1
    35e0:	89 83       	std	Y+1, r24	; 0x01
			local_u32NewNumber = (local_u32NewNumber * 10) + local_u8NewDigit;
			Copy_u32IntNumber /= 10;
			counter++;
		}

		while(local_u32NewNumber !=0 ){
    35e2:	8b 81       	ldd	r24, Y+3	; 0x03
    35e4:	9c 81       	ldd	r25, Y+4	; 0x04
    35e6:	00 97       	sbiw	r24, 0x00	; 0
    35e8:	19 f7       	brne	.-58     	; 0x35b0 <LCD_vidSendInt+0x80>
    35ea:	06 c0       	rjmp	.+12     	; 0x35f8 <LCD_vidSendInt+0xc8>
			LCD_vidWriteChar('0' + local_u8NewDigit);
			counter--;
		}

		while(counter !=0){
			LCD_vidWriteChar('0');
    35ec:	80 e3       	ldi	r24, 0x30	; 48
    35ee:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <LCD_vidWriteChar>
			counter--;
    35f2:	89 81       	ldd	r24, Y+1	; 0x01
    35f4:	81 50       	subi	r24, 0x01	; 1
    35f6:	89 83       	std	Y+1, r24	; 0x01
			local_u32NewNumber /= 10;
			LCD_vidWriteChar('0' + local_u8NewDigit);
			counter--;
		}

		while(counter !=0){
    35f8:	89 81       	ldd	r24, Y+1	; 0x01
    35fa:	88 23       	and	r24, r24
    35fc:	b9 f7       	brne	.-18     	; 0x35ec <LCD_vidSendInt+0xbc>
    35fe:	03 c0       	rjmp	.+6      	; 0x3606 <LCD_vidSendInt+0xd6>
			LCD_vidWriteChar('0');
			counter--;
		}
	}else{
		LCD_vidWriteChar('0');
    3600:	80 e3       	ldi	r24, 0x30	; 48
    3602:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <LCD_vidWriteChar>
	}

}
    3606:	26 96       	adiw	r28, 0x06	; 6
    3608:	0f b6       	in	r0, 0x3f	; 63
    360a:	f8 94       	cli
    360c:	de bf       	out	0x3e, r29	; 62
    360e:	0f be       	out	0x3f, r0	; 63
    3610:	cd bf       	out	0x3d, r28	; 61
    3612:	cf 91       	pop	r28
    3614:	df 91       	pop	r29
    3616:	08 95       	ret

00003618 <LCD_vidShiftDisplayRight>:

//function to shift right
void LCD_vidShiftDisplayRight(void){
    3618:	df 93       	push	r29
    361a:	cf 93       	push	r28
    361c:	0f 92       	push	r0
    361e:	cd b7       	in	r28, 0x3d	; 61
    3620:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ShiftDisplayRightCmd = SHIFT_ENTIRE_DISPLAY ;
    3622:	88 e1       	ldi	r24, 0x18	; 24
    3624:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(local_u8ShiftDisplayRightCmd, 2);
    3626:	89 81       	ldd	r24, Y+1	; 0x01
    3628:	84 60       	ori	r24, 0x04	; 4
    362a:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidSendCmd(local_u8ShiftDisplayRightCmd);
    362c:	89 81       	ldd	r24, Y+1	; 0x01
    362e:	0e 94 80 17 	call	0x2f00	; 0x2f00 <LCD_vidSendCmd>
}
    3632:	0f 90       	pop	r0
    3634:	cf 91       	pop	r28
    3636:	df 91       	pop	r29
    3638:	08 95       	ret

0000363a <LCD_vidShiftDisplayLeft>:

//function to shift left
void LCD_vidShiftDisplayLeft(void){
    363a:	df 93       	push	r29
    363c:	cf 93       	push	r28
    363e:	0f 92       	push	r0
    3640:	cd b7       	in	r28, 0x3d	; 61
    3642:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ShiftDisplayLeftCmd = SHIFT_ENTIRE_DISPLAY;
    3644:	88 e1       	ldi	r24, 0x18	; 24
    3646:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(local_u8ShiftDisplayLeftCmd, 2);
    3648:	89 81       	ldd	r24, Y+1	; 0x01
    364a:	8b 7f       	andi	r24, 0xFB	; 251
    364c:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidSendCmd(local_u8ShiftDisplayLeftCmd);
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	0e 94 80 17 	call	0x2f00	; 0x2f00 <LCD_vidSendCmd>
}
    3654:	0f 90       	pop	r0
    3656:	cf 91       	pop	r28
    3658:	df 91       	pop	r29
    365a:	08 95       	ret

0000365c <LCD_vidShiftCursorLeft>:

//function to shift the cursor left
void LCD_vidShiftCursorLeft(void){
    365c:	df 93       	push	r29
    365e:	cf 93       	push	r28
    3660:	0f 92       	push	r0
    3662:	cd b7       	in	r28, 0x3d	; 61
    3664:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ShiftCursorLeftCmd = SHIFT_CURSOR;
    3666:	80 e1       	ldi	r24, 0x10	; 16
    3668:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(local_u8ShiftCursorLeftCmd, 2);
    366a:	89 81       	ldd	r24, Y+1	; 0x01
    366c:	8b 7f       	andi	r24, 0xFB	; 251
    366e:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidSendCmd(local_u8ShiftCursorLeftCmd);
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	0e 94 80 17 	call	0x2f00	; 0x2f00 <LCD_vidSendCmd>
}
    3676:	0f 90       	pop	r0
    3678:	cf 91       	pop	r28
    367a:	df 91       	pop	r29
    367c:	08 95       	ret

0000367e <LCD_vidShiftCursorRight>:
//function to shift the cursor right
void LCD_vidShiftCursorRight(void){
    367e:	df 93       	push	r29
    3680:	cf 93       	push	r28
    3682:	0f 92       	push	r0
    3684:	cd b7       	in	r28, 0x3d	; 61
    3686:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ShiftCursorRightCmd = SHIFT_CURSOR;
    3688:	80 e1       	ldi	r24, 0x10	; 16
    368a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(local_u8ShiftCursorRightCmd, 2);
    368c:	89 81       	ldd	r24, Y+1	; 0x01
    368e:	84 60       	ori	r24, 0x04	; 4
    3690:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidSendCmd(local_u8ShiftCursorRightCmd);
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	0e 94 80 17 	call	0x2f00	; 0x2f00 <LCD_vidSendCmd>
}
    3698:	0f 90       	pop	r0
    369a:	cf 91       	pop	r28
    369c:	df 91       	pop	r29
    369e:	08 95       	ret

000036a0 <Car_Init>:
#include "../../MCAL/T2PWM_Driver_V1/TIMER2_Interface.h"

#include "../../MCAL/DIO_V2/DIO_init.h"

void Car_Init(void)
{
    36a0:	df 93       	push	r29
    36a2:	cf 93       	push	r28
    36a4:	cd b7       	in	r28, 0x3d	; 61
    36a6:	de b7       	in	r29, 0x3e	; 62

#if MOTOR_1_STATE == ENABLE

#if MOTOR_1_TIMER == TIMER0
	TIMER0_Init();
    36a8:	0e 94 93 08 	call	0x1126	; 0x1126 <TIMER0_Init>
	TIMER0_SetClockSource(TIMER2_CLOCK_SOURCE_t_SystemClock_With_256_Prescaler);
    36ac:	84 e0       	ldi	r24, 0x04	; 4
    36ae:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <TIMER0_SetClockSource>
	TIMER0_FastPWM_SetOCMode(TIMER2_FASTPWM_OCMODE_t_Clear_On_Compare_Match_And_Set_At_Top);
    36b2:	82 e0       	ldi	r24, 0x02	; 2
    36b4:	0e 94 ad 08 	call	0x115a	; 0x115a <TIMER0_FastPWM_SetOCMode>
	TIMER0_FastPWM_SetDutyCycle(90);
    36b8:	8a e5       	ldi	r24, 0x5A	; 90
    36ba:	0e 94 2c 09 	call	0x1258	; 0x1258 <TIMER0_FastPWM_SetDutyCycle>
	TIMER0_StartTimer();
    36be:	0e 94 fd 08 	call	0x11fa	; 0x11fa <TIMER0_StartTimer>
	TIMER2_StartTimer();
#else
#error	"Configuration Error: Wrong Timer Selection"
#endif

	DIO_u8setPinDir(MOTOR_1_PORT, MOTOR_1_FIRST_PIN, DIO_OUTPUT);
    36c2:	80 e0       	ldi	r24, 0x00	; 0
    36c4:	60 e0       	ldi	r22, 0x00	; 0
    36c6:	41 e0       	ldi	r20, 0x01	; 1
    36c8:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_u8setPinDir>
	TIMER0_SetClockSource(TIMER2_CLOCK_SOURCE_t_SystemClock_With_256_Prescaler);
	TIMER0_FastPWM_SetOCMode(TIMER2_FASTPWM_OCMODE_t_Clear_On_Compare_Match_And_Set_At_Top);
	TIMER0_FastPWM_SetDutyCycle(90);
	TIMER0_StartTimer();
#elif MOTOR_2_TIMER == TIMER2
	TIMER2_Init();
    36cc:	0e 94 ad 07 	call	0xf5a	; 0xf5a <TIMER2_Init>
	TIMER2_SetClockSource(TIMER2_CLOCK_SOURCE_t_SystemClock_With_256_Prescaler);
    36d0:	84 e0       	ldi	r24, 0x04	; 4
    36d2:	0e 94 fd 07 	call	0xffa	; 0xffa <TIMER2_SetClockSource>
	TIMER2_FastPWM_SetOCMode(TIMER2_FASTPWM_OCMODE_t_Clear_On_Compare_Match_And_Set_At_Top);
    36d6:	82 e0       	ldi	r24, 0x02	; 2
    36d8:	0e 94 c7 07 	call	0xf8e	; 0xf8e <TIMER2_FastPWM_SetOCMode>
	TIMER2_FastPWM_SetDutyCycle(90);
    36dc:	8a e5       	ldi	r24, 0x5A	; 90
    36de:	0e 94 46 08 	call	0x108c	; 0x108c <TIMER2_FastPWM_SetDutyCycle>
	TIMER2_StartTimer();
    36e2:	0e 94 17 08 	call	0x102e	; 0x102e <TIMER2_StartTimer>
#else
#error	"Configuration Error: Wrong Timer Selection"
#endif

	DIO_u8setPinDir(MOTOR_2_PORT, MOTOR_2_FIRST_PIN, DIO_OUTPUT);
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	60 e0       	ldi	r22, 0x00	; 0
    36ea:	41 e0       	ldi	r20, 0x01	; 1
    36ec:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_u8setPinDir>

#endif



}
    36f0:	cf 91       	pop	r28
    36f2:	df 91       	pop	r29
    36f4:	08 95       	ret

000036f6 <Car_Go_Forword>:

void Car_Go_Forword(void)
{
    36f6:	df 93       	push	r29
    36f8:	cf 93       	push	r28
    36fa:	cd b7       	in	r28, 0x3d	; 61
    36fc:	de b7       	in	r29, 0x3e	; 62
	DIO_u8setPinVal(MOTOR_1_PORT, MOTOR_1_FIRST_PIN, DIO_HIGH);
    36fe:	80 e0       	ldi	r24, 0x00	; 0
    3700:	60 e0       	ldi	r22, 0x00	; 0
    3702:	41 e0       	ldi	r20, 0x01	; 1
    3704:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
	//DIO_u8setPinVal(MOTOR_1_PORT, MOTOR_1_SECOND_PIN, DIO_HIGH);
	DIO_u8setPinVal(MOTOR_2_PORT, MOTOR_2_FIRST_PIN, DIO_LOW);
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	60 e0       	ldi	r22, 0x00	; 0
    370c:	40 e0       	ldi	r20, 0x00	; 0
    370e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
	//DIO_u8setPinVal(MOTOR_2_PORT, MOTOR_2_SECOND_PIN, DIO_LOW);
}
    3712:	cf 91       	pop	r28
    3714:	df 91       	pop	r29
    3716:	08 95       	ret

00003718 <Car_Go_Backword>:

void Car_Go_Backword(void)
{
    3718:	df 93       	push	r29
    371a:	cf 93       	push	r28
    371c:	cd b7       	in	r28, 0x3d	; 61
    371e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8setPinVal(MOTOR_1_PORT, MOTOR_1_FIRST_PIN, DIO_HIGH);
    3720:	80 e0       	ldi	r24, 0x00	; 0
    3722:	60 e0       	ldi	r22, 0x00	; 0
    3724:	41 e0       	ldi	r20, 0x01	; 1
    3726:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
	//DIO_u8setPinVal(MOTOR_1_PORT, MOTOR_1_SECOND_PIN, DIO_LOW);
	DIO_u8setPinVal(MOTOR_2_PORT, MOTOR_2_FIRST_PIN, DIO_LOW);
    372a:	81 e0       	ldi	r24, 0x01	; 1
    372c:	60 e0       	ldi	r22, 0x00	; 0
    372e:	40 e0       	ldi	r20, 0x00	; 0
    3730:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
	//DIO_u8setPinVal(MOTOR_2_PORT, MOTOR_2_SECOND_PIN, DIO_HIGH);
}
    3734:	cf 91       	pop	r28
    3736:	df 91       	pop	r29
    3738:	08 95       	ret

0000373a <Car_Go_Left>:
void Car_Go_Left(void)
{
    373a:	df 93       	push	r29
    373c:	cf 93       	push	r28
    373e:	cd b7       	in	r28, 0x3d	; 61
    3740:	de b7       	in	r29, 0x3e	; 62
	 Car_Set_Speed(MOTOR_1, 100);
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	64 e6       	ldi	r22, 0x64	; 100
    3746:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <Car_Set_Speed>
	DIO_u8setPinVal(MOTOR_1_PORT, MOTOR_1_FIRST_PIN, DIO_LOW);
    374a:	80 e0       	ldi	r24, 0x00	; 0
    374c:	60 e0       	ldi	r22, 0x00	; 0
    374e:	40 e0       	ldi	r20, 0x00	; 0
    3750:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
	//DIO_u8setPinVal(MOTOR_1_PORT, MOTOR_1_SECOND_PIN, DIO_HIGH);
	 Car_Set_Speed(MOTOR_2, 200);
    3754:	82 e0       	ldi	r24, 0x02	; 2
    3756:	68 ec       	ldi	r22, 0xC8	; 200
    3758:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <Car_Set_Speed>

	DIO_u8setPinVal(MOTOR_2_PORT, MOTOR_2_FIRST_PIN, DIO_HIGH);
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	60 e0       	ldi	r22, 0x00	; 0
    3760:	41 e0       	ldi	r20, 0x01	; 1
    3762:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
	//DIO_u8setPinVal(MOTOR_2_PORT, MOTOR_2_SECOND_PIN, DIO_LOW);
}
    3766:	cf 91       	pop	r28
    3768:	df 91       	pop	r29
    376a:	08 95       	ret

0000376c <Car_Go_Right>:
void Car_Go_Right(void)
{
    376c:	df 93       	push	r29
    376e:	cf 93       	push	r28
    3770:	cd b7       	in	r28, 0x3d	; 61
    3772:	de b7       	in	r29, 0x3e	; 62
	 Car_Set_Speed(MOTOR_1, 200);
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	68 ec       	ldi	r22, 0xC8	; 200
    3778:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <Car_Set_Speed>
	DIO_u8setPinVal(MOTOR_1_PORT, MOTOR_1_FIRST_PIN, DIO_HIGH);
    377c:	80 e0       	ldi	r24, 0x00	; 0
    377e:	60 e0       	ldi	r22, 0x00	; 0
    3780:	41 e0       	ldi	r20, 0x01	; 1
    3782:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
	//DIO_u8setPinVal(MOTOR_1_PORT, MOTOR_1_SECOND_PIN, DIO_LOW);
	 Car_Set_Speed(MOTOR_2, 100);
    3786:	82 e0       	ldi	r24, 0x02	; 2
    3788:	64 e6       	ldi	r22, 0x64	; 100
    378a:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <Car_Set_Speed>
	DIO_u8setPinVal(MOTOR_2_PORT, MOTOR_2_FIRST_PIN, DIO_LOW);
    378e:	81 e0       	ldi	r24, 0x01	; 1
    3790:	60 e0       	ldi	r22, 0x00	; 0
    3792:	40 e0       	ldi	r20, 0x00	; 0
    3794:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
	//DIO_u8setPinVal(MOTOR_2_PORT, MOTOR_2_SECOND_PIN, DIO_HIGH);
}
    3798:	cf 91       	pop	r28
    379a:	df 91       	pop	r29
    379c:	08 95       	ret

0000379e <Car_Stop>:
void Car_Stop(void)
{
    379e:	df 93       	push	r29
    37a0:	cf 93       	push	r28
    37a2:	cd b7       	in	r28, 0x3d	; 61
    37a4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8setPinVal(MOTOR_1_PORT, MOTOR_1_FIRST_PIN, DIO_LOW);
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	60 e0       	ldi	r22, 0x00	; 0
    37aa:	40 e0       	ldi	r20, 0x00	; 0
    37ac:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
	//DIO_u8setPinVal(MOTOR_1_PORT, MOTOR_1_SECOND_PIN, DIO_LOW);
	DIO_u8setPinVal(MOTOR_2_PORT, MOTOR_2_FIRST_PIN, DIO_LOW);
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	60 e0       	ldi	r22, 0x00	; 0
    37b4:	40 e0       	ldi	r20, 0x00	; 0
    37b6:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <DIO_u8setPinVal>
	//DIO_u8setPinVal(MOTOR_2_PORT, MOTOR_2_SECOND_PIN, DIO_LOW);

	Car_Set_Speed(MOTOR_1,0);
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	60 e0       	ldi	r22, 0x00	; 0
    37be:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <Car_Set_Speed>
	Car_Set_Speed(MOTOR_2,0);
    37c2:	82 e0       	ldi	r24, 0x02	; 2
    37c4:	60 e0       	ldi	r22, 0x00	; 0
    37c6:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <Car_Set_Speed>
}
    37ca:	cf 91       	pop	r28
    37cc:	df 91       	pop	r29
    37ce:	08 95       	ret

000037d0 <Car_Set_Speed>:
void Car_Set_Speed(u8 MOTOR, u8 Copy_u8SpeedValue)
{
    37d0:	df 93       	push	r29
    37d2:	cf 93       	push	r28
    37d4:	00 d0       	rcall	.+0      	; 0x37d6 <Car_Set_Speed+0x6>
    37d6:	00 d0       	rcall	.+0      	; 0x37d8 <Car_Set_Speed+0x8>
    37d8:	cd b7       	in	r28, 0x3d	; 61
    37da:	de b7       	in	r29, 0x3e	; 62
    37dc:	89 83       	std	Y+1, r24	; 0x01
    37de:	6a 83       	std	Y+2, r22	; 0x02
	switch (MOTOR) {
    37e0:	89 81       	ldd	r24, Y+1	; 0x01
    37e2:	28 2f       	mov	r18, r24
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	3c 83       	std	Y+4, r19	; 0x04
    37e8:	2b 83       	std	Y+3, r18	; 0x03
    37ea:	8b 81       	ldd	r24, Y+3	; 0x03
    37ec:	9c 81       	ldd	r25, Y+4	; 0x04
    37ee:	81 30       	cpi	r24, 0x01	; 1
    37f0:	91 05       	cpc	r25, r1
    37f2:	31 f0       	breq	.+12     	; 0x3800 <Car_Set_Speed+0x30>
    37f4:	2b 81       	ldd	r18, Y+3	; 0x03
    37f6:	3c 81       	ldd	r19, Y+4	; 0x04
    37f8:	22 30       	cpi	r18, 0x02	; 2
    37fa:	31 05       	cpc	r19, r1
    37fc:	29 f0       	breq	.+10     	; 0x3808 <Car_Set_Speed+0x38>
    37fe:	07 c0       	rjmp	.+14     	; 0x380e <Car_Set_Speed+0x3e>
	case MOTOR_1:
		if(MOTOR_1_TIMER == TIMER0)
		{
			TIMER0_FastPWM_SetDutyCycle(Copy_u8SpeedValue);
    3800:	8a 81       	ldd	r24, Y+2	; 0x02
    3802:	0e 94 2c 09 	call	0x1258	; 0x1258 <TIMER0_FastPWM_SetDutyCycle>
    3806:	03 c0       	rjmp	.+6      	; 0x380e <Car_Set_Speed+0x3e>
		if(MOTOR_2_TIMER == TIMER0)
		{
			TIMER0_FastPWM_SetDutyCycle(Copy_u8SpeedValue);
		}else if(MOTOR_2_TIMER == TIMER2)
		{
			TIMER2_FastPWM_SetDutyCycle(Copy_u8SpeedValue);
    3808:	8a 81       	ldd	r24, Y+2	; 0x02
    380a:	0e 94 46 08 	call	0x108c	; 0x108c <TIMER2_FastPWM_SetDutyCycle>
		}
		break;
	default:
		break;
	}
}
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	cf 91       	pop	r28
    3818:	df 91       	pop	r29
    381a:	08 95       	ret

0000381c <main>:
static u8 SpeedFrame[10];
static u8 USARTFrameReady = 0;
static u8 counter = 0;
volatile u8 Can_Flag =0 ;
int main()
{
    381c:	df 93       	push	r29
    381e:	cf 93       	push	r28
    3820:	cd b7       	in	r28, 0x3d	; 61
    3822:	de b7       	in	r29, 0x3e	; 62
    3824:	60 97       	sbiw	r28, 0x10	; 16
    3826:	0f b6       	in	r0, 0x3f	; 63
    3828:	f8 94       	cli
    382a:	de bf       	out	0x3e, r29	; 62
    382c:	0f be       	out	0x3f, r0	; 63
    382e:	cd bf       	out	0x3d, r28	; 61
	LED_e arr[] = {LED_e_1};
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	8a 83       	std	Y+2, r24	; 0x02
	LED_vidInit(arr, 1);
    3834:	ce 01       	movw	r24, r28
    3836:	02 96       	adiw	r24, 0x02	; 2
    3838:	61 e0       	ldi	r22, 0x01	; 1
    383a:	0e 94 c8 13 	call	0x2790	; 0x2790 <LED_vidInit>

	SpeedFrame[0] = 'V';
    383e:	86 e5       	ldi	r24, 0x56	; 86
    3840:	80 93 8e 00 	sts	0x008E, r24
	SpeedFrame[2] = '#';
    3844:	83 e2       	ldi	r24, 0x23	; 35
    3846:	80 93 90 00 	sts	0x0090, r24
	USART_Config_t Local_Usart_STR = {.usart_charSize_slct = USART_CharcterSize_t_8,
			.usart_circuit_enable = USART_Enable_t_TXAndRXEnable,
			.usart_parity = USART_ParityMode_t_Disable,
			.usart_speed_slct = USART_Speed_t_DoubleSpeed,
			.usart_stopBits_slct = USART_StopBitSlct_t_OneBit
	};
    384a:	9e 01       	movw	r18, r28
    384c:	2d 5f       	subi	r18, 0xFD	; 253
    384e:	3f 4f       	sbci	r19, 0xFF	; 255
    3850:	3d 87       	std	Y+13, r19	; 0x0d
    3852:	2c 87       	std	Y+12, r18	; 0x0c
    3854:	8b e6       	ldi	r24, 0x6B	; 107
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	9f 87       	std	Y+15, r25	; 0x0f
    385a:	8e 87       	std	Y+14, r24	; 0x0e
    385c:	95 e0       	ldi	r25, 0x05	; 5
    385e:	98 8b       	std	Y+16, r25	; 0x10
    3860:	ee 85       	ldd	r30, Y+14	; 0x0e
    3862:	ff 85       	ldd	r31, Y+15	; 0x0f
    3864:	00 80       	ld	r0, Z
    3866:	2e 85       	ldd	r18, Y+14	; 0x0e
    3868:	3f 85       	ldd	r19, Y+15	; 0x0f
    386a:	2f 5f       	subi	r18, 0xFF	; 255
    386c:	3f 4f       	sbci	r19, 0xFF	; 255
    386e:	3f 87       	std	Y+15, r19	; 0x0f
    3870:	2e 87       	std	Y+14, r18	; 0x0e
    3872:	ec 85       	ldd	r30, Y+12	; 0x0c
    3874:	fd 85       	ldd	r31, Y+13	; 0x0d
    3876:	00 82       	st	Z, r0
    3878:	2c 85       	ldd	r18, Y+12	; 0x0c
    387a:	3d 85       	ldd	r19, Y+13	; 0x0d
    387c:	2f 5f       	subi	r18, 0xFF	; 255
    387e:	3f 4f       	sbci	r19, 0xFF	; 255
    3880:	3d 87       	std	Y+13, r19	; 0x0d
    3882:	2c 87       	std	Y+12, r18	; 0x0c
    3884:	38 89       	ldd	r19, Y+16	; 0x10
    3886:	31 50       	subi	r19, 0x01	; 1
    3888:	38 8b       	std	Y+16, r19	; 0x10
    388a:	88 89       	ldd	r24, Y+16	; 0x10
    388c:	88 23       	and	r24, r24
    388e:	41 f7       	brne	.-48     	; 0x3860 <main+0x44>

	u8 Local_u8CharCounter = 0;
    3890:	19 82       	std	Y+1, r1	; 0x01
	EXTI_u8SetSource(EXTI_INT_0, EXTI_FALLING_EDGE);
    3892:	80 e0       	ldi	r24, 0x00	; 0
    3894:	62 e0       	ldi	r22, 0x02	; 2
    3896:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <EXTI_u8SetSource>
	EXTI_voidSet_INT0_Cbf(RX_CanMsg);
    389a:	85 e5       	ldi	r24, 0x55	; 85
    389c:	9d e1       	ldi	r25, 0x1D	; 29
    389e:	0e 94 ab 0c 	call	0x1956	; 0x1956 <EXTI_voidSet_INT0_Cbf>
	EXTI_u8EnablePIE(EXTI_INT_0);
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	0e 94 15 0c 	call	0x182a	; 0x182a <EXTI_u8EnablePIE>
	EXTI_voidEnableGIE();
    38a8:	0e 94 8f 0c 	call	0x191e	; 0x191e <EXTI_voidEnableGIE>

	USART_init(&Local_Usart_STR);
    38ac:	ce 01       	movw	r24, r28
    38ae:	03 96       	adiw	r24, 0x03	; 3
    38b0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <USART_init>
	USART_ReceiveData_interrupt(&Rx_Data_CallBack_USART);
    38b4:	81 e9       	ldi	r24, 0x91	; 145
    38b6:	9d e1       	ldi	r25, 0x1D	; 29
    38b8:	0e 94 47 07 	call	0xe8e	; 0xe8e <USART_ReceiveData_interrupt>

	Car_Init();
    38bc:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <Car_Init>

	LCD_vidInit();
    38c0:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_vidInit>

	HMCP2515_voidInitTransimiter();
    38c4:	0e 94 c0 11 	call	0x2380	; 0x2380 <HMCP2515_voidInitTransimiter>
	HMCP2515_voidRecievInit();
    38c8:	0e 94 c8 12 	call	0x2590	; 0x2590 <HMCP2515_voidRecievInit>
	LED_vidTurnOnLed(LED_e_1);
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	0e 94 37 14 	call	0x286e	; 0x286e <LED_vidTurnOnLed>

	//	DIO_u8setPinVal(DIO_PORT_A,DIO_PIN_6, DIO_HIGH);

	SpeedFrame[1] = Old_Speed;
    38d2:	80 91 6a 00 	lds	r24, 0x006A
    38d6:	80 93 8f 00 	sts	0x008F, r24
    38da:	0e c0       	rjmp	.+28     	; 0x38f8 <main+0xdc>
	while(SpeedFrame[Local_u8CharCounter] != '#')
	{
		USART_SendData(SpeedFrame[Local_u8CharCounter]);
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	88 2f       	mov	r24, r24
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	fc 01       	movw	r30, r24
    38e4:	e2 57       	subi	r30, 0x72	; 114
    38e6:	ff 4f       	sbci	r31, 0xFF	; 255
    38e8:	80 81       	ld	r24, Z
    38ea:	88 2f       	mov	r24, r24
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	0e 94 00 07 	call	0xe00	; 0xe00 <USART_SendData>
		Local_u8CharCounter++;
    38f2:	89 81       	ldd	r24, Y+1	; 0x01
    38f4:	8f 5f       	subi	r24, 0xFF	; 255
    38f6:	89 83       	std	Y+1, r24	; 0x01
	LED_vidTurnOnLed(LED_e_1);

	//	DIO_u8setPinVal(DIO_PORT_A,DIO_PIN_6, DIO_HIGH);

	SpeedFrame[1] = Old_Speed;
	while(SpeedFrame[Local_u8CharCounter] != '#')
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	88 2f       	mov	r24, r24
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	fc 01       	movw	r30, r24
    3900:	e2 57       	subi	r30, 0x72	; 114
    3902:	ff 4f       	sbci	r31, 0xFF	; 255
    3904:	80 81       	ld	r24, Z
    3906:	83 32       	cpi	r24, 0x23	; 35
    3908:	49 f7       	brne	.-46     	; 0x38dc <main+0xc0>
	{
		USART_SendData(SpeedFrame[Local_u8CharCounter]);
		Local_u8CharCounter++;

	}
	USART_SendData(SpeedFrame[Local_u8CharCounter]);
    390a:	89 81       	ldd	r24, Y+1	; 0x01
    390c:	88 2f       	mov	r24, r24
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	fc 01       	movw	r30, r24
    3912:	e2 57       	subi	r30, 0x72	; 114
    3914:	ff 4f       	sbci	r31, 0xFF	; 255
    3916:	80 81       	ld	r24, Z
    3918:	88 2f       	mov	r24, r24
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	0e 94 00 07 	call	0xe00	; 0xe00 <USART_SendData>

	while(1)
	{

		Local_u8CharCounter = 0;
    3920:	19 82       	std	Y+1, r1	; 0x01
		//		SpeedFrame[1] = Old_Speed;
		if(Can_Flag ==1 )
    3922:	80 91 7d 00 	lds	r24, 0x007D
    3926:	81 30       	cpi	r24, 0x01	; 1
    3928:	09 f0       	breq	.+2      	; 0x392c <main+0x110>
    392a:	9d c0       	rjmp	.+314    	; 0x3a66 <main+0x24a>
		{
			switch (App_CANRecMessage[0]) {
    392c:	80 91 7e 00 	lds	r24, 0x007E
    3930:	e8 2f       	mov	r30, r24
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	fb 87       	std	Y+11, r31	; 0x0b
    3936:	ea 87       	std	Y+10, r30	; 0x0a
    3938:	2a 85       	ldd	r18, Y+10	; 0x0a
    393a:	3b 85       	ldd	r19, Y+11	; 0x0b
    393c:	29 34       	cpi	r18, 0x49	; 73
    393e:	31 05       	cpc	r19, r1
    3940:	f1 f0       	breq	.+60     	; 0x397e <main+0x162>
    3942:	8a 85       	ldd	r24, Y+10	; 0x0a
    3944:	9b 85       	ldd	r25, Y+11	; 0x0b
    3946:	8a 34       	cpi	r24, 0x4A	; 74
    3948:	91 05       	cpc	r25, r1
    394a:	6c f4       	brge	.+26     	; 0x3966 <main+0x14a>
    394c:	ea 85       	ldd	r30, Y+10	; 0x0a
    394e:	fb 85       	ldd	r31, Y+11	; 0x0b
    3950:	e2 34       	cpi	r30, 0x42	; 66
    3952:	f1 05       	cpc	r31, r1
    3954:	09 f4       	brne	.+2      	; 0x3958 <main+0x13c>
    3956:	71 c0       	rjmp	.+226    	; 0x3a3a <main+0x21e>
    3958:	2a 85       	ldd	r18, Y+10	; 0x0a
    395a:	3b 85       	ldd	r19, Y+11	; 0x0b
    395c:	24 34       	cpi	r18, 0x44	; 68
    395e:	31 05       	cpc	r19, r1
    3960:	09 f4       	brne	.+2      	; 0x3964 <main+0x148>
    3962:	6b c0       	rjmp	.+214    	; 0x3a3a <main+0x21e>
    3964:	7e c0       	rjmp	.+252    	; 0x3a62 <main+0x246>
    3966:	8a 85       	ldd	r24, Y+10	; 0x0a
    3968:	9b 85       	ldd	r25, Y+11	; 0x0b
    396a:	83 35       	cpi	r24, 0x53	; 83
    396c:	91 05       	cpc	r25, r1
    396e:	09 f4       	brne	.+2      	; 0x3972 <main+0x156>
    3970:	64 c0       	rjmp	.+200    	; 0x3a3a <main+0x21e>
    3972:	ea 85       	ldd	r30, Y+10	; 0x0a
    3974:	fb 85       	ldd	r31, Y+11	; 0x0b
    3976:	e2 37       	cpi	r30, 0x72	; 114
    3978:	f1 05       	cpc	r31, r1
    397a:	b1 f1       	breq	.+108    	; 0x39e8 <main+0x1cc>
    397c:	72 c0       	rjmp	.+228    	; 0x3a62 <main+0x246>
			case 'I':
				switch(App_CANRecMessage[1]){
    397e:	80 91 7f 00 	lds	r24, 0x007F
    3982:	28 2f       	mov	r18, r24
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	39 87       	std	Y+9, r19	; 0x09
    3988:	28 87       	std	Y+8, r18	; 0x08
    398a:	88 85       	ldd	r24, Y+8	; 0x08
    398c:	99 85       	ldd	r25, Y+9	; 0x09
    398e:	8c 36       	cpi	r24, 0x6C	; 108
    3990:	91 05       	cpc	r25, r1
    3992:	09 f1       	breq	.+66     	; 0x39d6 <main+0x1ba>
    3994:	e8 85       	ldd	r30, Y+8	; 0x08
    3996:	f9 85       	ldd	r31, Y+9	; 0x09
    3998:	ed 36       	cpi	r30, 0x6D	; 109
    399a:	f1 05       	cpc	r31, r1
    399c:	5c f4       	brge	.+22     	; 0x39b4 <main+0x198>
    399e:	28 85       	ldd	r18, Y+8	; 0x08
    39a0:	39 85       	ldd	r19, Y+9	; 0x09
    39a2:	22 36       	cpi	r18, 0x62	; 98
    39a4:	31 05       	cpc	r19, r1
    39a6:	a1 f0       	breq	.+40     	; 0x39d0 <main+0x1b4>
    39a8:	88 85       	ldd	r24, Y+8	; 0x08
    39aa:	99 85       	ldd	r25, Y+9	; 0x09
    39ac:	86 36       	cpi	r24, 0x66	; 102
    39ae:	91 05       	cpc	r25, r1
    39b0:	61 f0       	breq	.+24     	; 0x39ca <main+0x1ae>
    39b2:	57 c0       	rjmp	.+174    	; 0x3a62 <main+0x246>
    39b4:	e8 85       	ldd	r30, Y+8	; 0x08
    39b6:	f9 85       	ldd	r31, Y+9	; 0x09
    39b8:	e2 37       	cpi	r30, 0x72	; 114
    39ba:	f1 05       	cpc	r31, r1
    39bc:	79 f0       	breq	.+30     	; 0x39dc <main+0x1c0>
    39be:	28 85       	ldd	r18, Y+8	; 0x08
    39c0:	39 85       	ldd	r19, Y+9	; 0x09
    39c2:	23 37       	cpi	r18, 0x73	; 115
    39c4:	31 05       	cpc	r19, r1
    39c6:	69 f0       	breq	.+26     	; 0x39e2 <main+0x1c6>
    39c8:	4c c0       	rjmp	.+152    	; 0x3a62 <main+0x246>
				case 'f':
					Car_Go_Forword();
    39ca:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <Car_Go_Forword>
    39ce:	49 c0       	rjmp	.+146    	; 0x3a62 <main+0x246>
					//DIO_u8setPinVal(DIO_PORT_A ,DIO_PIN_1 ,DIO_HIGH);
					break;

				case 'b':
					Car_Go_Backword();
    39d0:	0e 94 8c 1b 	call	0x3718	; 0x3718 <Car_Go_Backword>
    39d4:	46 c0       	rjmp	.+140    	; 0x3a62 <main+0x246>
					//DIO_u8setPinVal(DIO_PORT_A ,DIO_PIN_2 ,DIO_HIGH);
					break;
				case 'l':
					Car_Go_Left();
    39d6:	0e 94 9d 1b 	call	0x373a	; 0x373a <Car_Go_Left>
    39da:	43 c0       	rjmp	.+134    	; 0x3a62 <main+0x246>
					//DIO_u8setPinVal(DIO_PORT_A ,DIO_PIN_3 ,DIO_HIGH);
					break;
				case 'r':
					Car_Go_Right();
    39dc:	0e 94 b6 1b 	call	0x376c	; 0x376c <Car_Go_Right>
    39e0:	40 c0       	rjmp	.+128    	; 0x3a62 <main+0x246>
					//DIO_u8setPinVal(DIO_PORT_A ,DIO_PIN_4 ,DIO_HIGH);
					break;
				case 's':
					Car_Stop();
    39e2:	0e 94 cf 1b 	call	0x379e	; 0x379e <Car_Stop>
    39e6:	3d c0       	rjmp	.+122    	; 0x3a62 <main+0x246>
				default:
					break;
				}
				break;
				case 'r':
					if(App_CANRecMessage[1] > App_CANRecMessage[2])
    39e8:	90 91 7f 00 	lds	r25, 0x007F
    39ec:	80 91 80 00 	lds	r24, 0x0080
    39f0:	89 17       	cp	r24, r25
    39f2:	18 f4       	brcc	.+6      	; 0x39fa <main+0x1de>
					{
						Car_Go_Right();
    39f4:	0e 94 b6 1b 	call	0x376c	; 0x376c <Car_Go_Right>
    39f8:	34 c0       	rjmp	.+104    	; 0x3a62 <main+0x246>
					}else if(App_CANRecMessage[1] < App_CANRecMessage[2])
    39fa:	90 91 7f 00 	lds	r25, 0x007F
    39fe:	80 91 80 00 	lds	r24, 0x0080
    3a02:	98 17       	cp	r25, r24
    3a04:	18 f4       	brcc	.+6      	; 0x3a0c <main+0x1f0>
					{
						Car_Go_Left();
    3a06:	0e 94 9d 1b 	call	0x373a	; 0x373a <Car_Go_Left>
    3a0a:	2b c0       	rjmp	.+86     	; 0x3a62 <main+0x246>
					}else if(App_CANRecMessage[1] == App_CANRecMessage[2]){
    3a0c:	90 91 7f 00 	lds	r25, 0x007F
    3a10:	80 91 80 00 	lds	r24, 0x0080
    3a14:	98 17       	cp	r25, r24
    3a16:	29 f5       	brne	.+74     	; 0x3a62 <main+0x246>
						Car_Go_Forword();
    3a18:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <Car_Go_Forword>
    3a1c:	22 c0       	rjmp	.+68     	; 0x3a62 <main+0x246>
				case 'S':
				case 'B':

					while(App_CANRecMessage[Local_u8CharCounter] != '#')
					{
						USART_SendData(App_CANRecMessage[Local_u8CharCounter]);
    3a1e:	89 81       	ldd	r24, Y+1	; 0x01
    3a20:	88 2f       	mov	r24, r24
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	fc 01       	movw	r30, r24
    3a26:	e2 58       	subi	r30, 0x82	; 130
    3a28:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2a:	80 81       	ld	r24, Z
    3a2c:	88 2f       	mov	r24, r24
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	0e 94 00 07 	call	0xe00	; 0xe00 <USART_SendData>
						Local_u8CharCounter++;
    3a34:	89 81       	ldd	r24, Y+1	; 0x01
    3a36:	8f 5f       	subi	r24, 0xFF	; 255
    3a38:	89 83       	std	Y+1, r24	; 0x01
					break;
				case 'D':
				case 'S':
				case 'B':

					while(App_CANRecMessage[Local_u8CharCounter] != '#')
    3a3a:	89 81       	ldd	r24, Y+1	; 0x01
    3a3c:	88 2f       	mov	r24, r24
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	fc 01       	movw	r30, r24
    3a42:	e2 58       	subi	r30, 0x82	; 130
    3a44:	ff 4f       	sbci	r31, 0xFF	; 255
    3a46:	80 81       	ld	r24, Z
    3a48:	83 32       	cpi	r24, 0x23	; 35
    3a4a:	49 f7       	brne	.-46     	; 0x3a1e <main+0x202>
					{
						USART_SendData(App_CANRecMessage[Local_u8CharCounter]);
						Local_u8CharCounter++;
					}
					USART_SendData(App_CANRecMessage[Local_u8CharCounter]);
    3a4c:	89 81       	ldd	r24, Y+1	; 0x01
    3a4e:	88 2f       	mov	r24, r24
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	fc 01       	movw	r30, r24
    3a54:	e2 58       	subi	r30, 0x82	; 130
    3a56:	ff 4f       	sbci	r31, 0xFF	; 255
    3a58:	80 81       	ld	r24, Z
    3a5a:	88 2f       	mov	r24, r24
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	0e 94 00 07 	call	0xe00	; 0xe00 <USART_SendData>
					break;

				default:
					break;
			}
			Can_Flag =0 ;
    3a62:	10 92 7d 00 	sts	0x007D, r1
		}

		if(USARTFrameReady == 1)
    3a66:	80 91 7b 00 	lds	r24, 0x007B
    3a6a:	81 30       	cpi	r24, 0x01	; 1
    3a6c:	09 f0       	breq	.+2      	; 0x3a70 <main+0x254>
    3a6e:	58 cf       	rjmp	.-336    	; 0x3920 <main+0x104>
		{
//			u32 Local_u32Speed = 0;
			if(SpeedFrame[0] == 'V')
    3a70:	80 91 8e 00 	lds	r24, 0x008E
    3a74:	86 35       	cpi	r24, 0x56	; 86
    3a76:	a1 f4       	brne	.+40     	; 0x3aa0 <main+0x284>
			{

//				Local_u32Speed =ExtractDataFromFrame(&SpeedFrame);
				Car_Set_Speed(MOTOR_1, (u8)SpeedFrame[1]);
    3a78:	90 91 8f 00 	lds	r25, 0x008F
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	69 2f       	mov	r22, r25
    3a80:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <Car_Set_Speed>
				Car_Set_Speed(MOTOR_2, (u8)SpeedFrame[1]);
    3a84:	90 91 8f 00 	lds	r25, 0x008F
    3a88:	82 e0       	ldi	r24, 0x02	; 2
    3a8a:	69 2f       	mov	r22, r25
    3a8c:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <Car_Set_Speed>

				LCD_vidClear();
    3a90:	0e 94 54 19 	call	0x32a8	; 0x32a8 <LCD_vidClear>
				LCD_vidSendInt(SpeedFrame[1]);
    3a94:	80 91 8f 00 	lds	r24, 0x008F
    3a98:	88 2f       	mov	r24, r24
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	0e 94 98 1a 	call	0x3530	; 0x3530 <LCD_vidSendInt>
			}
			counter = 0;
    3aa0:	10 92 7c 00 	sts	0x007C, r1
			USARTFrameReady = 0;
    3aa4:	10 92 7b 00 	sts	0x007B, r1
    3aa8:	3b cf       	rjmp	.-394    	; 0x3920 <main+0x104>

00003aaa <RX_CanMsg>:
		}
	}
}

void RX_CanMsg(void)
{
    3aaa:	df 93       	push	r29
    3aac:	cf 93       	push	r28
    3aae:	0f 92       	push	r0
    3ab0:	cd b7       	in	r28, 0x3d	; 61
    3ab2:	de b7       	in	r29, 0x3e	; 62
	HMCP2515_voidRecieveMess(RXB0CTRL) ;
    3ab4:	80 e6       	ldi	r24, 0x60	; 96
    3ab6:	0e 94 07 13 	call	0x260e	; 0x260e <HMCP2515_voidRecieveMess>
	u8 i = 0;
    3aba:	19 82       	std	Y+1, r1	; 0x01
    3abc:	12 c0       	rjmp	.+36     	; 0x3ae2 <RX_CanMsg+0x38>
	while(REC_Message[6+i] != '#')
	{
		App_CANRecMessage[i] = REC_Message[6+i] ;
    3abe:	89 81       	ldd	r24, Y+1	; 0x01
    3ac0:	28 2f       	mov	r18, r24
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	89 81       	ldd	r24, Y+1	; 0x01
    3ac6:	88 2f       	mov	r24, r24
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	06 96       	adiw	r24, 0x06	; 6
    3acc:	fc 01       	movw	r30, r24
    3ace:	e8 56       	subi	r30, 0x68	; 104
    3ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad2:	80 81       	ld	r24, Z
    3ad4:	f9 01       	movw	r30, r18
    3ad6:	e2 58       	subi	r30, 0x82	; 130
    3ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ada:	80 83       	st	Z, r24
		i++;
    3adc:	89 81       	ldd	r24, Y+1	; 0x01
    3ade:	8f 5f       	subi	r24, 0xFF	; 255
    3ae0:	89 83       	std	Y+1, r24	; 0x01

void RX_CanMsg(void)
{
	HMCP2515_voidRecieveMess(RXB0CTRL) ;
	u8 i = 0;
	while(REC_Message[6+i] != '#')
    3ae2:	89 81       	ldd	r24, Y+1	; 0x01
    3ae4:	88 2f       	mov	r24, r24
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	06 96       	adiw	r24, 0x06	; 6
    3aea:	fc 01       	movw	r30, r24
    3aec:	e8 56       	subi	r30, 0x68	; 104
    3aee:	ff 4f       	sbci	r31, 0xFF	; 255
    3af0:	80 81       	ld	r24, Z
    3af2:	83 32       	cpi	r24, 0x23	; 35
    3af4:	21 f7       	brne	.-56     	; 0x3abe <RX_CanMsg+0x14>
	{
		App_CANRecMessage[i] = REC_Message[6+i] ;
		i++;
	}
	App_CANRecMessage[i] = REC_Message[6+i];
    3af6:	89 81       	ldd	r24, Y+1	; 0x01
    3af8:	28 2f       	mov	r18, r24
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	89 81       	ldd	r24, Y+1	; 0x01
    3afe:	88 2f       	mov	r24, r24
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	06 96       	adiw	r24, 0x06	; 6
    3b04:	fc 01       	movw	r30, r24
    3b06:	e8 56       	subi	r30, 0x68	; 104
    3b08:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0a:	80 81       	ld	r24, Z
    3b0c:	f9 01       	movw	r30, r18
    3b0e:	e2 58       	subi	r30, 0x82	; 130
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	80 83       	st	Z, r24
	Can_Flag =1 ;
    3b14:	81 e0       	ldi	r24, 0x01	; 1
    3b16:	80 93 7d 00 	sts	0x007D, r24

}
    3b1a:	0f 90       	pop	r0
    3b1c:	cf 91       	pop	r28
    3b1e:	df 91       	pop	r29
    3b20:	08 95       	ret

00003b22 <Rx_Data_CallBack_USART>:

void Rx_Data_CallBack_USART(u8 Copy_u8NewSpeed)
{
    3b22:	df 93       	push	r29
    3b24:	cf 93       	push	r28
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
    3b2a:	6d 97       	sbiw	r28, 0x1d	; 29
    3b2c:	0f b6       	in	r0, 0x3f	; 63
    3b2e:	f8 94       	cli
    3b30:	de bf       	out	0x3e, r29	; 62
    3b32:	0f be       	out	0x3f, r0	; 63
    3b34:	cd bf       	out	0x3d, r28	; 61
    3b36:	8d 8f       	std	Y+29, r24	; 0x1d

	if(Copy_u8NewSpeed != '#')
    3b38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b3a:	83 32       	cpi	r24, 0x23	; 35
    3b3c:	51 f0       	breq	.+20     	; 0x3b52 <Rx_Data_CallBack_USART+0x30>
	{
		SpeedFrame[counter] = Copy_u8NewSpeed;
    3b3e:	80 91 7c 00 	lds	r24, 0x007C
    3b42:	88 2f       	mov	r24, r24
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	fc 01       	movw	r30, r24
    3b48:	e2 57       	subi	r30, 0x72	; 114
    3b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b4e:	80 83       	st	Z, r24
    3b50:	f6 c0       	rjmp	.+492    	; 0x3d3e <Rx_Data_CallBack_USART+0x21c>
	}else{
		LED_vidTurnOnLed(LED_e_1);
    3b52:	81 e0       	ldi	r24, 0x01	; 1
    3b54:	0e 94 37 14 	call	0x286e	; 0x286e <LED_vidTurnOnLed>
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	a8 e4       	ldi	r26, 0x48	; 72
    3b5e:	b3 e4       	ldi	r27, 0x43	; 67
    3b60:	89 8f       	std	Y+25, r24	; 0x19
    3b62:	9a 8f       	std	Y+26, r25	; 0x1a
    3b64:	ab 8f       	std	Y+27, r26	; 0x1b
    3b66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b68:	69 8d       	ldd	r22, Y+25	; 0x19
    3b6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	4a ef       	ldi	r20, 0xFA	; 250
    3b76:	54 e4       	ldi	r21, 0x44	; 68
    3b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	8d 8b       	std	Y+21, r24	; 0x15
    3b82:	9e 8b       	std	Y+22, r25	; 0x16
    3b84:	af 8b       	std	Y+23, r26	; 0x17
    3b86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b88:	6d 89       	ldd	r22, Y+21	; 0x15
    3b8a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b8c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b8e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	40 e8       	ldi	r20, 0x80	; 128
    3b96:	5f e3       	ldi	r21, 0x3F	; 63
    3b98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b9c:	88 23       	and	r24, r24
    3b9e:	2c f4       	brge	.+10     	; 0x3baa <Rx_Data_CallBack_USART+0x88>
		__ticks = 1;
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	9c 8b       	std	Y+20, r25	; 0x14
    3ba6:	8b 8b       	std	Y+19, r24	; 0x13
    3ba8:	3f c0       	rjmp	.+126    	; 0x3c28 <Rx_Data_CallBack_USART+0x106>
	else if (__tmp > 65535)
    3baa:	6d 89       	ldd	r22, Y+21	; 0x15
    3bac:	7e 89       	ldd	r23, Y+22	; 0x16
    3bae:	8f 89       	ldd	r24, Y+23	; 0x17
    3bb0:	98 8d       	ldd	r25, Y+24	; 0x18
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	3f ef       	ldi	r19, 0xFF	; 255
    3bb6:	4f e7       	ldi	r20, 0x7F	; 127
    3bb8:	57 e4       	ldi	r21, 0x47	; 71
    3bba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bbe:	18 16       	cp	r1, r24
    3bc0:	4c f5       	brge	.+82     	; 0x3c14 <Rx_Data_CallBack_USART+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bc2:	69 8d       	ldd	r22, Y+25	; 0x19
    3bc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	40 e2       	ldi	r20, 0x20	; 32
    3bd0:	51 e4       	ldi	r21, 0x41	; 65
    3bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	cb 01       	movw	r24, r22
    3bda:	bc 01       	movw	r22, r24
    3bdc:	cd 01       	movw	r24, r26
    3bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be2:	dc 01       	movw	r26, r24
    3be4:	cb 01       	movw	r24, r22
    3be6:	9c 8b       	std	Y+20, r25	; 0x14
    3be8:	8b 8b       	std	Y+19, r24	; 0x13
    3bea:	0f c0       	rjmp	.+30     	; 0x3c0a <Rx_Data_CallBack_USART+0xe8>
    3bec:	88 ec       	ldi	r24, 0xC8	; 200
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	9a 8b       	std	Y+18, r25	; 0x12
    3bf2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3bf4:	89 89       	ldd	r24, Y+17	; 0x11
    3bf6:	9a 89       	ldd	r25, Y+18	; 0x12
    3bf8:	01 97       	sbiw	r24, 0x01	; 1
    3bfa:	f1 f7       	brne	.-4      	; 0x3bf8 <Rx_Data_CallBack_USART+0xd6>
    3bfc:	9a 8b       	std	Y+18, r25	; 0x12
    3bfe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c00:	8b 89       	ldd	r24, Y+19	; 0x13
    3c02:	9c 89       	ldd	r25, Y+20	; 0x14
    3c04:	01 97       	sbiw	r24, 0x01	; 1
    3c06:	9c 8b       	std	Y+20, r25	; 0x14
    3c08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c0a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c0c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c0e:	00 97       	sbiw	r24, 0x00	; 0
    3c10:	69 f7       	brne	.-38     	; 0x3bec <Rx_Data_CallBack_USART+0xca>
    3c12:	14 c0       	rjmp	.+40     	; 0x3c3c <Rx_Data_CallBack_USART+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c14:	6d 89       	ldd	r22, Y+21	; 0x15
    3c16:	7e 89       	ldd	r23, Y+22	; 0x16
    3c18:	8f 89       	ldd	r24, Y+23	; 0x17
    3c1a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c20:	dc 01       	movw	r26, r24
    3c22:	cb 01       	movw	r24, r22
    3c24:	9c 8b       	std	Y+20, r25	; 0x14
    3c26:	8b 8b       	std	Y+19, r24	; 0x13
    3c28:	8b 89       	ldd	r24, Y+19	; 0x13
    3c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c2c:	98 8b       	std	Y+16, r25	; 0x10
    3c2e:	8f 87       	std	Y+15, r24	; 0x0f
    3c30:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c32:	98 89       	ldd	r25, Y+16	; 0x10
    3c34:	01 97       	sbiw	r24, 0x01	; 1
    3c36:	f1 f7       	brne	.-4      	; 0x3c34 <Rx_Data_CallBack_USART+0x112>
    3c38:	98 8b       	std	Y+16, r25	; 0x10
    3c3a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		LED_vidTurnOffLed(LED_e_1);
    3c3c:	81 e0       	ldi	r24, 0x01	; 1
    3c3e:	0e 94 57 14 	call	0x28ae	; 0x28ae <LED_vidTurnOffLed>
    3c42:	80 e0       	ldi	r24, 0x00	; 0
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	a8 e4       	ldi	r26, 0x48	; 72
    3c48:	b3 e4       	ldi	r27, 0x43	; 67
    3c4a:	8b 87       	std	Y+11, r24	; 0x0b
    3c4c:	9c 87       	std	Y+12, r25	; 0x0c
    3c4e:	ad 87       	std	Y+13, r26	; 0x0d
    3c50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c52:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c54:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c58:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	4a ef       	ldi	r20, 0xFA	; 250
    3c60:	54 e4       	ldi	r21, 0x44	; 68
    3c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c66:	dc 01       	movw	r26, r24
    3c68:	cb 01       	movw	r24, r22
    3c6a:	8f 83       	std	Y+7, r24	; 0x07
    3c6c:	98 87       	std	Y+8, r25	; 0x08
    3c6e:	a9 87       	std	Y+9, r26	; 0x09
    3c70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c72:	6f 81       	ldd	r22, Y+7	; 0x07
    3c74:	78 85       	ldd	r23, Y+8	; 0x08
    3c76:	89 85       	ldd	r24, Y+9	; 0x09
    3c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c7a:	20 e0       	ldi	r18, 0x00	; 0
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	40 e8       	ldi	r20, 0x80	; 128
    3c80:	5f e3       	ldi	r21, 0x3F	; 63
    3c82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c86:	88 23       	and	r24, r24
    3c88:	2c f4       	brge	.+10     	; 0x3c94 <Rx_Data_CallBack_USART+0x172>
		__ticks = 1;
    3c8a:	81 e0       	ldi	r24, 0x01	; 1
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	9e 83       	std	Y+6, r25	; 0x06
    3c90:	8d 83       	std	Y+5, r24	; 0x05
    3c92:	3f c0       	rjmp	.+126    	; 0x3d12 <Rx_Data_CallBack_USART+0x1f0>
	else if (__tmp > 65535)
    3c94:	6f 81       	ldd	r22, Y+7	; 0x07
    3c96:	78 85       	ldd	r23, Y+8	; 0x08
    3c98:	89 85       	ldd	r24, Y+9	; 0x09
    3c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c9c:	20 e0       	ldi	r18, 0x00	; 0
    3c9e:	3f ef       	ldi	r19, 0xFF	; 255
    3ca0:	4f e7       	ldi	r20, 0x7F	; 127
    3ca2:	57 e4       	ldi	r21, 0x47	; 71
    3ca4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ca8:	18 16       	cp	r1, r24
    3caa:	4c f5       	brge	.+82     	; 0x3cfe <Rx_Data_CallBack_USART+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	40 e2       	ldi	r20, 0x20	; 32
    3cba:	51 e4       	ldi	r21, 0x41	; 65
    3cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	bc 01       	movw	r22, r24
    3cc6:	cd 01       	movw	r24, r26
    3cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ccc:	dc 01       	movw	r26, r24
    3cce:	cb 01       	movw	r24, r22
    3cd0:	9e 83       	std	Y+6, r25	; 0x06
    3cd2:	8d 83       	std	Y+5, r24	; 0x05
    3cd4:	0f c0       	rjmp	.+30     	; 0x3cf4 <Rx_Data_CallBack_USART+0x1d2>
    3cd6:	88 ec       	ldi	r24, 0xC8	; 200
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	9c 83       	std	Y+4, r25	; 0x04
    3cdc:	8b 83       	std	Y+3, r24	; 0x03
    3cde:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce2:	01 97       	sbiw	r24, 0x01	; 1
    3ce4:	f1 f7       	brne	.-4      	; 0x3ce2 <Rx_Data_CallBack_USART+0x1c0>
    3ce6:	9c 83       	std	Y+4, r25	; 0x04
    3ce8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cea:	8d 81       	ldd	r24, Y+5	; 0x05
    3cec:	9e 81       	ldd	r25, Y+6	; 0x06
    3cee:	01 97       	sbiw	r24, 0x01	; 1
    3cf0:	9e 83       	std	Y+6, r25	; 0x06
    3cf2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cf8:	00 97       	sbiw	r24, 0x00	; 0
    3cfa:	69 f7       	brne	.-38     	; 0x3cd6 <Rx_Data_CallBack_USART+0x1b4>
    3cfc:	14 c0       	rjmp	.+40     	; 0x3d26 <Rx_Data_CallBack_USART+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    3d00:	78 85       	ldd	r23, Y+8	; 0x08
    3d02:	89 85       	ldd	r24, Y+9	; 0x09
    3d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	cb 01       	movw	r24, r22
    3d0e:	9e 83       	std	Y+6, r25	; 0x06
    3d10:	8d 83       	std	Y+5, r24	; 0x05
    3d12:	8d 81       	ldd	r24, Y+5	; 0x05
    3d14:	9e 81       	ldd	r25, Y+6	; 0x06
    3d16:	9a 83       	std	Y+2, r25	; 0x02
    3d18:	89 83       	std	Y+1, r24	; 0x01
    3d1a:	89 81       	ldd	r24, Y+1	; 0x01
    3d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d1e:	01 97       	sbiw	r24, 0x01	; 1
    3d20:	f1 f7       	brne	.-4      	; 0x3d1e <Rx_Data_CallBack_USART+0x1fc>
    3d22:	9a 83       	std	Y+2, r25	; 0x02
    3d24:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		SpeedFrame[counter] = Copy_u8NewSpeed;
    3d26:	80 91 7c 00 	lds	r24, 0x007C
    3d2a:	88 2f       	mov	r24, r24
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	fc 01       	movw	r30, r24
    3d30:	e2 57       	subi	r30, 0x72	; 114
    3d32:	ff 4f       	sbci	r31, 0xFF	; 255
    3d34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d36:	80 83       	st	Z, r24
		USARTFrameReady = 1;
    3d38:	81 e0       	ldi	r24, 0x01	; 1
    3d3a:	80 93 7b 00 	sts	0x007B, r24
	}
	counter++;
    3d3e:	80 91 7c 00 	lds	r24, 0x007C
    3d42:	8f 5f       	subi	r24, 0xFF	; 255
    3d44:	80 93 7c 00 	sts	0x007C, r24
	//		Old_Speed = Copy_u8NewSpeed;
	//	}
	//	else{
	//
	//	}
}
    3d48:	6d 96       	adiw	r28, 0x1d	; 29
    3d4a:	0f b6       	in	r0, 0x3f	; 63
    3d4c:	f8 94       	cli
    3d4e:	de bf       	out	0x3e, r29	; 62
    3d50:	0f be       	out	0x3f, r0	; 63
    3d52:	cd bf       	out	0x3d, r28	; 61
    3d54:	cf 91       	pop	r28
    3d56:	df 91       	pop	r29
    3d58:	08 95       	ret

00003d5a <ExtractDataFromFrame>:

static u32 ExtractDataFromFrame(u8 * Copy_Pu8String){
    3d5a:	df 93       	push	r29
    3d5c:	cf 93       	push	r28
    3d5e:	00 d0       	rcall	.+0      	; 0x3d60 <ExtractDataFromFrame+0x6>
    3d60:	00 d0       	rcall	.+0      	; 0x3d62 <ExtractDataFromFrame+0x8>
    3d62:	0f 92       	push	r0
    3d64:	cd b7       	in	r28, 0x3d	; 61
    3d66:	de b7       	in	r29, 0x3e	; 62
    3d68:	9d 83       	std	Y+5, r25	; 0x05
    3d6a:	8c 83       	std	Y+4, r24	; 0x04

	u8 Local_u8Index = 1;
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	8b 83       	std	Y+3, r24	; 0x03
	u32 Local_u32Int_Speed = 0;
    3d70:	1a 82       	std	Y+2, r1	; 0x02
    3d72:	19 82       	std	Y+1, r1	; 0x01
    3d74:	23 c0       	rjmp	.+70     	; 0x3dbc <ExtractDataFromFrame+0x62>
	while(Copy_Pu8String[Local_u8Index] != '#')
	{
		Local_u32Int_Speed *= 10;
    3d76:	89 81       	ldd	r24, Y+1	; 0x01
    3d78:	9a 81       	ldd	r25, Y+2	; 0x02
    3d7a:	9c 01       	movw	r18, r24
    3d7c:	22 0f       	add	r18, r18
    3d7e:	33 1f       	adc	r19, r19
    3d80:	c9 01       	movw	r24, r18
    3d82:	88 0f       	add	r24, r24
    3d84:	99 1f       	adc	r25, r25
    3d86:	88 0f       	add	r24, r24
    3d88:	99 1f       	adc	r25, r25
    3d8a:	82 0f       	add	r24, r18
    3d8c:	93 1f       	adc	r25, r19
    3d8e:	9a 83       	std	Y+2, r25	; 0x02
    3d90:	89 83       	std	Y+1, r24	; 0x01
		Local_u32Int_Speed += (Copy_Pu8String[Local_u8Index] - '0');
    3d92:	8b 81       	ldd	r24, Y+3	; 0x03
    3d94:	28 2f       	mov	r18, r24
    3d96:	30 e0       	ldi	r19, 0x00	; 0
    3d98:	8c 81       	ldd	r24, Y+4	; 0x04
    3d9a:	9d 81       	ldd	r25, Y+5	; 0x05
    3d9c:	fc 01       	movw	r30, r24
    3d9e:	e2 0f       	add	r30, r18
    3da0:	f3 1f       	adc	r31, r19
    3da2:	80 81       	ld	r24, Z
    3da4:	28 2f       	mov	r18, r24
    3da6:	30 e0       	ldi	r19, 0x00	; 0
    3da8:	89 81       	ldd	r24, Y+1	; 0x01
    3daa:	9a 81       	ldd	r25, Y+2	; 0x02
    3dac:	82 0f       	add	r24, r18
    3dae:	93 1f       	adc	r25, r19
    3db0:	c0 97       	sbiw	r24, 0x30	; 48
    3db2:	9a 83       	std	Y+2, r25	; 0x02
    3db4:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Index++;
    3db6:	8b 81       	ldd	r24, Y+3	; 0x03
    3db8:	8f 5f       	subi	r24, 0xFF	; 255
    3dba:	8b 83       	std	Y+3, r24	; 0x03

static u32 ExtractDataFromFrame(u8 * Copy_Pu8String){

	u8 Local_u8Index = 1;
	u32 Local_u32Int_Speed = 0;
	while(Copy_Pu8String[Local_u8Index] != '#')
    3dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dbe:	28 2f       	mov	r18, r24
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc4:	9d 81       	ldd	r25, Y+5	; 0x05
    3dc6:	fc 01       	movw	r30, r24
    3dc8:	e2 0f       	add	r30, r18
    3dca:	f3 1f       	adc	r31, r19
    3dcc:	80 81       	ld	r24, Z
    3dce:	83 32       	cpi	r24, 0x23	; 35
    3dd0:	91 f6       	brne	.-92     	; 0x3d76 <ExtractDataFromFrame+0x1c>
	{
		Local_u32Int_Speed *= 10;
		Local_u32Int_Speed += (Copy_Pu8String[Local_u8Index] - '0');
		Local_u8Index++;
	}
	Can_Flag =1;
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	80 93 7d 00 	sts	0x007D, r24

	return Local_u32Int_Speed;
    3dd8:	89 81       	ldd	r24, Y+1	; 0x01
    3dda:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3ddc:	0f 90       	pop	r0
    3dde:	0f 90       	pop	r0
    3de0:	0f 90       	pop	r0
    3de2:	0f 90       	pop	r0
    3de4:	0f 90       	pop	r0
    3de6:	cf 91       	pop	r28
    3de8:	df 91       	pop	r29
    3dea:	08 95       	ret

00003dec <__udivmodhi4>:
    3dec:	aa 1b       	sub	r26, r26
    3dee:	bb 1b       	sub	r27, r27
    3df0:	51 e1       	ldi	r21, 0x11	; 17
    3df2:	07 c0       	rjmp	.+14     	; 0x3e02 <__udivmodhi4_ep>

00003df4 <__udivmodhi4_loop>:
    3df4:	aa 1f       	adc	r26, r26
    3df6:	bb 1f       	adc	r27, r27
    3df8:	a6 17       	cp	r26, r22
    3dfa:	b7 07       	cpc	r27, r23
    3dfc:	10 f0       	brcs	.+4      	; 0x3e02 <__udivmodhi4_ep>
    3dfe:	a6 1b       	sub	r26, r22
    3e00:	b7 0b       	sbc	r27, r23

00003e02 <__udivmodhi4_ep>:
    3e02:	88 1f       	adc	r24, r24
    3e04:	99 1f       	adc	r25, r25
    3e06:	5a 95       	dec	r21
    3e08:	a9 f7       	brne	.-22     	; 0x3df4 <__udivmodhi4_loop>
    3e0a:	80 95       	com	r24
    3e0c:	90 95       	com	r25
    3e0e:	bc 01       	movw	r22, r24
    3e10:	cd 01       	movw	r24, r26
    3e12:	08 95       	ret

00003e14 <__divmodhi4>:
    3e14:	97 fb       	bst	r25, 7
    3e16:	09 2e       	mov	r0, r25
    3e18:	07 26       	eor	r0, r23
    3e1a:	0a d0       	rcall	.+20     	; 0x3e30 <__divmodhi4_neg1>
    3e1c:	77 fd       	sbrc	r23, 7
    3e1e:	04 d0       	rcall	.+8      	; 0x3e28 <__divmodhi4_neg2>
    3e20:	e5 df       	rcall	.-54     	; 0x3dec <__udivmodhi4>
    3e22:	06 d0       	rcall	.+12     	; 0x3e30 <__divmodhi4_neg1>
    3e24:	00 20       	and	r0, r0
    3e26:	1a f4       	brpl	.+6      	; 0x3e2e <__divmodhi4_exit>

00003e28 <__divmodhi4_neg2>:
    3e28:	70 95       	com	r23
    3e2a:	61 95       	neg	r22
    3e2c:	7f 4f       	sbci	r23, 0xFF	; 255

00003e2e <__divmodhi4_exit>:
    3e2e:	08 95       	ret

00003e30 <__divmodhi4_neg1>:
    3e30:	f6 f7       	brtc	.-4      	; 0x3e2e <__divmodhi4_exit>
    3e32:	90 95       	com	r25
    3e34:	81 95       	neg	r24
    3e36:	9f 4f       	sbci	r25, 0xFF	; 255
    3e38:	08 95       	ret

00003e3a <__prologue_saves__>:
    3e3a:	2f 92       	push	r2
    3e3c:	3f 92       	push	r3
    3e3e:	4f 92       	push	r4
    3e40:	5f 92       	push	r5
    3e42:	6f 92       	push	r6
    3e44:	7f 92       	push	r7
    3e46:	8f 92       	push	r8
    3e48:	9f 92       	push	r9
    3e4a:	af 92       	push	r10
    3e4c:	bf 92       	push	r11
    3e4e:	cf 92       	push	r12
    3e50:	df 92       	push	r13
    3e52:	ef 92       	push	r14
    3e54:	ff 92       	push	r15
    3e56:	0f 93       	push	r16
    3e58:	1f 93       	push	r17
    3e5a:	cf 93       	push	r28
    3e5c:	df 93       	push	r29
    3e5e:	cd b7       	in	r28, 0x3d	; 61
    3e60:	de b7       	in	r29, 0x3e	; 62
    3e62:	ca 1b       	sub	r28, r26
    3e64:	db 0b       	sbc	r29, r27
    3e66:	0f b6       	in	r0, 0x3f	; 63
    3e68:	f8 94       	cli
    3e6a:	de bf       	out	0x3e, r29	; 62
    3e6c:	0f be       	out	0x3f, r0	; 63
    3e6e:	cd bf       	out	0x3d, r28	; 61
    3e70:	09 94       	ijmp

00003e72 <__epilogue_restores__>:
    3e72:	2a 88       	ldd	r2, Y+18	; 0x12
    3e74:	39 88       	ldd	r3, Y+17	; 0x11
    3e76:	48 88       	ldd	r4, Y+16	; 0x10
    3e78:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e80:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e82:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e84:	b9 84       	ldd	r11, Y+9	; 0x09
    3e86:	c8 84       	ldd	r12, Y+8	; 0x08
    3e88:	df 80       	ldd	r13, Y+7	; 0x07
    3e8a:	ee 80       	ldd	r14, Y+6	; 0x06
    3e8c:	fd 80       	ldd	r15, Y+5	; 0x05
    3e8e:	0c 81       	ldd	r16, Y+4	; 0x04
    3e90:	1b 81       	ldd	r17, Y+3	; 0x03
    3e92:	aa 81       	ldd	r26, Y+2	; 0x02
    3e94:	b9 81       	ldd	r27, Y+1	; 0x01
    3e96:	ce 0f       	add	r28, r30
    3e98:	d1 1d       	adc	r29, r1
    3e9a:	0f b6       	in	r0, 0x3f	; 63
    3e9c:	f8 94       	cli
    3e9e:	de bf       	out	0x3e, r29	; 62
    3ea0:	0f be       	out	0x3f, r0	; 63
    3ea2:	cd bf       	out	0x3d, r28	; 61
    3ea4:	ed 01       	movw	r28, r26
    3ea6:	08 95       	ret

00003ea8 <_exit>:
    3ea8:	f8 94       	cli

00003eaa <__stop_program>:
    3eaa:	ff cf       	rjmp	.-2      	; 0x3eaa <__stop_program>
