
FreeRTOS_Adaptive_Cruise_Control_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08006fc8  08006fc8  00016fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007140  08007140  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  08007140  08007140  00017140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007148  08007148  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007148  08007148  00017148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800714c  0800714c  0001714c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08007150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000537c  20000058  080071a8  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200053d4  080071a8  000253d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009356  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001920  00000000  00000000  000293de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0002ad00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  0002b4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002828  00000000  00000000  0002bbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000076c7  00000000  00000000  0002e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00013e8b  00000000  00000000  00035ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00049942  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002048  00000000  00000000  00049994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000058 	.word	0x20000058
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006fb0 	.word	0x08006fb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	08006fb0 	.word	0x08006fb0

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_frsub>:
 80009bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009c0:	e002      	b.n	80009c8 <__addsf3>
 80009c2:	bf00      	nop

080009c4 <__aeabi_fsub>:
 80009c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009c8 <__addsf3>:
 80009c8:	0042      	lsls	r2, r0, #1
 80009ca:	bf1f      	itttt	ne
 80009cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009d0:	ea92 0f03 	teqne	r2, r3
 80009d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009dc:	d06a      	beq.n	8000ab4 <__addsf3+0xec>
 80009de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009e6:	bfc1      	itttt	gt
 80009e8:	18d2      	addgt	r2, r2, r3
 80009ea:	4041      	eorgt	r1, r0
 80009ec:	4048      	eorgt	r0, r1
 80009ee:	4041      	eorgt	r1, r0
 80009f0:	bfb8      	it	lt
 80009f2:	425b      	neglt	r3, r3
 80009f4:	2b19      	cmp	r3, #25
 80009f6:	bf88      	it	hi
 80009f8:	4770      	bxhi	lr
 80009fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a06:	bf18      	it	ne
 8000a08:	4240      	negne	r0, r0
 8000a0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4249      	negne	r1, r1
 8000a1a:	ea92 0f03 	teq	r2, r3
 8000a1e:	d03f      	beq.n	8000aa0 <__addsf3+0xd8>
 8000a20:	f1a2 0201 	sub.w	r2, r2, #1
 8000a24:	fa41 fc03 	asr.w	ip, r1, r3
 8000a28:	eb10 000c 	adds.w	r0, r0, ip
 8000a2c:	f1c3 0320 	rsb	r3, r3, #32
 8000a30:	fa01 f103 	lsl.w	r1, r1, r3
 8000a34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a38:	d502      	bpl.n	8000a40 <__addsf3+0x78>
 8000a3a:	4249      	negs	r1, r1
 8000a3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a44:	d313      	bcc.n	8000a6e <__addsf3+0xa6>
 8000a46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a4a:	d306      	bcc.n	8000a5a <__addsf3+0x92>
 8000a4c:	0840      	lsrs	r0, r0, #1
 8000a4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a52:	f102 0201 	add.w	r2, r2, #1
 8000a56:	2afe      	cmp	r2, #254	; 0xfe
 8000a58:	d251      	bcs.n	8000afe <__addsf3+0x136>
 8000a5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a62:	bf08      	it	eq
 8000a64:	f020 0001 	biceq.w	r0, r0, #1
 8000a68:	ea40 0003 	orr.w	r0, r0, r3
 8000a6c:	4770      	bx	lr
 8000a6e:	0049      	lsls	r1, r1, #1
 8000a70:	eb40 0000 	adc.w	r0, r0, r0
 8000a74:	3a01      	subs	r2, #1
 8000a76:	bf28      	it	cs
 8000a78:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a7c:	d2ed      	bcs.n	8000a5a <__addsf3+0x92>
 8000a7e:	fab0 fc80 	clz	ip, r0
 8000a82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a86:	ebb2 020c 	subs.w	r2, r2, ip
 8000a8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a8e:	bfaa      	itet	ge
 8000a90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a94:	4252      	neglt	r2, r2
 8000a96:	4318      	orrge	r0, r3
 8000a98:	bfbc      	itt	lt
 8000a9a:	40d0      	lsrlt	r0, r2
 8000a9c:	4318      	orrlt	r0, r3
 8000a9e:	4770      	bx	lr
 8000aa0:	f092 0f00 	teq	r2, #0
 8000aa4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000aa8:	bf06      	itte	eq
 8000aaa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aae:	3201      	addeq	r2, #1
 8000ab0:	3b01      	subne	r3, #1
 8000ab2:	e7b5      	b.n	8000a20 <__addsf3+0x58>
 8000ab4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000abc:	bf18      	it	ne
 8000abe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac2:	d021      	beq.n	8000b08 <__addsf3+0x140>
 8000ac4:	ea92 0f03 	teq	r2, r3
 8000ac8:	d004      	beq.n	8000ad4 <__addsf3+0x10c>
 8000aca:	f092 0f00 	teq	r2, #0
 8000ace:	bf08      	it	eq
 8000ad0:	4608      	moveq	r0, r1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea90 0f01 	teq	r0, r1
 8000ad8:	bf1c      	itt	ne
 8000ada:	2000      	movne	r0, #0
 8000adc:	4770      	bxne	lr
 8000ade:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ae2:	d104      	bne.n	8000aee <__addsf3+0x126>
 8000ae4:	0040      	lsls	r0, r0, #1
 8000ae6:	bf28      	it	cs
 8000ae8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000aec:	4770      	bx	lr
 8000aee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000af2:	bf3c      	itt	cc
 8000af4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bxcc	lr
 8000afa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000afe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b06:	4770      	bx	lr
 8000b08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b0c:	bf16      	itet	ne
 8000b0e:	4608      	movne	r0, r1
 8000b10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b14:	4601      	movne	r1, r0
 8000b16:	0242      	lsls	r2, r0, #9
 8000b18:	bf06      	itte	eq
 8000b1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b1e:	ea90 0f01 	teqeq	r0, r1
 8000b22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_ui2f>:
 8000b28:	f04f 0300 	mov.w	r3, #0
 8000b2c:	e004      	b.n	8000b38 <__aeabi_i2f+0x8>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_i2f>:
 8000b30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	bf48      	it	mi
 8000b36:	4240      	negmi	r0, r0
 8000b38:	ea5f 0c00 	movs.w	ip, r0
 8000b3c:	bf08      	it	eq
 8000b3e:	4770      	bxeq	lr
 8000b40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b44:	4601      	mov	r1, r0
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	e01c      	b.n	8000b86 <__aeabi_l2f+0x2a>

08000b4c <__aeabi_ul2f>:
 8000b4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b50:	bf08      	it	eq
 8000b52:	4770      	bxeq	lr
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	e00a      	b.n	8000b70 <__aeabi_l2f+0x14>
 8000b5a:	bf00      	nop

08000b5c <__aeabi_l2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__aeabi_l2f+0x14>
 8000b6a:	4240      	negs	r0, r0
 8000b6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b70:	ea5f 0c01 	movs.w	ip, r1
 8000b74:	bf02      	ittt	eq
 8000b76:	4684      	moveq	ip, r0
 8000b78:	4601      	moveq	r1, r0
 8000b7a:	2000      	moveq	r0, #0
 8000b7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b80:	bf08      	it	eq
 8000b82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b8a:	fabc f28c 	clz	r2, ip
 8000b8e:	3a08      	subs	r2, #8
 8000b90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b94:	db10      	blt.n	8000bb8 <__aeabi_l2f+0x5c>
 8000b96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b9a:	4463      	add	r3, ip
 8000b9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ba8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f102 0220 	add.w	r2, r2, #32
 8000bbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <EXTI9_5_IRQHandler>:
#endif
/********************************************************************************************/
/***********************			EXTI9_5_IRQHandler			*****************************/
/********************************************************************************************/
void	EXTI9_5_IRQHandler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
					EXTI_LINE9_Handler(); 
					/*	Clear Pending Bit  */
					SET_BIT(EXTI -> PR , EXTI_LINE9);
				}
		#endif
	} while ( (( GET_BIT(EXTI -> PR , EXTI_LINE5)|GET_BIT(EXTI -> PR , EXTI_LINE6)|GET_BIT(EXTI -> PR , EXTI_LINE7)\
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <EXTI9_5_IRQHandler+0x40>)
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	095a      	lsrs	r2, r3, #5
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <EXTI9_5_IRQHandler+0x40>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	099b      	lsrs	r3, r3, #6
 8000eec:	431a      	orrs	r2, r3
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <EXTI9_5_IRQHandler+0x40>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	09db      	lsrs	r3, r3, #7
 8000ef4:	431a      	orrs	r2, r3
			             |GET_BIT(EXTI -> PR , EXTI_LINE8)|GET_BIT(EXTI -> PR , EXTI_LINE9 )) == 1)				  );
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <EXTI9_5_IRQHandler+0x40>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	0a1b      	lsrs	r3, r3, #8
 8000efc:	431a      	orrs	r2, r3
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <EXTI9_5_IRQHandler+0x40>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	0a5b      	lsrs	r3, r3, #9
 8000f04:	4313      	orrs	r3, r2
 8000f06:	f003 0301 	and.w	r3, r3, #1
	} while ( (( GET_BIT(EXTI -> PR , EXTI_LINE5)|GET_BIT(EXTI -> PR , EXTI_LINE6)|GET_BIT(EXTI -> PR , EXTI_LINE7)\
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d0e8      	beq.n	8000ee0 <EXTI9_5_IRQHandler+0x4>
}
 8000f0e:	bf00      	nop
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40013c00 	.word	0x40013c00

08000f20 <EXTI15_10_IRQHandler>:
/********************************************************************************************/
/**********************	     	 EXTI15_10_IRQHandler			*****************************/
/********************************************************************************************/
void	EXTI15_10_IRQHandler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
				EXTI_LINE15_Handler(); 
				/*	Clear Pending Bit  */
				SET_BIT(EXTI -> PR , EXTI_LINE15);
			}
	#endif
	} while ( ( GET_BIT(EXTI -> PR , EXTI_LINE10)|GET_BIT(EXTI -> PR , EXTI_LINE11) |GET_BIT(EXTI -> PR , EXTI_LINE12)       \
 8000f24:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <EXTI15_10_IRQHandler+0x48>)
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	0a9a      	lsrs	r2, r3, #10
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <EXTI15_10_IRQHandler+0x48>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	0adb      	lsrs	r3, r3, #11
 8000f30:	431a      	orrs	r2, r3
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <EXTI15_10_IRQHandler+0x48>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	0b1b      	lsrs	r3, r3, #12
 8000f38:	431a      	orrs	r2, r3
			   |GET_BIT(EXTI -> PR , EXTI_LINE13)|GET_BIT(EXTI -> PR , EXTI_LINE14 )|GET_BIT(EXTI -> PR , EXTI_LINE15) ) == 1);
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <EXTI15_10_IRQHandler+0x48>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	0b5b      	lsrs	r3, r3, #13
 8000f40:	431a      	orrs	r2, r3
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <EXTI15_10_IRQHandler+0x48>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	0b9b      	lsrs	r3, r3, #14
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <EXTI15_10_IRQHandler+0x48>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	0bdb      	lsrs	r3, r3, #15
 8000f50:	4313      	orrs	r3, r2
 8000f52:	f003 0301 	and.w	r3, r3, #1
	} while ( ( GET_BIT(EXTI -> PR , EXTI_LINE10)|GET_BIT(EXTI -> PR , EXTI_LINE11) |GET_BIT(EXTI -> PR , EXTI_LINE12)       \
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d0e4      	beq.n	8000f24 <EXTI15_10_IRQHandler+0x4>
}
 8000f5a:	bf00      	nop
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40013c00 	.word	0x40013c00

08000f6c <GPIO_voidSetPinDirection>:
#include "../Inc/GPIO_config.h"



void GPIO_voidSetPinDirection (u8 Copy_u8PortName, u8 Copy_u8PinNumber, PIN_st*  Copy_psPinInfo)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	603a      	str	r2, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8PortName)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	f000 82c9 	beq.w	8001516 <GPIO_voidSetPinDirection+0x5aa>
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	f300 842a 	bgt.w	80017de <GPIO_voidSetPinDirection+0x872>
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d004      	beq.n	8000f98 <GPIO_voidSetPinDirection+0x2c>
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	f000 8161 	beq.w	8001256 <GPIO_voidSetPinDirection+0x2ea>
            break;
        }

        break;
    }
}
 8000f94:	f000 bc23 	b.w	80017de <GPIO_voidSetPinDirection+0x872>
        switch( Copy_psPinInfo->PIN_MOD)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d86f      	bhi.n	8001080 <GPIO_voidSetPinDirection+0x114>
 8000fa0:	a201      	add	r2, pc, #4	; (adr r2, 8000fa8 <GPIO_voidSetPinDirection+0x3c>)
 8000fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa6:	bf00      	nop
 8000fa8:	08000fb9 	.word	0x08000fb9
 8000fac:	08000fed 	.word	0x08000fed
 8000fb0:	0800101f 	.word	0x0800101f
 8000fb4:	08001051 	.word	0x08001051
            CLR_BIT(GPIOA->MODER,(Copy_u8PinNumber*2));
 8000fb8:	4bae      	ldr	r3, [pc, #696]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	79ba      	ldrb	r2, [r7, #6]
 8000fbe:	0052      	lsls	r2, r2, #1
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc6:	43d2      	mvns	r2, r2
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4aaa      	ldr	r2, [pc, #680]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8000fcc:	400b      	ands	r3, r1
 8000fce:	6013      	str	r3, [r2, #0]
            CLR_BIT(GPIOA->MODER,(Copy_u8PinNumber*2+1));
 8000fd0:	4ba8      	ldr	r3, [pc, #672]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	79ba      	ldrb	r2, [r7, #6]
 8000fd6:	0052      	lsls	r2, r2, #1
 8000fd8:	3201      	adds	r2, #1
 8000fda:	2101      	movs	r1, #1
 8000fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe0:	43d2      	mvns	r2, r2
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4aa3      	ldr	r2, [pc, #652]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8000fe6:	400b      	ands	r3, r1
 8000fe8:	6013      	str	r3, [r2, #0]
            break;
 8000fea:	e049      	b.n	8001080 <GPIO_voidSetPinDirection+0x114>
            SET_BIT(GPIOA->MODER,(Copy_u8PinNumber*2));
 8000fec:	4ba1      	ldr	r3, [pc, #644]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	79ba      	ldrb	r2, [r7, #6]
 8000ff2:	0052      	lsls	r2, r2, #1
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4a9d      	ldr	r2, [pc, #628]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8000ffe:	430b      	orrs	r3, r1
 8001000:	6013      	str	r3, [r2, #0]
            CLR_BIT(GPIOA->MODER,(Copy_u8PinNumber*2+1));
 8001002:	4b9c      	ldr	r3, [pc, #624]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	79ba      	ldrb	r2, [r7, #6]
 8001008:	0052      	lsls	r2, r2, #1
 800100a:	3201      	adds	r2, #1
 800100c:	2101      	movs	r1, #1
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	43d2      	mvns	r2, r2
 8001014:	4611      	mov	r1, r2
 8001016:	4a97      	ldr	r2, [pc, #604]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001018:	400b      	ands	r3, r1
 800101a:	6013      	str	r3, [r2, #0]
            break;
 800101c:	e030      	b.n	8001080 <GPIO_voidSetPinDirection+0x114>
            CLR_BIT(GPIOA->MODER,(Copy_u8PinNumber*2));
 800101e:	4b95      	ldr	r3, [pc, #596]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	79ba      	ldrb	r2, [r7, #6]
 8001024:	0052      	lsls	r2, r2, #1
 8001026:	2101      	movs	r1, #1
 8001028:	fa01 f202 	lsl.w	r2, r1, r2
 800102c:	43d2      	mvns	r2, r2
 800102e:	4611      	mov	r1, r2
 8001030:	4a90      	ldr	r2, [pc, #576]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001032:	400b      	ands	r3, r1
 8001034:	6013      	str	r3, [r2, #0]
            SET_BIT(GPIOA->MODER,(Copy_u8PinNumber*2+1));
 8001036:	4b8f      	ldr	r3, [pc, #572]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	79ba      	ldrb	r2, [r7, #6]
 800103c:	0052      	lsls	r2, r2, #1
 800103e:	3201      	adds	r2, #1
 8001040:	2101      	movs	r1, #1
 8001042:	fa01 f202 	lsl.w	r2, r1, r2
 8001046:	4611      	mov	r1, r2
 8001048:	4a8a      	ldr	r2, [pc, #552]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 800104a:	430b      	orrs	r3, r1
 800104c:	6013      	str	r3, [r2, #0]
            break;
 800104e:	e017      	b.n	8001080 <GPIO_voidSetPinDirection+0x114>
            SET_BIT(GPIOA->MODER,(Copy_u8PinNumber*2));
 8001050:	4b88      	ldr	r3, [pc, #544]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	79ba      	ldrb	r2, [r7, #6]
 8001056:	0052      	lsls	r2, r2, #1
 8001058:	2101      	movs	r1, #1
 800105a:	fa01 f202 	lsl.w	r2, r1, r2
 800105e:	4611      	mov	r1, r2
 8001060:	4a84      	ldr	r2, [pc, #528]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001062:	430b      	orrs	r3, r1
 8001064:	6013      	str	r3, [r2, #0]
            SET_BIT(GPIOA->MODER,(Copy_u8PinNumber*2+1));
 8001066:	4b83      	ldr	r3, [pc, #524]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	79ba      	ldrb	r2, [r7, #6]
 800106c:	0052      	lsls	r2, r2, #1
 800106e:	3201      	adds	r2, #1
 8001070:	2101      	movs	r1, #1
 8001072:	fa01 f202 	lsl.w	r2, r1, r2
 8001076:	4611      	mov	r1, r2
 8001078:	4a7e      	ldr	r2, [pc, #504]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 800107a:	430b      	orrs	r3, r1
 800107c:	6013      	str	r3, [r2, #0]
            break;
 800107e:	bf00      	nop
        switch( Copy_psPinInfo->PIN_OT)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	785b      	ldrb	r3, [r3, #1]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <GPIO_voidSetPinDirection+0x122>
 8001088:	2b01      	cmp	r3, #1
 800108a:	d00c      	beq.n	80010a6 <GPIO_voidSetPinDirection+0x13a>
 800108c:	e016      	b.n	80010bc <GPIO_voidSetPinDirection+0x150>
            CLR_BIT(GPIOA->OTYPER,(Copy_u8PinNumber));
 800108e:	4b79      	ldr	r3, [pc, #484]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	79ba      	ldrb	r2, [r7, #6]
 8001094:	2101      	movs	r1, #1
 8001096:	fa01 f202 	lsl.w	r2, r1, r2
 800109a:	43d2      	mvns	r2, r2
 800109c:	4611      	mov	r1, r2
 800109e:	4a75      	ldr	r2, [pc, #468]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 80010a0:	400b      	ands	r3, r1
 80010a2:	6053      	str	r3, [r2, #4]
            break;
 80010a4:	e00a      	b.n	80010bc <GPIO_voidSetPinDirection+0x150>
            SET_BIT(GPIOA->OTYPER,(Copy_u8PinNumber));
 80010a6:	4b73      	ldr	r3, [pc, #460]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	79ba      	ldrb	r2, [r7, #6]
 80010ac:	2101      	movs	r1, #1
 80010ae:	fa01 f202 	lsl.w	r2, r1, r2
 80010b2:	4611      	mov	r1, r2
 80010b4:	4a6f      	ldr	r2, [pc, #444]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 80010b6:	430b      	orrs	r3, r1
 80010b8:	6053      	str	r3, [r2, #4]
            break;
 80010ba:	bf00      	nop
        switch( Copy_psPinInfo->PIN_SPD)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	789b      	ldrb	r3, [r3, #2]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d86f      	bhi.n	80011a4 <GPIO_voidSetPinDirection+0x238>
 80010c4:	a201      	add	r2, pc, #4	; (adr r2, 80010cc <GPIO_voidSetPinDirection+0x160>)
 80010c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ca:	bf00      	nop
 80010cc:	080010dd 	.word	0x080010dd
 80010d0:	08001111 	.word	0x08001111
 80010d4:	08001143 	.word	0x08001143
 80010d8:	08001175 	.word	0x08001175
            CLR_BIT(GPIOA->OSPEEDR,(Copy_u8PinNumber*2));
 80010dc:	4b65      	ldr	r3, [pc, #404]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	79ba      	ldrb	r2, [r7, #6]
 80010e2:	0052      	lsls	r2, r2, #1
 80010e4:	2101      	movs	r1, #1
 80010e6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ea:	43d2      	mvns	r2, r2
 80010ec:	4611      	mov	r1, r2
 80010ee:	4a61      	ldr	r2, [pc, #388]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 80010f0:	400b      	ands	r3, r1
 80010f2:	6093      	str	r3, [r2, #8]
            CLR_BIT(GPIOA->OSPEEDR,(Copy_u8PinNumber*2+1));
 80010f4:	4b5f      	ldr	r3, [pc, #380]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	79ba      	ldrb	r2, [r7, #6]
 80010fa:	0052      	lsls	r2, r2, #1
 80010fc:	3201      	adds	r2, #1
 80010fe:	2101      	movs	r1, #1
 8001100:	fa01 f202 	lsl.w	r2, r1, r2
 8001104:	43d2      	mvns	r2, r2
 8001106:	4611      	mov	r1, r2
 8001108:	4a5a      	ldr	r2, [pc, #360]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 800110a:	400b      	ands	r3, r1
 800110c:	6093      	str	r3, [r2, #8]
            break;
 800110e:	e049      	b.n	80011a4 <GPIO_voidSetPinDirection+0x238>
            SET_BIT(GPIOA->OSPEEDR,(Copy_u8PinNumber*2));
 8001110:	4b58      	ldr	r3, [pc, #352]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	79ba      	ldrb	r2, [r7, #6]
 8001116:	0052      	lsls	r2, r2, #1
 8001118:	2101      	movs	r1, #1
 800111a:	fa01 f202 	lsl.w	r2, r1, r2
 800111e:	4611      	mov	r1, r2
 8001120:	4a54      	ldr	r2, [pc, #336]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001122:	430b      	orrs	r3, r1
 8001124:	6093      	str	r3, [r2, #8]
            CLR_BIT(GPIOA->OSPEEDR,(Copy_u8PinNumber*2+1));
 8001126:	4b53      	ldr	r3, [pc, #332]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	79ba      	ldrb	r2, [r7, #6]
 800112c:	0052      	lsls	r2, r2, #1
 800112e:	3201      	adds	r2, #1
 8001130:	2101      	movs	r1, #1
 8001132:	fa01 f202 	lsl.w	r2, r1, r2
 8001136:	43d2      	mvns	r2, r2
 8001138:	4611      	mov	r1, r2
 800113a:	4a4e      	ldr	r2, [pc, #312]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 800113c:	400b      	ands	r3, r1
 800113e:	6093      	str	r3, [r2, #8]
            break;
 8001140:	e030      	b.n	80011a4 <GPIO_voidSetPinDirection+0x238>
            CLR_BIT(GPIOA->OSPEEDR,(Copy_u8PinNumber*2));
 8001142:	4b4c      	ldr	r3, [pc, #304]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	79ba      	ldrb	r2, [r7, #6]
 8001148:	0052      	lsls	r2, r2, #1
 800114a:	2101      	movs	r1, #1
 800114c:	fa01 f202 	lsl.w	r2, r1, r2
 8001150:	43d2      	mvns	r2, r2
 8001152:	4611      	mov	r1, r2
 8001154:	4a47      	ldr	r2, [pc, #284]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001156:	400b      	ands	r3, r1
 8001158:	6093      	str	r3, [r2, #8]
            SET_BIT(GPIOA->OSPEEDR,(Copy_u8PinNumber*2+1));
 800115a:	4b46      	ldr	r3, [pc, #280]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	79ba      	ldrb	r2, [r7, #6]
 8001160:	0052      	lsls	r2, r2, #1
 8001162:	3201      	adds	r2, #1
 8001164:	2101      	movs	r1, #1
 8001166:	fa01 f202 	lsl.w	r2, r1, r2
 800116a:	4611      	mov	r1, r2
 800116c:	4a41      	ldr	r2, [pc, #260]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 800116e:	430b      	orrs	r3, r1
 8001170:	6093      	str	r3, [r2, #8]
            break;
 8001172:	e017      	b.n	80011a4 <GPIO_voidSetPinDirection+0x238>
            SET_BIT(GPIOA->OSPEEDR,(Copy_u8PinNumber*2));
 8001174:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	79ba      	ldrb	r2, [r7, #6]
 800117a:	0052      	lsls	r2, r2, #1
 800117c:	2101      	movs	r1, #1
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	4611      	mov	r1, r2
 8001184:	4a3b      	ldr	r2, [pc, #236]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001186:	430b      	orrs	r3, r1
 8001188:	6093      	str	r3, [r2, #8]
            SET_BIT(GPIOA->OSPEEDR,(Copy_u8PinNumber*2+1));
 800118a:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	79ba      	ldrb	r2, [r7, #6]
 8001190:	0052      	lsls	r2, r2, #1
 8001192:	3201      	adds	r2, #1
 8001194:	2101      	movs	r1, #1
 8001196:	fa01 f202 	lsl.w	r2, r1, r2
 800119a:	4611      	mov	r1, r2
 800119c:	4a35      	ldr	r2, [pc, #212]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 800119e:	430b      	orrs	r3, r1
 80011a0:	6093      	str	r3, [r2, #8]
            break;
 80011a2:	bf00      	nop
        switch( Copy_psPinInfo->PIN_PUPD)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	78db      	ldrb	r3, [r3, #3]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d03a      	beq.n	8001222 <GPIO_voidSetPinDirection+0x2b6>
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	f300 8311 	bgt.w	80017d4 <GPIO_voidSetPinDirection+0x868>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <GPIO_voidSetPinDirection+0x250>
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d01a      	beq.n	80011f0 <GPIO_voidSetPinDirection+0x284>
        break;
 80011ba:	e30b      	b.n	80017d4 <GPIO_voidSetPinDirection+0x868>
            CLR_BIT(GPIOA->PUPDR,(Copy_u8PinNumber*2));
 80011bc:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	79ba      	ldrb	r2, [r7, #6]
 80011c2:	0052      	lsls	r2, r2, #1
 80011c4:	2101      	movs	r1, #1
 80011c6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ca:	43d2      	mvns	r2, r2
 80011cc:	4611      	mov	r1, r2
 80011ce:	4a29      	ldr	r2, [pc, #164]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 80011d0:	400b      	ands	r3, r1
 80011d2:	60d3      	str	r3, [r2, #12]
            CLR_BIT(GPIOA->PUPDR,(Copy_u8PinNumber*2+1));
 80011d4:	4b27      	ldr	r3, [pc, #156]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	79ba      	ldrb	r2, [r7, #6]
 80011da:	0052      	lsls	r2, r2, #1
 80011dc:	3201      	adds	r2, #1
 80011de:	2101      	movs	r1, #1
 80011e0:	fa01 f202 	lsl.w	r2, r1, r2
 80011e4:	43d2      	mvns	r2, r2
 80011e6:	4611      	mov	r1, r2
 80011e8:	4a22      	ldr	r2, [pc, #136]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 80011ea:	400b      	ands	r3, r1
 80011ec:	60d3      	str	r3, [r2, #12]
            break;
 80011ee:	e031      	b.n	8001254 <GPIO_voidSetPinDirection+0x2e8>
            SET_BIT(GPIOA->PUPDR,(Copy_u8PinNumber*2));
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	79ba      	ldrb	r2, [r7, #6]
 80011f6:	0052      	lsls	r2, r2, #1
 80011f8:	2101      	movs	r1, #1
 80011fa:	fa01 f202 	lsl.w	r2, r1, r2
 80011fe:	4611      	mov	r1, r2
 8001200:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001202:	430b      	orrs	r3, r1
 8001204:	60d3      	str	r3, [r2, #12]
            CLR_BIT(GPIOA->PUPDR,(Copy_u8PinNumber*2+1));
 8001206:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	79ba      	ldrb	r2, [r7, #6]
 800120c:	0052      	lsls	r2, r2, #1
 800120e:	3201      	adds	r2, #1
 8001210:	2101      	movs	r1, #1
 8001212:	fa01 f202 	lsl.w	r2, r1, r2
 8001216:	43d2      	mvns	r2, r2
 8001218:	4611      	mov	r1, r2
 800121a:	4a16      	ldr	r2, [pc, #88]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 800121c:	400b      	ands	r3, r1
 800121e:	60d3      	str	r3, [r2, #12]
            break;
 8001220:	e018      	b.n	8001254 <GPIO_voidSetPinDirection+0x2e8>
            CLR_BIT(GPIOA->PUPDR,(Copy_u8PinNumber*2));
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	79ba      	ldrb	r2, [r7, #6]
 8001228:	0052      	lsls	r2, r2, #1
 800122a:	2101      	movs	r1, #1
 800122c:	fa01 f202 	lsl.w	r2, r1, r2
 8001230:	43d2      	mvns	r2, r2
 8001232:	4611      	mov	r1, r2
 8001234:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 8001236:	400b      	ands	r3, r1
 8001238:	60d3      	str	r3, [r2, #12]
            SET_BIT(GPIOA->PUPDR,(Copy_u8PinNumber*2+1));
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	79ba      	ldrb	r2, [r7, #6]
 8001240:	0052      	lsls	r2, r2, #1
 8001242:	3201      	adds	r2, #1
 8001244:	2101      	movs	r1, #1
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	4611      	mov	r1, r2
 800124c:	4a09      	ldr	r2, [pc, #36]	; (8001274 <GPIO_voidSetPinDirection+0x308>)
 800124e:	430b      	orrs	r3, r1
 8001250:	60d3      	str	r3, [r2, #12]
            break;
 8001252:	bf00      	nop
        break;
 8001254:	e2be      	b.n	80017d4 <GPIO_voidSetPinDirection+0x868>
        switch( Copy_psPinInfo->PIN_MOD)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b03      	cmp	r3, #3
 800125c:	d870      	bhi.n	8001340 <GPIO_voidSetPinDirection+0x3d4>
 800125e:	a201      	add	r2, pc, #4	; (adr r2, 8001264 <GPIO_voidSetPinDirection+0x2f8>)
 8001260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001264:	08001279 	.word	0x08001279
 8001268:	080012ad 	.word	0x080012ad
 800126c:	080012df 	.word	0x080012df
 8001270:	08001311 	.word	0x08001311
 8001274:	40020000 	.word	0x40020000
            CLR_BIT(GPIOB->MODER,(Copy_u8PinNumber*2));
 8001278:	4bae      	ldr	r3, [pc, #696]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	79ba      	ldrb	r2, [r7, #6]
 800127e:	0052      	lsls	r2, r2, #1
 8001280:	2101      	movs	r1, #1
 8001282:	fa01 f202 	lsl.w	r2, r1, r2
 8001286:	43d2      	mvns	r2, r2
 8001288:	4611      	mov	r1, r2
 800128a:	4aaa      	ldr	r2, [pc, #680]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 800128c:	400b      	ands	r3, r1
 800128e:	6013      	str	r3, [r2, #0]
            CLR_BIT(GPIOB->MODER,(Copy_u8PinNumber*2+1));
 8001290:	4ba8      	ldr	r3, [pc, #672]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	79ba      	ldrb	r2, [r7, #6]
 8001296:	0052      	lsls	r2, r2, #1
 8001298:	3201      	adds	r2, #1
 800129a:	2101      	movs	r1, #1
 800129c:	fa01 f202 	lsl.w	r2, r1, r2
 80012a0:	43d2      	mvns	r2, r2
 80012a2:	4611      	mov	r1, r2
 80012a4:	4aa3      	ldr	r2, [pc, #652]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80012a6:	400b      	ands	r3, r1
 80012a8:	6013      	str	r3, [r2, #0]
            break;
 80012aa:	e049      	b.n	8001340 <GPIO_voidSetPinDirection+0x3d4>
            SET_BIT(GPIOB->MODER,(Copy_u8PinNumber*2));
 80012ac:	4ba1      	ldr	r3, [pc, #644]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	79ba      	ldrb	r2, [r7, #6]
 80012b2:	0052      	lsls	r2, r2, #1
 80012b4:	2101      	movs	r1, #1
 80012b6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ba:	4611      	mov	r1, r2
 80012bc:	4a9d      	ldr	r2, [pc, #628]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80012be:	430b      	orrs	r3, r1
 80012c0:	6013      	str	r3, [r2, #0]
            CLR_BIT(GPIOB->MODER,(Copy_u8PinNumber*2+1));
 80012c2:	4b9c      	ldr	r3, [pc, #624]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	79ba      	ldrb	r2, [r7, #6]
 80012c8:	0052      	lsls	r2, r2, #1
 80012ca:	3201      	adds	r2, #1
 80012cc:	2101      	movs	r1, #1
 80012ce:	fa01 f202 	lsl.w	r2, r1, r2
 80012d2:	43d2      	mvns	r2, r2
 80012d4:	4611      	mov	r1, r2
 80012d6:	4a97      	ldr	r2, [pc, #604]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80012d8:	400b      	ands	r3, r1
 80012da:	6013      	str	r3, [r2, #0]
            break;
 80012dc:	e030      	b.n	8001340 <GPIO_voidSetPinDirection+0x3d4>
            CLR_BIT(GPIOB->MODER,(Copy_u8PinNumber*2));
 80012de:	4b95      	ldr	r3, [pc, #596]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	79ba      	ldrb	r2, [r7, #6]
 80012e4:	0052      	lsls	r2, r2, #1
 80012e6:	2101      	movs	r1, #1
 80012e8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ec:	43d2      	mvns	r2, r2
 80012ee:	4611      	mov	r1, r2
 80012f0:	4a90      	ldr	r2, [pc, #576]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80012f2:	400b      	ands	r3, r1
 80012f4:	6013      	str	r3, [r2, #0]
            SET_BIT(GPIOB->MODER,(Copy_u8PinNumber*2+1));
 80012f6:	4b8f      	ldr	r3, [pc, #572]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	79ba      	ldrb	r2, [r7, #6]
 80012fc:	0052      	lsls	r2, r2, #1
 80012fe:	3201      	adds	r2, #1
 8001300:	2101      	movs	r1, #1
 8001302:	fa01 f202 	lsl.w	r2, r1, r2
 8001306:	4611      	mov	r1, r2
 8001308:	4a8a      	ldr	r2, [pc, #552]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 800130a:	430b      	orrs	r3, r1
 800130c:	6013      	str	r3, [r2, #0]
            break;
 800130e:	e017      	b.n	8001340 <GPIO_voidSetPinDirection+0x3d4>
            SET_BIT(GPIOB->MODER,(Copy_u8PinNumber*2));
 8001310:	4b88      	ldr	r3, [pc, #544]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	79ba      	ldrb	r2, [r7, #6]
 8001316:	0052      	lsls	r2, r2, #1
 8001318:	2101      	movs	r1, #1
 800131a:	fa01 f202 	lsl.w	r2, r1, r2
 800131e:	4611      	mov	r1, r2
 8001320:	4a84      	ldr	r2, [pc, #528]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 8001322:	430b      	orrs	r3, r1
 8001324:	6013      	str	r3, [r2, #0]
            SET_BIT(GPIOB->MODER,(Copy_u8PinNumber*2+1));
 8001326:	4b83      	ldr	r3, [pc, #524]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	79ba      	ldrb	r2, [r7, #6]
 800132c:	0052      	lsls	r2, r2, #1
 800132e:	3201      	adds	r2, #1
 8001330:	2101      	movs	r1, #1
 8001332:	fa01 f202 	lsl.w	r2, r1, r2
 8001336:	4611      	mov	r1, r2
 8001338:	4a7e      	ldr	r2, [pc, #504]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 800133a:	430b      	orrs	r3, r1
 800133c:	6013      	str	r3, [r2, #0]
            break;
 800133e:	bf00      	nop
        switch( Copy_psPinInfo->PIN_OT)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	785b      	ldrb	r3, [r3, #1]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <GPIO_voidSetPinDirection+0x3e2>
 8001348:	2b01      	cmp	r3, #1
 800134a:	d00c      	beq.n	8001366 <GPIO_voidSetPinDirection+0x3fa>
 800134c:	e016      	b.n	800137c <GPIO_voidSetPinDirection+0x410>
            CLR_BIT(GPIOB->OTYPER,(Copy_u8PinNumber));
 800134e:	4b79      	ldr	r3, [pc, #484]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	79ba      	ldrb	r2, [r7, #6]
 8001354:	2101      	movs	r1, #1
 8001356:	fa01 f202 	lsl.w	r2, r1, r2
 800135a:	43d2      	mvns	r2, r2
 800135c:	4611      	mov	r1, r2
 800135e:	4a75      	ldr	r2, [pc, #468]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 8001360:	400b      	ands	r3, r1
 8001362:	6053      	str	r3, [r2, #4]
            break;
 8001364:	e00a      	b.n	800137c <GPIO_voidSetPinDirection+0x410>
            SET_BIT(GPIOB->OTYPER,(Copy_u8PinNumber));
 8001366:	4b73      	ldr	r3, [pc, #460]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	79ba      	ldrb	r2, [r7, #6]
 800136c:	2101      	movs	r1, #1
 800136e:	fa01 f202 	lsl.w	r2, r1, r2
 8001372:	4611      	mov	r1, r2
 8001374:	4a6f      	ldr	r2, [pc, #444]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 8001376:	430b      	orrs	r3, r1
 8001378:	6053      	str	r3, [r2, #4]
            break;
 800137a:	bf00      	nop
        switch( Copy_psPinInfo->PIN_SPD)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	789b      	ldrb	r3, [r3, #2]
 8001380:	2b03      	cmp	r3, #3
 8001382:	d86f      	bhi.n	8001464 <GPIO_voidSetPinDirection+0x4f8>
 8001384:	a201      	add	r2, pc, #4	; (adr r2, 800138c <GPIO_voidSetPinDirection+0x420>)
 8001386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138a:	bf00      	nop
 800138c:	0800139d 	.word	0x0800139d
 8001390:	080013d1 	.word	0x080013d1
 8001394:	08001403 	.word	0x08001403
 8001398:	08001435 	.word	0x08001435
            CLR_BIT(GPIOB->OSPEEDR,(Copy_u8PinNumber*2));
 800139c:	4b65      	ldr	r3, [pc, #404]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	79ba      	ldrb	r2, [r7, #6]
 80013a2:	0052      	lsls	r2, r2, #1
 80013a4:	2101      	movs	r1, #1
 80013a6:	fa01 f202 	lsl.w	r2, r1, r2
 80013aa:	43d2      	mvns	r2, r2
 80013ac:	4611      	mov	r1, r2
 80013ae:	4a61      	ldr	r2, [pc, #388]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80013b0:	400b      	ands	r3, r1
 80013b2:	6093      	str	r3, [r2, #8]
            CLR_BIT(GPIOB->OSPEEDR,(Copy_u8PinNumber*2+1));
 80013b4:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	79ba      	ldrb	r2, [r7, #6]
 80013ba:	0052      	lsls	r2, r2, #1
 80013bc:	3201      	adds	r2, #1
 80013be:	2101      	movs	r1, #1
 80013c0:	fa01 f202 	lsl.w	r2, r1, r2
 80013c4:	43d2      	mvns	r2, r2
 80013c6:	4611      	mov	r1, r2
 80013c8:	4a5a      	ldr	r2, [pc, #360]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80013ca:	400b      	ands	r3, r1
 80013cc:	6093      	str	r3, [r2, #8]
            break;
 80013ce:	e049      	b.n	8001464 <GPIO_voidSetPinDirection+0x4f8>
            SET_BIT(GPIOB->OSPEEDR,(Copy_u8PinNumber*2));
 80013d0:	4b58      	ldr	r3, [pc, #352]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	79ba      	ldrb	r2, [r7, #6]
 80013d6:	0052      	lsls	r2, r2, #1
 80013d8:	2101      	movs	r1, #1
 80013da:	fa01 f202 	lsl.w	r2, r1, r2
 80013de:	4611      	mov	r1, r2
 80013e0:	4a54      	ldr	r2, [pc, #336]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80013e2:	430b      	orrs	r3, r1
 80013e4:	6093      	str	r3, [r2, #8]
            CLR_BIT(GPIOB->OSPEEDR,(Copy_u8PinNumber*2+1));
 80013e6:	4b53      	ldr	r3, [pc, #332]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	79ba      	ldrb	r2, [r7, #6]
 80013ec:	0052      	lsls	r2, r2, #1
 80013ee:	3201      	adds	r2, #1
 80013f0:	2101      	movs	r1, #1
 80013f2:	fa01 f202 	lsl.w	r2, r1, r2
 80013f6:	43d2      	mvns	r2, r2
 80013f8:	4611      	mov	r1, r2
 80013fa:	4a4e      	ldr	r2, [pc, #312]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80013fc:	400b      	ands	r3, r1
 80013fe:	6093      	str	r3, [r2, #8]
            break;
 8001400:	e030      	b.n	8001464 <GPIO_voidSetPinDirection+0x4f8>
            CLR_BIT(GPIOB->OSPEEDR,(Copy_u8PinNumber*2));
 8001402:	4b4c      	ldr	r3, [pc, #304]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	79ba      	ldrb	r2, [r7, #6]
 8001408:	0052      	lsls	r2, r2, #1
 800140a:	2101      	movs	r1, #1
 800140c:	fa01 f202 	lsl.w	r2, r1, r2
 8001410:	43d2      	mvns	r2, r2
 8001412:	4611      	mov	r1, r2
 8001414:	4a47      	ldr	r2, [pc, #284]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 8001416:	400b      	ands	r3, r1
 8001418:	6093      	str	r3, [r2, #8]
            SET_BIT(GPIOB->OSPEEDR,(Copy_u8PinNumber*2+1));
 800141a:	4b46      	ldr	r3, [pc, #280]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	79ba      	ldrb	r2, [r7, #6]
 8001420:	0052      	lsls	r2, r2, #1
 8001422:	3201      	adds	r2, #1
 8001424:	2101      	movs	r1, #1
 8001426:	fa01 f202 	lsl.w	r2, r1, r2
 800142a:	4611      	mov	r1, r2
 800142c:	4a41      	ldr	r2, [pc, #260]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 800142e:	430b      	orrs	r3, r1
 8001430:	6093      	str	r3, [r2, #8]
            break;
 8001432:	e017      	b.n	8001464 <GPIO_voidSetPinDirection+0x4f8>
            SET_BIT(GPIOB->OSPEEDR,(Copy_u8PinNumber*2));
 8001434:	4b3f      	ldr	r3, [pc, #252]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	79ba      	ldrb	r2, [r7, #6]
 800143a:	0052      	lsls	r2, r2, #1
 800143c:	2101      	movs	r1, #1
 800143e:	fa01 f202 	lsl.w	r2, r1, r2
 8001442:	4611      	mov	r1, r2
 8001444:	4a3b      	ldr	r2, [pc, #236]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 8001446:	430b      	orrs	r3, r1
 8001448:	6093      	str	r3, [r2, #8]
            SET_BIT(GPIOB->OSPEEDR,(Copy_u8PinNumber*2+1));
 800144a:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	79ba      	ldrb	r2, [r7, #6]
 8001450:	0052      	lsls	r2, r2, #1
 8001452:	3201      	adds	r2, #1
 8001454:	2101      	movs	r1, #1
 8001456:	fa01 f202 	lsl.w	r2, r1, r2
 800145a:	4611      	mov	r1, r2
 800145c:	4a35      	ldr	r2, [pc, #212]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 800145e:	430b      	orrs	r3, r1
 8001460:	6093      	str	r3, [r2, #8]
            break;
 8001462:	bf00      	nop
        switch( Copy_psPinInfo->PIN_PUPD)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	78db      	ldrb	r3, [r3, #3]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d03a      	beq.n	80014e2 <GPIO_voidSetPinDirection+0x576>
 800146c:	2b02      	cmp	r3, #2
 800146e:	f300 81b3 	bgt.w	80017d8 <GPIO_voidSetPinDirection+0x86c>
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <GPIO_voidSetPinDirection+0x510>
 8001476:	2b01      	cmp	r3, #1
 8001478:	d01a      	beq.n	80014b0 <GPIO_voidSetPinDirection+0x544>
        break;
 800147a:	e1ad      	b.n	80017d8 <GPIO_voidSetPinDirection+0x86c>
            CLR_BIT(GPIOB->PUPDR,(Copy_u8PinNumber*2));
 800147c:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	79ba      	ldrb	r2, [r7, #6]
 8001482:	0052      	lsls	r2, r2, #1
 8001484:	2101      	movs	r1, #1
 8001486:	fa01 f202 	lsl.w	r2, r1, r2
 800148a:	43d2      	mvns	r2, r2
 800148c:	4611      	mov	r1, r2
 800148e:	4a29      	ldr	r2, [pc, #164]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 8001490:	400b      	ands	r3, r1
 8001492:	60d3      	str	r3, [r2, #12]
            CLR_BIT(GPIOB->PUPDR,(Copy_u8PinNumber*2+1));
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	79ba      	ldrb	r2, [r7, #6]
 800149a:	0052      	lsls	r2, r2, #1
 800149c:	3201      	adds	r2, #1
 800149e:	2101      	movs	r1, #1
 80014a0:	fa01 f202 	lsl.w	r2, r1, r2
 80014a4:	43d2      	mvns	r2, r2
 80014a6:	4611      	mov	r1, r2
 80014a8:	4a22      	ldr	r2, [pc, #136]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80014aa:	400b      	ands	r3, r1
 80014ac:	60d3      	str	r3, [r2, #12]
            break;
 80014ae:	e031      	b.n	8001514 <GPIO_voidSetPinDirection+0x5a8>
            SET_BIT(GPIOB->PUPDR,(Copy_u8PinNumber*2));
 80014b0:	4b20      	ldr	r3, [pc, #128]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	79ba      	ldrb	r2, [r7, #6]
 80014b6:	0052      	lsls	r2, r2, #1
 80014b8:	2101      	movs	r1, #1
 80014ba:	fa01 f202 	lsl.w	r2, r1, r2
 80014be:	4611      	mov	r1, r2
 80014c0:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80014c2:	430b      	orrs	r3, r1
 80014c4:	60d3      	str	r3, [r2, #12]
            CLR_BIT(GPIOB->PUPDR,(Copy_u8PinNumber*2+1));
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	79ba      	ldrb	r2, [r7, #6]
 80014cc:	0052      	lsls	r2, r2, #1
 80014ce:	3201      	adds	r2, #1
 80014d0:	2101      	movs	r1, #1
 80014d2:	fa01 f202 	lsl.w	r2, r1, r2
 80014d6:	43d2      	mvns	r2, r2
 80014d8:	4611      	mov	r1, r2
 80014da:	4a16      	ldr	r2, [pc, #88]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80014dc:	400b      	ands	r3, r1
 80014de:	60d3      	str	r3, [r2, #12]
            break;
 80014e0:	e018      	b.n	8001514 <GPIO_voidSetPinDirection+0x5a8>
            CLR_BIT(GPIOB->PUPDR,(Copy_u8PinNumber*2));
 80014e2:	4b14      	ldr	r3, [pc, #80]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	79ba      	ldrb	r2, [r7, #6]
 80014e8:	0052      	lsls	r2, r2, #1
 80014ea:	2101      	movs	r1, #1
 80014ec:	fa01 f202 	lsl.w	r2, r1, r2
 80014f0:	43d2      	mvns	r2, r2
 80014f2:	4611      	mov	r1, r2
 80014f4:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80014f6:	400b      	ands	r3, r1
 80014f8:	60d3      	str	r3, [r2, #12]
            SET_BIT(GPIOB->PUPDR,(Copy_u8PinNumber*2+1));
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	79ba      	ldrb	r2, [r7, #6]
 8001500:	0052      	lsls	r2, r2, #1
 8001502:	3201      	adds	r2, #1
 8001504:	2101      	movs	r1, #1
 8001506:	fa01 f202 	lsl.w	r2, r1, r2
 800150a:	4611      	mov	r1, r2
 800150c:	4a09      	ldr	r2, [pc, #36]	; (8001534 <GPIO_voidSetPinDirection+0x5c8>)
 800150e:	430b      	orrs	r3, r1
 8001510:	60d3      	str	r3, [r2, #12]
            break;
 8001512:	bf00      	nop
        break;
 8001514:	e160      	b.n	80017d8 <GPIO_voidSetPinDirection+0x86c>
        switch( Copy_psPinInfo->PIN_MOD)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b03      	cmp	r3, #3
 800151c:	d870      	bhi.n	8001600 <GPIO_voidSetPinDirection+0x694>
 800151e:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <GPIO_voidSetPinDirection+0x5b8>)
 8001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001524:	08001539 	.word	0x08001539
 8001528:	0800156d 	.word	0x0800156d
 800152c:	0800159f 	.word	0x0800159f
 8001530:	080015d1 	.word	0x080015d1
 8001534:	40020400 	.word	0x40020400
            CLR_BIT(GPIOC->MODER,(Copy_u8PinNumber*2));
 8001538:	4bac      	ldr	r3, [pc, #688]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	79ba      	ldrb	r2, [r7, #6]
 800153e:	0052      	lsls	r2, r2, #1
 8001540:	2101      	movs	r1, #1
 8001542:	fa01 f202 	lsl.w	r2, r1, r2
 8001546:	43d2      	mvns	r2, r2
 8001548:	4611      	mov	r1, r2
 800154a:	4aa8      	ldr	r2, [pc, #672]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 800154c:	400b      	ands	r3, r1
 800154e:	6013      	str	r3, [r2, #0]
            CLR_BIT(GPIOC->MODER,(Copy_u8PinNumber*2+1));
 8001550:	4ba6      	ldr	r3, [pc, #664]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	79ba      	ldrb	r2, [r7, #6]
 8001556:	0052      	lsls	r2, r2, #1
 8001558:	3201      	adds	r2, #1
 800155a:	2101      	movs	r1, #1
 800155c:	fa01 f202 	lsl.w	r2, r1, r2
 8001560:	43d2      	mvns	r2, r2
 8001562:	4611      	mov	r1, r2
 8001564:	4aa1      	ldr	r2, [pc, #644]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 8001566:	400b      	ands	r3, r1
 8001568:	6013      	str	r3, [r2, #0]
            break;
 800156a:	e049      	b.n	8001600 <GPIO_voidSetPinDirection+0x694>
            SET_BIT(GPIOC->MODER,(Copy_u8PinNumber*2));
 800156c:	4b9f      	ldr	r3, [pc, #636]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	79ba      	ldrb	r2, [r7, #6]
 8001572:	0052      	lsls	r2, r2, #1
 8001574:	2101      	movs	r1, #1
 8001576:	fa01 f202 	lsl.w	r2, r1, r2
 800157a:	4611      	mov	r1, r2
 800157c:	4a9b      	ldr	r2, [pc, #620]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 800157e:	430b      	orrs	r3, r1
 8001580:	6013      	str	r3, [r2, #0]
            CLR_BIT(GPIOC->MODER,(Copy_u8PinNumber*2+1));
 8001582:	4b9a      	ldr	r3, [pc, #616]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	79ba      	ldrb	r2, [r7, #6]
 8001588:	0052      	lsls	r2, r2, #1
 800158a:	3201      	adds	r2, #1
 800158c:	2101      	movs	r1, #1
 800158e:	fa01 f202 	lsl.w	r2, r1, r2
 8001592:	43d2      	mvns	r2, r2
 8001594:	4611      	mov	r1, r2
 8001596:	4a95      	ldr	r2, [pc, #596]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 8001598:	400b      	ands	r3, r1
 800159a:	6013      	str	r3, [r2, #0]
            break;
 800159c:	e030      	b.n	8001600 <GPIO_voidSetPinDirection+0x694>
            CLR_BIT(GPIOC->MODER,(Copy_u8PinNumber*2));
 800159e:	4b93      	ldr	r3, [pc, #588]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	79ba      	ldrb	r2, [r7, #6]
 80015a4:	0052      	lsls	r2, r2, #1
 80015a6:	2101      	movs	r1, #1
 80015a8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ac:	43d2      	mvns	r2, r2
 80015ae:	4611      	mov	r1, r2
 80015b0:	4a8e      	ldr	r2, [pc, #568]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80015b2:	400b      	ands	r3, r1
 80015b4:	6013      	str	r3, [r2, #0]
            SET_BIT(GPIOC->MODER,(Copy_u8PinNumber*2+1));
 80015b6:	4b8d      	ldr	r3, [pc, #564]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	79ba      	ldrb	r2, [r7, #6]
 80015bc:	0052      	lsls	r2, r2, #1
 80015be:	3201      	adds	r2, #1
 80015c0:	2101      	movs	r1, #1
 80015c2:	fa01 f202 	lsl.w	r2, r1, r2
 80015c6:	4611      	mov	r1, r2
 80015c8:	4a88      	ldr	r2, [pc, #544]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80015ca:	430b      	orrs	r3, r1
 80015cc:	6013      	str	r3, [r2, #0]
            break;
 80015ce:	e017      	b.n	8001600 <GPIO_voidSetPinDirection+0x694>
            SET_BIT(GPIOC->MODER,(Copy_u8PinNumber*2));
 80015d0:	4b86      	ldr	r3, [pc, #536]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	79ba      	ldrb	r2, [r7, #6]
 80015d6:	0052      	lsls	r2, r2, #1
 80015d8:	2101      	movs	r1, #1
 80015da:	fa01 f202 	lsl.w	r2, r1, r2
 80015de:	4611      	mov	r1, r2
 80015e0:	4a82      	ldr	r2, [pc, #520]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80015e2:	430b      	orrs	r3, r1
 80015e4:	6013      	str	r3, [r2, #0]
            SET_BIT(GPIOC->MODER,(Copy_u8PinNumber*2+1));
 80015e6:	4b81      	ldr	r3, [pc, #516]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	79ba      	ldrb	r2, [r7, #6]
 80015ec:	0052      	lsls	r2, r2, #1
 80015ee:	3201      	adds	r2, #1
 80015f0:	2101      	movs	r1, #1
 80015f2:	fa01 f202 	lsl.w	r2, r1, r2
 80015f6:	4611      	mov	r1, r2
 80015f8:	4a7c      	ldr	r2, [pc, #496]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80015fa:	430b      	orrs	r3, r1
 80015fc:	6013      	str	r3, [r2, #0]
            break;
 80015fe:	bf00      	nop
        switch( Copy_psPinInfo->PIN_OT)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	785b      	ldrb	r3, [r3, #1]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <GPIO_voidSetPinDirection+0x6a2>
 8001608:	2b01      	cmp	r3, #1
 800160a:	d00c      	beq.n	8001626 <GPIO_voidSetPinDirection+0x6ba>
 800160c:	e016      	b.n	800163c <GPIO_voidSetPinDirection+0x6d0>
            CLR_BIT(GPIOC->OTYPER,(Copy_u8PinNumber));
 800160e:	4b77      	ldr	r3, [pc, #476]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	79ba      	ldrb	r2, [r7, #6]
 8001614:	2101      	movs	r1, #1
 8001616:	fa01 f202 	lsl.w	r2, r1, r2
 800161a:	43d2      	mvns	r2, r2
 800161c:	4611      	mov	r1, r2
 800161e:	4a73      	ldr	r2, [pc, #460]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 8001620:	400b      	ands	r3, r1
 8001622:	6053      	str	r3, [r2, #4]
            break;
 8001624:	e00a      	b.n	800163c <GPIO_voidSetPinDirection+0x6d0>
            SET_BIT(GPIOC->OTYPER,(Copy_u8PinNumber));
 8001626:	4b71      	ldr	r3, [pc, #452]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	79ba      	ldrb	r2, [r7, #6]
 800162c:	2101      	movs	r1, #1
 800162e:	fa01 f202 	lsl.w	r2, r1, r2
 8001632:	4611      	mov	r1, r2
 8001634:	4a6d      	ldr	r2, [pc, #436]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 8001636:	430b      	orrs	r3, r1
 8001638:	6053      	str	r3, [r2, #4]
            break;
 800163a:	bf00      	nop
        switch( Copy_psPinInfo->PIN_SPD)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	789b      	ldrb	r3, [r3, #2]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d86f      	bhi.n	8001724 <GPIO_voidSetPinDirection+0x7b8>
 8001644:	a201      	add	r2, pc, #4	; (adr r2, 800164c <GPIO_voidSetPinDirection+0x6e0>)
 8001646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164a:	bf00      	nop
 800164c:	0800165d 	.word	0x0800165d
 8001650:	08001691 	.word	0x08001691
 8001654:	080016c3 	.word	0x080016c3
 8001658:	080016f5 	.word	0x080016f5
            CLR_BIT(GPIOC->OSPEEDR,(Copy_u8PinNumber*2));
 800165c:	4b63      	ldr	r3, [pc, #396]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	79ba      	ldrb	r2, [r7, #6]
 8001662:	0052      	lsls	r2, r2, #1
 8001664:	2101      	movs	r1, #1
 8001666:	fa01 f202 	lsl.w	r2, r1, r2
 800166a:	43d2      	mvns	r2, r2
 800166c:	4611      	mov	r1, r2
 800166e:	4a5f      	ldr	r2, [pc, #380]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 8001670:	400b      	ands	r3, r1
 8001672:	6093      	str	r3, [r2, #8]
            CLR_BIT(GPIOC->OSPEEDR,(Copy_u8PinNumber*2+1));
 8001674:	4b5d      	ldr	r3, [pc, #372]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	79ba      	ldrb	r2, [r7, #6]
 800167a:	0052      	lsls	r2, r2, #1
 800167c:	3201      	adds	r2, #1
 800167e:	2101      	movs	r1, #1
 8001680:	fa01 f202 	lsl.w	r2, r1, r2
 8001684:	43d2      	mvns	r2, r2
 8001686:	4611      	mov	r1, r2
 8001688:	4a58      	ldr	r2, [pc, #352]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 800168a:	400b      	ands	r3, r1
 800168c:	6093      	str	r3, [r2, #8]
            break;
 800168e:	e049      	b.n	8001724 <GPIO_voidSetPinDirection+0x7b8>
            SET_BIT(GPIOC->OSPEEDR,(Copy_u8PinNumber*2));
 8001690:	4b56      	ldr	r3, [pc, #344]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	79ba      	ldrb	r2, [r7, #6]
 8001696:	0052      	lsls	r2, r2, #1
 8001698:	2101      	movs	r1, #1
 800169a:	fa01 f202 	lsl.w	r2, r1, r2
 800169e:	4611      	mov	r1, r2
 80016a0:	4a52      	ldr	r2, [pc, #328]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80016a2:	430b      	orrs	r3, r1
 80016a4:	6093      	str	r3, [r2, #8]
            CLR_BIT(GPIOC->OSPEEDR,(Copy_u8PinNumber*2+1));
 80016a6:	4b51      	ldr	r3, [pc, #324]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	79ba      	ldrb	r2, [r7, #6]
 80016ac:	0052      	lsls	r2, r2, #1
 80016ae:	3201      	adds	r2, #1
 80016b0:	2101      	movs	r1, #1
 80016b2:	fa01 f202 	lsl.w	r2, r1, r2
 80016b6:	43d2      	mvns	r2, r2
 80016b8:	4611      	mov	r1, r2
 80016ba:	4a4c      	ldr	r2, [pc, #304]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80016bc:	400b      	ands	r3, r1
 80016be:	6093      	str	r3, [r2, #8]
            break;
 80016c0:	e030      	b.n	8001724 <GPIO_voidSetPinDirection+0x7b8>
            CLR_BIT(GPIOC->OSPEEDR,(Copy_u8PinNumber*2));
 80016c2:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	79ba      	ldrb	r2, [r7, #6]
 80016c8:	0052      	lsls	r2, r2, #1
 80016ca:	2101      	movs	r1, #1
 80016cc:	fa01 f202 	lsl.w	r2, r1, r2
 80016d0:	43d2      	mvns	r2, r2
 80016d2:	4611      	mov	r1, r2
 80016d4:	4a45      	ldr	r2, [pc, #276]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80016d6:	400b      	ands	r3, r1
 80016d8:	6093      	str	r3, [r2, #8]
            SET_BIT(GPIOC->OSPEEDR,(Copy_u8PinNumber*2+1));
 80016da:	4b44      	ldr	r3, [pc, #272]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	79ba      	ldrb	r2, [r7, #6]
 80016e0:	0052      	lsls	r2, r2, #1
 80016e2:	3201      	adds	r2, #1
 80016e4:	2101      	movs	r1, #1
 80016e6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ea:	4611      	mov	r1, r2
 80016ec:	4a3f      	ldr	r2, [pc, #252]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80016ee:	430b      	orrs	r3, r1
 80016f0:	6093      	str	r3, [r2, #8]
            break;
 80016f2:	e017      	b.n	8001724 <GPIO_voidSetPinDirection+0x7b8>
            SET_BIT(GPIOC->OSPEEDR,(Copy_u8PinNumber*2));
 80016f4:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	79ba      	ldrb	r2, [r7, #6]
 80016fa:	0052      	lsls	r2, r2, #1
 80016fc:	2101      	movs	r1, #1
 80016fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001702:	4611      	mov	r1, r2
 8001704:	4a39      	ldr	r2, [pc, #228]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 8001706:	430b      	orrs	r3, r1
 8001708:	6093      	str	r3, [r2, #8]
            SET_BIT(GPIOC->OSPEEDR,(Copy_u8PinNumber*2+1));
 800170a:	4b38      	ldr	r3, [pc, #224]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	79ba      	ldrb	r2, [r7, #6]
 8001710:	0052      	lsls	r2, r2, #1
 8001712:	3201      	adds	r2, #1
 8001714:	2101      	movs	r1, #1
 8001716:	fa01 f202 	lsl.w	r2, r1, r2
 800171a:	4611      	mov	r1, r2
 800171c:	4a33      	ldr	r2, [pc, #204]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 800171e:	430b      	orrs	r3, r1
 8001720:	6093      	str	r3, [r2, #8]
            break;
 8001722:	bf00      	nop
        switch( Copy_psPinInfo->PIN_PUPD)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	78db      	ldrb	r3, [r3, #3]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d039      	beq.n	80017a0 <GPIO_voidSetPinDirection+0x834>
 800172c:	2b02      	cmp	r3, #2
 800172e:	dc55      	bgt.n	80017dc <GPIO_voidSetPinDirection+0x870>
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <GPIO_voidSetPinDirection+0x7ce>
 8001734:	2b01      	cmp	r3, #1
 8001736:	d01a      	beq.n	800176e <GPIO_voidSetPinDirection+0x802>
        break;
 8001738:	e050      	b.n	80017dc <GPIO_voidSetPinDirection+0x870>
            CLR_BIT(GPIOC->PUPDR,(Copy_u8PinNumber*2));
 800173a:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	79ba      	ldrb	r2, [r7, #6]
 8001740:	0052      	lsls	r2, r2, #1
 8001742:	2101      	movs	r1, #1
 8001744:	fa01 f202 	lsl.w	r2, r1, r2
 8001748:	43d2      	mvns	r2, r2
 800174a:	4611      	mov	r1, r2
 800174c:	4a27      	ldr	r2, [pc, #156]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 800174e:	400b      	ands	r3, r1
 8001750:	60d3      	str	r3, [r2, #12]
            CLR_BIT(GPIOC->PUPDR,(Copy_u8PinNumber*2+1));
 8001752:	4b26      	ldr	r3, [pc, #152]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	79ba      	ldrb	r2, [r7, #6]
 8001758:	0052      	lsls	r2, r2, #1
 800175a:	3201      	adds	r2, #1
 800175c:	2101      	movs	r1, #1
 800175e:	fa01 f202 	lsl.w	r2, r1, r2
 8001762:	43d2      	mvns	r2, r2
 8001764:	4611      	mov	r1, r2
 8001766:	4a21      	ldr	r2, [pc, #132]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 8001768:	400b      	ands	r3, r1
 800176a:	60d3      	str	r3, [r2, #12]
            break;
 800176c:	e031      	b.n	80017d2 <GPIO_voidSetPinDirection+0x866>
            SET_BIT(GPIOC->PUPDR,(Copy_u8PinNumber*2));
 800176e:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	79ba      	ldrb	r2, [r7, #6]
 8001774:	0052      	lsls	r2, r2, #1
 8001776:	2101      	movs	r1, #1
 8001778:	fa01 f202 	lsl.w	r2, r1, r2
 800177c:	4611      	mov	r1, r2
 800177e:	4a1b      	ldr	r2, [pc, #108]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 8001780:	430b      	orrs	r3, r1
 8001782:	60d3      	str	r3, [r2, #12]
            CLR_BIT(GPIOC->PUPDR,(Copy_u8PinNumber*2+1));
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	79ba      	ldrb	r2, [r7, #6]
 800178a:	0052      	lsls	r2, r2, #1
 800178c:	3201      	adds	r2, #1
 800178e:	2101      	movs	r1, #1
 8001790:	fa01 f202 	lsl.w	r2, r1, r2
 8001794:	43d2      	mvns	r2, r2
 8001796:	4611      	mov	r1, r2
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 800179a:	400b      	ands	r3, r1
 800179c:	60d3      	str	r3, [r2, #12]
            break;
 800179e:	e018      	b.n	80017d2 <GPIO_voidSetPinDirection+0x866>
            CLR_BIT(GPIOC->PUPDR,(Copy_u8PinNumber*2));
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	79ba      	ldrb	r2, [r7, #6]
 80017a6:	0052      	lsls	r2, r2, #1
 80017a8:	2101      	movs	r1, #1
 80017aa:	fa01 f202 	lsl.w	r2, r1, r2
 80017ae:	43d2      	mvns	r2, r2
 80017b0:	4611      	mov	r1, r2
 80017b2:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80017b4:	400b      	ands	r3, r1
 80017b6:	60d3      	str	r3, [r2, #12]
            SET_BIT(GPIOC->PUPDR,(Copy_u8PinNumber*2+1));
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	79ba      	ldrb	r2, [r7, #6]
 80017be:	0052      	lsls	r2, r2, #1
 80017c0:	3201      	adds	r2, #1
 80017c2:	2101      	movs	r1, #1
 80017c4:	fa01 f202 	lsl.w	r2, r1, r2
 80017c8:	4611      	mov	r1, r2
 80017ca:	4a08      	ldr	r2, [pc, #32]	; (80017ec <GPIO_voidSetPinDirection+0x880>)
 80017cc:	430b      	orrs	r3, r1
 80017ce:	60d3      	str	r3, [r2, #12]
            break;
 80017d0:	bf00      	nop
        break;
 80017d2:	e003      	b.n	80017dc <GPIO_voidSetPinDirection+0x870>
        break;
 80017d4:	bf00      	nop
 80017d6:	e002      	b.n	80017de <GPIO_voidSetPinDirection+0x872>
        break;
 80017d8:	bf00      	nop
 80017da:	e000      	b.n	80017de <GPIO_voidSetPinDirection+0x872>
        break;
 80017dc:	bf00      	nop
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40020800 	.word	0x40020800

080017f0 <GPIO_voidSetAlternativeFunction>:

void GPIO_voidSetAlternativeFunction(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8AltFun)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
 80017fa:	460b      	mov	r3, r1
 80017fc:	71bb      	strb	r3, [r7, #6]
 80017fe:	4613      	mov	r3, r2
 8001800:	717b      	strb	r3, [r7, #5]
	if(Copy_u8PinNumber<8)
 8001802:	79bb      	ldrb	r3, [r7, #6]
 8001804:	2b07      	cmp	r3, #7
 8001806:	d852      	bhi.n	80018ae <GPIO_voidSetAlternativeFunction+0xbe>
	{
	      switch(Copy_u8PortName)
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d037      	beq.n	800187e <GPIO_voidSetAlternativeFunction+0x8e>
 800180e:	2b02      	cmp	r3, #2
 8001810:	f300 80ad 	bgt.w	800196e <GPIO_voidSetAlternativeFunction+0x17e>
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <GPIO_voidSetAlternativeFunction+0x2e>
 8001818:	2b01      	cmp	r3, #1
 800181a:	d018      	beq.n	800184e <GPIO_voidSetAlternativeFunction+0x5e>
 800181c:	e0a7      	b.n	800196e <GPIO_voidSetAlternativeFunction+0x17e>
	       {
	        case  GPIO_PORTA:
	             GPIOA->AFRL &= ~(0b1111<<(Copy_u8PinNumber*4));
 800181e:	4b57      	ldr	r3, [pc, #348]	; (800197c <GPIO_voidSetAlternativeFunction+0x18c>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	79ba      	ldrb	r2, [r7, #6]
 8001824:	0092      	lsls	r2, r2, #2
 8001826:	210f      	movs	r1, #15
 8001828:	fa01 f202 	lsl.w	r2, r1, r2
 800182c:	43d2      	mvns	r2, r2
 800182e:	4611      	mov	r1, r2
 8001830:	4a52      	ldr	r2, [pc, #328]	; (800197c <GPIO_voidSetAlternativeFunction+0x18c>)
 8001832:	400b      	ands	r3, r1
 8001834:	6213      	str	r3, [r2, #32]
	             GPIOA->AFRL |= (Copy_u8AltFun<<(Copy_u8PinNumber*4));
 8001836:	4b51      	ldr	r3, [pc, #324]	; (800197c <GPIO_voidSetAlternativeFunction+0x18c>)
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	7979      	ldrb	r1, [r7, #5]
 800183c:	79ba      	ldrb	r2, [r7, #6]
 800183e:	0092      	lsls	r2, r2, #2
 8001840:	fa01 f202 	lsl.w	r2, r1, r2
 8001844:	4611      	mov	r1, r2
 8001846:	4a4d      	ldr	r2, [pc, #308]	; (800197c <GPIO_voidSetAlternativeFunction+0x18c>)
 8001848:	430b      	orrs	r3, r1
 800184a:	6213      	str	r3, [r2, #32]
	            break;
 800184c:	e08f      	b.n	800196e <GPIO_voidSetAlternativeFunction+0x17e>

	        case  GPIO_PORTB:
	             GPIOB->AFRL &= ~(0b1111<<(Copy_u8PinNumber*4));
 800184e:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <GPIO_voidSetAlternativeFunction+0x190>)
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	79ba      	ldrb	r2, [r7, #6]
 8001854:	0092      	lsls	r2, r2, #2
 8001856:	210f      	movs	r1, #15
 8001858:	fa01 f202 	lsl.w	r2, r1, r2
 800185c:	43d2      	mvns	r2, r2
 800185e:	4611      	mov	r1, r2
 8001860:	4a47      	ldr	r2, [pc, #284]	; (8001980 <GPIO_voidSetAlternativeFunction+0x190>)
 8001862:	400b      	ands	r3, r1
 8001864:	6213      	str	r3, [r2, #32]
	             GPIOB->AFRL |= (Copy_u8AltFun<<(Copy_u8PinNumber*4));
 8001866:	4b46      	ldr	r3, [pc, #280]	; (8001980 <GPIO_voidSetAlternativeFunction+0x190>)
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	7979      	ldrb	r1, [r7, #5]
 800186c:	79ba      	ldrb	r2, [r7, #6]
 800186e:	0092      	lsls	r2, r2, #2
 8001870:	fa01 f202 	lsl.w	r2, r1, r2
 8001874:	4611      	mov	r1, r2
 8001876:	4a42      	ldr	r2, [pc, #264]	; (8001980 <GPIO_voidSetAlternativeFunction+0x190>)
 8001878:	430b      	orrs	r3, r1
 800187a:	6213      	str	r3, [r2, #32]

	            break;
 800187c:	e077      	b.n	800196e <GPIO_voidSetAlternativeFunction+0x17e>

	        case  GPIO_PORTC:
	             GPIOC->AFRL &= ~(0b1111<<(Copy_u8PinNumber*4));
 800187e:	4b41      	ldr	r3, [pc, #260]	; (8001984 <GPIO_voidSetAlternativeFunction+0x194>)
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	79ba      	ldrb	r2, [r7, #6]
 8001884:	0092      	lsls	r2, r2, #2
 8001886:	210f      	movs	r1, #15
 8001888:	fa01 f202 	lsl.w	r2, r1, r2
 800188c:	43d2      	mvns	r2, r2
 800188e:	4611      	mov	r1, r2
 8001890:	4a3c      	ldr	r2, [pc, #240]	; (8001984 <GPIO_voidSetAlternativeFunction+0x194>)
 8001892:	400b      	ands	r3, r1
 8001894:	6213      	str	r3, [r2, #32]
	             GPIOC->AFRL |= (Copy_u8AltFun<<(Copy_u8PinNumber*4));
 8001896:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <GPIO_voidSetAlternativeFunction+0x194>)
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	7979      	ldrb	r1, [r7, #5]
 800189c:	79ba      	ldrb	r2, [r7, #6]
 800189e:	0092      	lsls	r2, r2, #2
 80018a0:	fa01 f202 	lsl.w	r2, r1, r2
 80018a4:	4611      	mov	r1, r2
 80018a6:	4a37      	ldr	r2, [pc, #220]	; (8001984 <GPIO_voidSetAlternativeFunction+0x194>)
 80018a8:	430b      	orrs	r3, r1
 80018aa:	6213      	str	r3, [r2, #32]

	            break;
 80018ac:	e05f      	b.n	800196e <GPIO_voidSetAlternativeFunction+0x17e>
	       }
	}
	else if(Copy_u8PinNumber>=8&& Copy_u8PinNumber<16)
 80018ae:	79bb      	ldrb	r3, [r7, #6]
 80018b0:	2b07      	cmp	r3, #7
 80018b2:	d95b      	bls.n	800196c <GPIO_voidSetAlternativeFunction+0x17c>
 80018b4:	79bb      	ldrb	r3, [r7, #6]
 80018b6:	2b0f      	cmp	r3, #15
 80018b8:	d858      	bhi.n	800196c <GPIO_voidSetAlternativeFunction+0x17c>
	{
	      switch(Copy_u8PortName)
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d03b      	beq.n	8001938 <GPIO_voidSetAlternativeFunction+0x148>
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	dc54      	bgt.n	800196e <GPIO_voidSetAlternativeFunction+0x17e>
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <GPIO_voidSetAlternativeFunction+0xde>
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d01a      	beq.n	8001902 <GPIO_voidSetAlternativeFunction+0x112>
 80018cc:	e04f      	b.n	800196e <GPIO_voidSetAlternativeFunction+0x17e>
	       {
	        case  GPIO_PORTA:
	             GPIOA->AFRL &= ~(0b1111<<( (Copy_u8PinNumber-8) *4) );
 80018ce:	4b2b      	ldr	r3, [pc, #172]	; (800197c <GPIO_voidSetAlternativeFunction+0x18c>)
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	79ba      	ldrb	r2, [r7, #6]
 80018d4:	3a08      	subs	r2, #8
 80018d6:	0092      	lsls	r2, r2, #2
 80018d8:	210f      	movs	r1, #15
 80018da:	fa01 f202 	lsl.w	r2, r1, r2
 80018de:	43d2      	mvns	r2, r2
 80018e0:	4611      	mov	r1, r2
 80018e2:	4a26      	ldr	r2, [pc, #152]	; (800197c <GPIO_voidSetAlternativeFunction+0x18c>)
 80018e4:	400b      	ands	r3, r1
 80018e6:	6213      	str	r3, [r2, #32]
	             GPIOA->AFRL |= (Copy_u8AltFun<<(  (Copy_u8PinNumber-8)*4));
 80018e8:	4b24      	ldr	r3, [pc, #144]	; (800197c <GPIO_voidSetAlternativeFunction+0x18c>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	7979      	ldrb	r1, [r7, #5]
 80018ee:	79ba      	ldrb	r2, [r7, #6]
 80018f0:	3a08      	subs	r2, #8
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	fa01 f202 	lsl.w	r2, r1, r2
 80018f8:	4611      	mov	r1, r2
 80018fa:	4a20      	ldr	r2, [pc, #128]	; (800197c <GPIO_voidSetAlternativeFunction+0x18c>)
 80018fc:	430b      	orrs	r3, r1
 80018fe:	6213      	str	r3, [r2, #32]
	            break;
 8001900:	e035      	b.n	800196e <GPIO_voidSetAlternativeFunction+0x17e>

	        case  GPIO_PORTB:
	             GPIOB->AFRL &= ~(0b1111<<( (Copy_u8PinNumber-8)*4));
 8001902:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <GPIO_voidSetAlternativeFunction+0x190>)
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	79ba      	ldrb	r2, [r7, #6]
 8001908:	3a08      	subs	r2, #8
 800190a:	0092      	lsls	r2, r2, #2
 800190c:	210f      	movs	r1, #15
 800190e:	fa01 f202 	lsl.w	r2, r1, r2
 8001912:	43d2      	mvns	r2, r2
 8001914:	4611      	mov	r1, r2
 8001916:	4a1a      	ldr	r2, [pc, #104]	; (8001980 <GPIO_voidSetAlternativeFunction+0x190>)
 8001918:	400b      	ands	r3, r1
 800191a:	6213      	str	r3, [r2, #32]
	             GPIOB->AFRL |= ~(Copy_u8AltFun<<( (Copy_u8PinNumber-8)*4));
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <GPIO_voidSetAlternativeFunction+0x190>)
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	7979      	ldrb	r1, [r7, #5]
 8001922:	79ba      	ldrb	r2, [r7, #6]
 8001924:	3a08      	subs	r2, #8
 8001926:	0092      	lsls	r2, r2, #2
 8001928:	fa01 f202 	lsl.w	r2, r1, r2
 800192c:	43d2      	mvns	r2, r2
 800192e:	4611      	mov	r1, r2
 8001930:	4a13      	ldr	r2, [pc, #76]	; (8001980 <GPIO_voidSetAlternativeFunction+0x190>)
 8001932:	430b      	orrs	r3, r1
 8001934:	6213      	str	r3, [r2, #32]

	            break;
 8001936:	e01a      	b.n	800196e <GPIO_voidSetAlternativeFunction+0x17e>

	        case  GPIO_PORTC:
	             GPIOC->AFRL &= ~(0b1111<<( (Copy_u8PinNumber-8)*4));
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <GPIO_voidSetAlternativeFunction+0x194>)
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	79ba      	ldrb	r2, [r7, #6]
 800193e:	3a08      	subs	r2, #8
 8001940:	0092      	lsls	r2, r2, #2
 8001942:	210f      	movs	r1, #15
 8001944:	fa01 f202 	lsl.w	r2, r1, r2
 8001948:	43d2      	mvns	r2, r2
 800194a:	4611      	mov	r1, r2
 800194c:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <GPIO_voidSetAlternativeFunction+0x194>)
 800194e:	400b      	ands	r3, r1
 8001950:	6213      	str	r3, [r2, #32]
	             GPIOC->AFRL |= (Copy_u8AltFun<<( (Copy_u8PinNumber-8)*4));
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <GPIO_voidSetAlternativeFunction+0x194>)
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	7979      	ldrb	r1, [r7, #5]
 8001958:	79ba      	ldrb	r2, [r7, #6]
 800195a:	3a08      	subs	r2, #8
 800195c:	0092      	lsls	r2, r2, #2
 800195e:	fa01 f202 	lsl.w	r2, r1, r2
 8001962:	4611      	mov	r1, r2
 8001964:	4a07      	ldr	r2, [pc, #28]	; (8001984 <GPIO_voidSetAlternativeFunction+0x194>)
 8001966:	430b      	orrs	r3, r1
 8001968:	6213      	str	r3, [r2, #32]

	            break;
 800196a:	e000      	b.n	800196e <GPIO_voidSetAlternativeFunction+0x17e>
	       }
	}
 800196c:	bf00      	nop
	asm("NOP");
 800196e:	bf00      	nop
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	40020000 	.word	0x40020000
 8001980:	40020400 	.word	0x40020400
 8001984:	40020800 	.word	0x40020800

08001988 <MRCC_voidSystemClkInit>:
#include "../Inc/RCC_INTERFACE.h"
#include "../Inc/RCC_PRIVATE.h"
#include "../Inc/RCC_CONFIG.h"

void MRCC_voidSystemClkInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
#if RCC_CLK_SECURITY_SYSTEM == ENABLE
    SET_BIT(RCC->CR, CSSON);

# elif RCC_CLK_SECURITY_SYSTEM == DISABLE
    CLR_BIT(RCC->CR, CSSON);
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <MRCC_voidSystemClkInit+0x74>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1a      	ldr	r2, [pc, #104]	; (80019fc <MRCC_voidSystemClkInit+0x74>)
 8001992:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001996:	6013      	str	r3, [r2, #0]

#endif

#if RCC_HSE_CLK_BYBASS == NO
    CLR_BIT(RCC->CR, HSEBYPASS);
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <MRCC_voidSystemClkInit+0x74>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a17      	ldr	r2, [pc, #92]	; (80019fc <MRCC_voidSystemClkInit+0x74>)
 800199e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a2:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC->CR, HSEON);
	
#elif CLK_SOURCE == HSE

	// 1- Turn on HSE Clock
	SET_BIT(RCC->CR, HSEON);
 80019a4:	4b15      	ldr	r3, [pc, #84]	; (80019fc <MRCC_voidSystemClkInit+0x74>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <MRCC_voidSystemClkInit+0x74>)
 80019aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ae:	6013      	str	r3, [r2, #0]
	// 2- Check HSE is Ready
	while (GET_BIT(RCC->CR, HSERDY) == 0);
 80019b0:	bf00      	nop
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <MRCC_voidSystemClkInit+0x74>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	0c5b      	lsrs	r3, r3, #17
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f8      	beq.n	80019b2 <MRCC_voidSystemClkInit+0x2a>
	// 3- Switch to HSE
	SET_BIT(RCC->CFGR, SW0);
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <MRCC_voidSystemClkInit+0x74>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <MRCC_voidSystemClkInit+0x74>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6093      	str	r3, [r2, #8]
	CLR_BIT(RCC->CFGR, SW1);
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <MRCC_voidSystemClkInit+0x74>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <MRCC_voidSystemClkInit+0x74>)
 80019d2:	f023 0302 	bic.w	r3, r3, #2
 80019d6:	6093      	str	r3, [r2, #8]
	// 4- Turn off PLL
	CLR_BIT(RCC->CR, PLLON);
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <MRCC_voidSystemClkInit+0x74>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <MRCC_voidSystemClkInit+0x74>)
 80019de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019e2:	6013      	str	r3, [r2, #0]
	// 5- Turn off HSI
	CLR_BIT(RCC->CR, HSION);
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <MRCC_voidSystemClkInit+0x74>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a04      	ldr	r2, [pc, #16]	; (80019fc <MRCC_voidSystemClkInit+0x74>)
 80019ea:	f023 0301 	bic.w	r3, r3, #1
 80019ee:	6013      	str	r3, [r2, #0]
#error Wrong Clock Configuration
#endif
#else
#error Wrong Clock Configuration
#endif	
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800

08001a00 <MRCC_voidPeripheralEnable>:
void MRCC_voidPeripheralEnable(u8 copy_u8Bus, u8 copy_u8Peripheral)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	460a      	mov	r2, r1
 8001a0a:	71fb      	strb	r3, [r7, #7]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	71bb      	strb	r3, [r7, #6]
	/* CHECK RANGE */
    if(copy_u8Peripheral < PeripheralRange && copy_u8Bus <= APB2)
 8001a10:	79bb      	ldrb	r3, [r7, #6]
 8001a12:	2b1f      	cmp	r3, #31
 8001a14:	d83c      	bhi.n	8001a90 <MRCC_voidPeripheralEnable+0x90>
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d839      	bhi.n	8001a90 <MRCC_voidPeripheralEnable+0x90>
    {
        switch(copy_u8Bus)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d836      	bhi.n	8001a90 <MRCC_voidPeripheralEnable+0x90>
 8001a22:	a201      	add	r2, pc, #4	; (adr r2, 8001a28 <MRCC_voidPeripheralEnable+0x28>)
 8001a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a28:	08001a39 	.word	0x08001a39
 8001a2c:	08001a4f 	.word	0x08001a4f
 8001a30:	08001a65 	.word	0x08001a65
 8001a34:	08001a7b 	.word	0x08001a7b
        {
        case AHB1 :
            SET_BIT(RCC->AHB1ENR, copy_u8Peripheral);
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <MRCC_voidPeripheralEnable+0x9c>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	79ba      	ldrb	r2, [r7, #6]
 8001a3e:	2101      	movs	r1, #1
 8001a40:	fa01 f202 	lsl.w	r2, r1, r2
 8001a44:	4611      	mov	r1, r2
 8001a46:	4a15      	ldr	r2, [pc, #84]	; (8001a9c <MRCC_voidPeripheralEnable+0x9c>)
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8001a4c:	e020      	b.n	8001a90 <MRCC_voidPeripheralEnable+0x90>
        case AHB2 :
            SET_BIT(RCC->AHB2ENR, copy_u8Peripheral);
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <MRCC_voidPeripheralEnable+0x9c>)
 8001a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a52:	79ba      	ldrb	r2, [r7, #6]
 8001a54:	2101      	movs	r1, #1
 8001a56:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <MRCC_voidPeripheralEnable+0x9c>)
 8001a5e:	430b      	orrs	r3, r1
 8001a60:	6353      	str	r3, [r2, #52]	; 0x34
            break;
 8001a62:	e015      	b.n	8001a90 <MRCC_voidPeripheralEnable+0x90>
        case APB1 :
            SET_BIT(RCC->APB1ENR, copy_u8Peripheral);
 8001a64:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <MRCC_voidPeripheralEnable+0x9c>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	79ba      	ldrb	r2, [r7, #6]
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a70:	4611      	mov	r1, r2
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <MRCC_voidPeripheralEnable+0x9c>)
 8001a74:	430b      	orrs	r3, r1
 8001a76:	6413      	str	r3, [r2, #64]	; 0x40
            break;
 8001a78:	e00a      	b.n	8001a90 <MRCC_voidPeripheralEnable+0x90>
        case APB2 :
            SET_BIT(RCC->APB2ENR, copy_u8Peripheral);
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <MRCC_voidPeripheralEnable+0x9c>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	79ba      	ldrb	r2, [r7, #6]
 8001a80:	2101      	movs	r1, #1
 8001a82:	fa01 f202 	lsl.w	r2, r1, r2
 8001a86:	4611      	mov	r1, r2
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <MRCC_voidPeripheralEnable+0x9c>)
 8001a8a:	430b      	orrs	r3, r1
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8001a8e:	bf00      	nop
    }
    else
    {
        //out of range
    }
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <SPI1_IRQHandler>:

	MSPI1_CallBack = ptr;

}

void SPI1_IRQHandler(void){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0

	MSPI1_CallBack();
 8001aa4:	4b02      	ldr	r3, [pc, #8]	; (8001ab0 <SPI1_IRQHandler+0x10>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4798      	blx	r3

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000074 	.word	0x20000074

08001ab4 <MCAL_TIM_General_Config>:
/*----------------------------------------------------------------------------------------------------------------------------------------------*/
/// @brief MCAL_TIM_General_Config : in this Function we just Configure the Counting mode and the clock.
/// @param timx                    : the general Timer handler struct.
/// @return the Function state.
TIM_FUN_STATE   MCAL_TIM_General_Config(TIM_HANDLER   *timx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
    // Check parameters.
    if (timx ->TIMx == NULL){ return TIM_ERROR;}
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <MCAL_TIM_General_Config+0x14>
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e24f      	b.n	8001f68 <MCAL_TIM_General_Config+0x4b4>
    // Disable the Peripheral.
    CLR_BIT(timx ->TIMx ->CR1, CR1_CEN);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0201 	bic.w	r2, r2, #1
 8001ad8:	b292      	uxth	r2, r2
 8001ada:	801a      	strh	r2, [r3, #0]

    // Configure the Counting Type.
    if (timx ->Count_M != Center_Aligned)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	791b      	ldrb	r3, [r3, #4]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d023      	beq.n	8001b2c <MCAL_TIM_General_Config+0x78>
    {
        CLR_BIT(timx ->TIMx ->CR1 , CR1_CMS_0 | CR1_CMS_1);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0226 	bic.w	r2, r2, #38	; 0x26
 8001af4:	b292      	uxth	r2, r2
 8001af6:	801a      	strh	r2, [r3, #0]
        CLR_BIT(timx ->TIMx ->CR1 , CR1_DIR);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0210 	bic.w	r2, r2, #16
 8001b08:	b292      	uxth	r2, r2
 8001b0a:	801a      	strh	r2, [r3, #0]
        __WRITE_BIT_(timx ->TIMx ->CR1 ,CR1_DIR ,timx ->Count_M);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	b21a      	sxth	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	791b      	ldrb	r3, [r3, #4]
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	b21a      	sxth	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	b292      	uxth	r2, r2
 8001b28:	801a      	strh	r2, [r3, #0]
 8001b2a:	e013      	b.n	8001b54 <MCAL_TIM_General_Config+0xa0>
    }
    else
    {
        CLR_BIT(timx ->TIMx ->CR1 , CR1_CMS_0 | CR1_CMS_1);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0226 	bic.w	r2, r2, #38	; 0x26
 8001b3c:	b292      	uxth	r2, r2
 8001b3e:	801a      	strh	r2, [r3, #0]
        __WRITE_BIT_(timx ->TIMx ->CR1 ,CR1_CMS_0 ,1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 0220 	orr.w	r2, r2, #32
 8001b50:	b292      	uxth	r2, r2
 8001b52:	801a      	strh	r2, [r3, #0]
    }

    // clock Configuration.
    /*--------First---------Internal_clk ---> (SMS=000) Configuration.--------------------------------*/
    // clear the Slave Selection First to configure the other Options.
    CLR_BIT(timx ->TIMx ->SMCR, SMCR_SMS_0 | SMCR_SMS_1 | SMCR_SMS_2);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	891b      	ldrh	r3, [r3, #8]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0203 	bic.w	r2, r2, #3
 8001b64:	b292      	uxth	r2, r2
 8001b66:	811a      	strh	r2, [r3, #8]
    // clear External Clock Enable bit (ECE.)
    CLR_BIT(timx ->TIMx ->SMCR, SMCR_ECE);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	891b      	ldrh	r3, [r3, #8]
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b78:	b292      	uxth	r2, r2
 8001b7a:	811a      	strh	r2, [r3, #8]

    switch (timx ->Peri_Clock)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	7b5b      	ldrb	r3, [r3, #13]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d003      	beq.n	8001b8c <MCAL_TIM_General_Config+0xd8>
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	f000 813d 	beq.w	8001e04 <MCAL_TIM_General_Config+0x350>

            break;
        }
        default :   //Internal_clk ---> (SMS=000).
            /*  DO Nothing Additional */
            break;
 8001b8a:	e1b6      	b.n	8001efa <MCAL_TIM_General_Config+0x446>
            if (timx ->ext_clk_m1_config ->trigger_Selection == Filtered_Timer_Input_1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b05      	cmp	r3, #5
 8001b94:	d10a      	bne.n	8001bac <MCAL_TIM_General_Config+0xf8>
                __WRITE_BIT_(timx ->TIMx ->CCMR1, CCMR1_CC1S_0 , 0b01); // 01: CC1 channel is configured as input, IC1 is mapped on TI1
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	8b1b      	ldrh	r3, [r3, #24]
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	b292      	uxth	r2, r2
 8001ba8:	831a      	strh	r2, [r3, #24]
 8001baa:	e00e      	b.n	8001bca <MCAL_TIM_General_Config+0x116>
            else if (timx ->ext_clk_m1_config ->trigger_Selection == Filtered_Timer_Input_2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d109      	bne.n	8001bca <MCAL_TIM_General_Config+0x116>
                __WRITE_BIT_(timx ->TIMx ->CCMR1, CCMR1_CC2S_0 , 0b01); // 01: CC2 channel is configured as input, IC2 is mapped on TI2
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	8b1b      	ldrh	r3, [r3, #24]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bc6:	b292      	uxth	r2, r2
 8001bc8:	831a      	strh	r2, [r3, #24]
            if (timx ->ext_clk_m1_config ->trigger_Selection == Filtered_Timer_Input_1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d11a      	bne.n	8001c0a <MCAL_TIM_General_Config+0x156>
                CLR_BIT(timx ->TIMx ->CCMR1, CCMR1_IC1F_0 | CCMR1_IC1F_1 | CCMR1_IC1F_2 | CCMR1_IC1F_3 );
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	8b1b      	ldrh	r3, [r3, #24]
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0217 	bic.w	r2, r2, #23
 8001be4:	b292      	uxth	r2, r2
 8001be6:	831a      	strh	r2, [r3, #24]
                __WRITE_BIT_(timx ->TIMx ->CCMR1, CCMR1_IC1F_0 , timx ->ext_clk_m1_config ->ch_filter);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	8b1b      	ldrh	r3, [r3, #24]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	785b      	ldrb	r3, [r3, #1]
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b21a      	sxth	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	b292      	uxth	r2, r2
 8001c06:	831a      	strh	r2, [r3, #24]
 8001c08:	e020      	b.n	8001c4c <MCAL_TIM_General_Config+0x198>
            else if (timx ->ext_clk_m1_config ->trigger_Selection == Filtered_Timer_Input_2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b06      	cmp	r3, #6
 8001c12:	d11b      	bne.n	8001c4c <MCAL_TIM_General_Config+0x198>
                CLR_BIT(timx ->TIMx ->CCMR1, CCMR1_IC2F_0 | CCMR1_IC2F_1 | CCMR1_IC2F_2 | CCMR1_IC2F_3 );
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	8b1b      	ldrh	r3, [r3, #24]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c24:	f023 030f 	bic.w	r3, r3, #15
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	8313      	strh	r3, [r2, #24]
                __WRITE_BIT_(timx ->TIMx ->CCMR1, CCMR1_IC2F_0 , timx ->ext_clk_m1_config ->ch_filter);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	8b1b      	ldrh	r3, [r3, #24]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	b21a      	sxth	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	031b      	lsls	r3, r3, #12
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	4313      	orrs	r3, r2
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	b292      	uxth	r2, r2
 8001c4a:	831a      	strh	r2, [r3, #24]
            if (timx ->ext_clk_m1_config ->trigger_Selection == Filtered_Timer_Input_1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b05      	cmp	r3, #5
 8001c54:	d11a      	bne.n	8001c8c <MCAL_TIM_General_Config+0x1d8>
                CLR_BIT(timx ->TIMx ->CCMR1, CCMR1_IC1PSC_0 | CCMR1_IC1PSC_1 );
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	8b1b      	ldrh	r3, [r3, #24]
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0207 	bic.w	r2, r2, #7
 8001c66:	b292      	uxth	r2, r2
 8001c68:	831a      	strh	r2, [r3, #24]
                __WRITE_BIT_(timx ->TIMx ->CCMR1, CCMR1_IC1PSC_0 , timx ->ext_clk_m1_config ->ch_prescaler);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	8b1b      	ldrh	r3, [r3, #24]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	b21a      	sxth	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	789b      	ldrb	r3, [r3, #2]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	b21a      	sxth	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	b292      	uxth	r2, r2
 8001c88:	831a      	strh	r2, [r3, #24]
 8001c8a:	e020      	b.n	8001cce <MCAL_TIM_General_Config+0x21a>
            else if (timx ->ext_clk_m1_config ->trigger_Selection == Filtered_Timer_Input_2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d11b      	bne.n	8001cce <MCAL_TIM_General_Config+0x21a>
                CLR_BIT(timx ->TIMx ->CCMR1, CCMR1_IC2PSC_0 | CCMR1_IC2PSC_1  );
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	8b1b      	ldrh	r3, [r3, #24]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8001ca6:	f023 0303 	bic.w	r3, r3, #3
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	8313      	strh	r3, [r2, #24]
                __WRITE_BIT_(timx ->TIMx ->CCMR1, CCMR1_IC2PSC_0 , timx ->ext_clk_m1_config ->ch_prescaler);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	8b1b      	ldrh	r3, [r3, #24]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	b21a      	sxth	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	789b      	ldrb	r3, [r3, #2]
 8001cbe:	029b      	lsls	r3, r3, #10
 8001cc0:	b21b      	sxth	r3, r3
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	b21a      	sxth	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	b292      	uxth	r2, r2
 8001ccc:	831a      	strh	r2, [r3, #24]
            CLR_BIT(timx ->TIMx ->CCER, CCER_CC1P | CCER_CC1NP );
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	8c1b      	ldrh	r3, [r3, #32]
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0203 	bic.w	r2, r2, #3
 8001cde:	b292      	uxth	r2, r2
 8001ce0:	841a      	strh	r2, [r3, #32]
            switch ( timx ->ext_clk_m1_config ->ch_polarity)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	78db      	ldrb	r3, [r3, #3]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d030      	beq.n	8001d4e <MCAL_TIM_General_Config+0x29a>
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	dc43      	bgt.n	8001d78 <MCAL_TIM_General_Config+0x2c4>
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <MCAL_TIM_General_Config+0x246>
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d015      	beq.n	8001d24 <MCAL_TIM_General_Config+0x270>
 8001cf8:	e03e      	b.n	8001d78 <MCAL_TIM_General_Config+0x2c4>
                CLR_BIT(timx ->TIMx ->CCER, CCER_CC1P);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	8c1b      	ldrh	r3, [r3, #32]
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0202 	bic.w	r2, r2, #2
 8001d0a:	b292      	uxth	r2, r2
 8001d0c:	841a      	strh	r2, [r3, #32]
                CLR_BIT(timx ->TIMx ->CCER, CCER_CC1NP);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	8c1b      	ldrh	r3, [r3, #32]
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0208 	bic.w	r2, r2, #8
 8001d1e:	b292      	uxth	r2, r2
 8001d20:	841a      	strh	r2, [r3, #32]
                break;
 8001d22:	e029      	b.n	8001d78 <MCAL_TIM_General_Config+0x2c4>
                CLR_BIT(timx ->TIMx ->CCER, CCER_CC1P);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	8c1b      	ldrh	r3, [r3, #32]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0202 	bic.w	r2, r2, #2
 8001d34:	b292      	uxth	r2, r2
 8001d36:	841a      	strh	r2, [r3, #32]
                SET_BIT(timx ->TIMx ->CCER, CCER_CC1NP);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	8c1b      	ldrh	r3, [r3, #32]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0208 	orr.w	r2, r2, #8
 8001d48:	b292      	uxth	r2, r2
 8001d4a:	841a      	strh	r2, [r3, #32]
                break;
 8001d4c:	e014      	b.n	8001d78 <MCAL_TIM_General_Config+0x2c4>
                SET_BIT(timx ->TIMx ->CCER, CCER_CC1P);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	8c1b      	ldrh	r3, [r3, #32]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0202 	orr.w	r2, r2, #2
 8001d5e:	b292      	uxth	r2, r2
 8001d60:	841a      	strh	r2, [r3, #32]
                SET_BIT(timx ->TIMx ->CCER, CCER_CC1NP);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	8c1b      	ldrh	r3, [r3, #32]
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0208 	orr.w	r2, r2, #8
 8001d72:	b292      	uxth	r2, r2
 8001d74:	841a      	strh	r2, [r3, #32]
                break;
 8001d76:	bf00      	nop
            if (timx ->ext_clk_m1_config ->trigger_Selection == Filtered_Timer_Input_1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b05      	cmp	r3, #5
 8001d80:	d10a      	bne.n	8001d98 <MCAL_TIM_General_Config+0x2e4>
                SET_BIT(timx ->TIMx ->CCER , CCER_CC1E );
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	8c1b      	ldrh	r3, [r3, #32]
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	b292      	uxth	r2, r2
 8001d94:	841a      	strh	r2, [r3, #32]
 8001d96:	e00e      	b.n	8001db6 <MCAL_TIM_General_Config+0x302>
            else if (timx ->ext_clk_m1_config ->trigger_Selection == Filtered_Timer_Input_2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d109      	bne.n	8001db6 <MCAL_TIM_General_Config+0x302>
                SET_BIT(timx ->TIMx ->CCER , CCER_CC2E );
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	8c1b      	ldrh	r3, [r3, #32]
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0210 	orr.w	r2, r2, #16
 8001db2:	b292      	uxth	r2, r2
 8001db4:	841a      	strh	r2, [r3, #32]
            __WRITE_BIT_(timx ->TIMx ->SMCR, SMCR_SMS_0, External_Clock_Mode1);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	891b      	ldrh	r3, [r3, #8]
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0207 	orr.w	r2, r2, #7
 8001dc6:	b292      	uxth	r2, r2
 8001dc8:	811a      	strh	r2, [r3, #8]
            if ( (timx ->ext_clk_m1_config ->trigger_Selection != Filtered_Timer_Input_1) || \
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d104      	bne.n	8001dde <MCAL_TIM_General_Config+0x32a>
                 (timx ->ext_clk_m1_config ->trigger_Selection != Filtered_Timer_Input_2)     )
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
            if ( (timx ->ext_clk_m1_config ->trigger_Selection != Filtered_Timer_Input_1) || \
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d001      	beq.n	8001de2 <MCAL_TIM_General_Config+0x32e>
                return TIM_ERROR;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e0c2      	b.n	8001f68 <MCAL_TIM_General_Config+0x4b4>
            __WRITE_BIT_(timx ->TIMx ->SMCR , SMCR_TS_0 , (timx ->ext_clk_m1_config ->trigger_Selection) );
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	891b      	ldrh	r3, [r3, #8]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	b21a      	sxth	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	b21b      	sxth	r3, r3
 8001df6:	4313      	orrs	r3, r2
 8001df8:	b21a      	sxth	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	b292      	uxth	r2, r2
 8001e00:	811a      	strh	r2, [r3, #8]
            break;
 8001e02:	e07a      	b.n	8001efa <MCAL_TIM_General_Config+0x446>
            CLR_BIT(timx ->TIMx ->SMCR, SMCR_ETP );
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	891b      	ldrh	r3, [r3, #8]
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8001e14:	b292      	uxth	r2, r2
 8001e16:	811a      	strh	r2, [r3, #8]
            __WRITE_BIT_(timx ->TIMx ->SMCR, SMCR_ETP , timx ->ext_clk_m2_config ->trigger_Polarity);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	891b      	ldrh	r3, [r3, #8]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	b21a      	sxth	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	785b      	ldrb	r3, [r3, #1]
 8001e28:	03db      	lsls	r3, r3, #15
 8001e2a:	b21b      	sxth	r3, r3
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	b292      	uxth	r2, r2
 8001e36:	811a      	strh	r2, [r3, #8]
            CLR_BIT(timx ->TIMx ->SMCR, SMCR_ETPS_0 | SMCR_ETPS_1 );
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	891b      	ldrh	r3, [r3, #8]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e48:	f023 030d 	bic.w	r3, r3, #13
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	8113      	strh	r3, [r2, #8]
            __WRITE_BIT_(timx ->TIMx ->SMCR, SMCR_ETPS_0 , timx ->ext_clk_m2_config ->prescaler_Type);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	891b      	ldrh	r3, [r3, #8]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	b21a      	sxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	031b      	lsls	r3, r3, #12
 8001e62:	b21b      	sxth	r3, r3
 8001e64:	4313      	orrs	r3, r2
 8001e66:	b21a      	sxth	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	b292      	uxth	r2, r2
 8001e6e:	811a      	strh	r2, [r3, #8]
            CLR_BIT(timx ->TIMx ->SMCR, SMCR_ETF_0 | SMCR_ETF_1 | SMCR_ETF_2 | SMCR_ETF_3 );
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	891b      	ldrh	r3, [r3, #8]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	f423 7385 	bic.w	r3, r3, #266	; 0x10a
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	8113      	strh	r3, [r2, #8]
            __WRITE_BIT_(timx ->TIMx ->SMCR, SMCR_ETPS_0 , timx ->ext_clk_m2_config ->trigger_Filter);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	891b      	ldrh	r3, [r3, #8]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	b21a      	sxth	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	789b      	ldrb	r3, [r3, #2]
 8001e98:	031b      	lsls	r3, r3, #12
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	b21a      	sxth	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	b292      	uxth	r2, r2
 8001ea6:	811a      	strh	r2, [r3, #8]
            __WRITE_BIT_(timx ->TIMx ->SMCR, SMCR_TS_0, External_Trigger_input);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	891b      	ldrh	r3, [r3, #8]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8001eb8:	b292      	uxth	r2, r2
 8001eba:	811a      	strh	r2, [r3, #8]
            if (timx ->ext_clk_m2_config ->slave_mode == External_Clock_Mode1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	78db      	ldrb	r3, [r3, #3]
 8001ec2:	2b07      	cmp	r3, #7
 8001ec4:	d101      	bne.n	8001eca <MCAL_TIM_General_Config+0x416>
                return TIM_ERROR;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e04e      	b.n	8001f68 <MCAL_TIM_General_Config+0x4b4>
            __WRITE_BIT_(timx ->TIMx ->SMCR, SMCR_SMS_0, timx ->ext_clk_m2_config ->slave_mode );
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	891b      	ldrh	r3, [r3, #8]
 8001ed0:	b299      	uxth	r1, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	78db      	ldrb	r3, [r3, #3]
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	811a      	strh	r2, [r3, #8]
            SET_BIT(timx ->TIMx ->SMCR, SMCR_ECE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	891b      	ldrh	r3, [r3, #8]
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ef4:	b292      	uxth	r2, r2
 8001ef6:	811a      	strh	r2, [r3, #8]
            break;
 8001ef8:	bf00      	nop
    }

    // Auto_Reload Configuration.
    //---------------------------------configure the preload Option of the Peripheral :
    CLR_BIT(timx ->TIMx ->CR1, CR1_ARPE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f0a:	b292      	uxth	r2, r2
 8001f0c:	801a      	strh	r2, [r3, #0]
    __WRITE_BIT_(timx ->TIMx ->CR1 ,CR1_ARPE ,timx ->preload_State);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	b21a      	sxth	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7a1b      	ldrb	r3, [r3, #8]
 8001f1c:	01db      	lsls	r3, r3, #7
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	4313      	orrs	r3, r2
 8001f22:	b21a      	sxth	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b292      	uxth	r2, r2
 8001f2a:	801a      	strh	r2, [r3, #0]
    //---------------------------------write the Reload value in the {ARR} register :
    if ( timx ->Reload_V )
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	895b      	ldrh	r3, [r3, #10]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <MCAL_TIM_General_Config+0x48c>
    {
        timx ->TIMx ->ARR = timx ->Reload_V;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	8952      	ldrh	r2, [r2, #10]
 8001f3c:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001f3e:	e004      	b.n	8001f4a <MCAL_TIM_General_Config+0x496>
    }else
    {
        timx ->TIMx ->ARR = _AUTO_RELOAD_MAX_;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f48:	859a      	strh	r2, [r3, #44]	; 0x2c
    }

    // Initial Prescaler Configuration.
    //---------------------------------write the prescaler value in the {PSC} register if it exists:
    if ( timx ->prescaler_V )
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	88db      	ldrh	r3, [r3, #6]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <MCAL_TIM_General_Config+0x4aa>
    {
        timx ->TIMx ->PSC = timx ->prescaler_V;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	88d2      	ldrh	r2, [r2, #6]
 8001f5a:	851a      	strh	r2, [r3, #40]	; 0x28
 8001f5c:	e003      	b.n	8001f66 <MCAL_TIM_General_Config+0x4b2>
    }else
    {
        timx ->TIMx ->PSC = 0x0000;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2200      	movs	r2, #0
 8001f64:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    return TIM_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <MCAL_TIM_Prescaler>:
/// @brief MCAL_TIM_Prescaler   : this function is responsible for loading the Prescaler value in the {PSC} register . 
/// @param timx                 : the general Timer handler struct.
/// @param prescaler_value      : the Prescaler value.
/// @return     Function State.
TIM_FUN_STATE   MCAL_TIM_Prescaler(TIM_HANDLER   *timx, u16 prescaler_value)
{   
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	807b      	strh	r3, [r7, #2]
    // Check parameters.
    if(timx ->TIMx == NULL){ return TIM_ERROR ; }
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <MCAL_TIM_Prescaler+0x18>
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e012      	b.n	8001fb2 <MCAL_TIM_Prescaler+0x3e>

    // Check the Type of the clock source.
    if ( (timx ->Peri_Clock == External_clk_m1) || (timx ->Peri_Clock == External_clk_m2) )
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7b5b      	ldrb	r3, [r3, #13]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d003      	beq.n	8001f9c <MCAL_TIM_Prescaler+0x28>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7b5b      	ldrb	r3, [r3, #13]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d101      	bne.n	8001fa0 <MCAL_TIM_Prescaler+0x2c>
    {
        return TIM_CLK_ERROR;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e008      	b.n	8001fb2 <MCAL_TIM_Prescaler+0x3e>
    }
    
    // store the new prescaler value in the prescaler variable in the TIM_HANDLER.
    timx ->prescaler_V = prescaler_value;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	887a      	ldrh	r2, [r7, #2]
 8001fa4:	80da      	strh	r2, [r3, #6]

    // write the prescaler value in the {PSC} register.
    timx ->TIMx ->PSC = timx ->prescaler_V;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	88d2      	ldrh	r2, [r2, #6]
 8001fae:	851a      	strh	r2, [r3, #40]	; 0x28

    return TIM_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <MCAL_TIM_Reload_Value>:
/// @brief MCAL_TIM_Reload_Value : this function is responsible for loading the AUTO_RELOAD value in the {ARR} register in Normal mode.
/// @param timx                  : the general Timer handler struct.
/// @param reload_value          : the Auto_Reload value.
/// @return     Function State.
TIM_FUN_STATE   MCAL_TIM_Reload_Value(TIM_HANDLER   *timx, u16 reload_value)
{   
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	807b      	strh	r3, [r7, #2]
    // Check parameters.
    if(timx ->TIMx == NULL){ return TIM_ERROR ; }
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <MCAL_TIM_Reload_Value+0x18>
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e008      	b.n	8001fe8 <MCAL_TIM_Reload_Value+0x2a>

    // store the new Reload value in the Reload variable in the TIM_HANDLER.
    timx ->Reload_V = reload_value;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	887a      	ldrh	r2, [r7, #2]
 8001fda:	815a      	strh	r2, [r3, #10]

    // write the Reload value in the {ARR} register.
    timx ->TIMx ->ARR = timx ->Reload_V;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	8952      	ldrh	r2, [r2, #10]
 8001fe4:	859a      	strh	r2, [r3, #44]	; 0x2c

    return TIM_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <MCAL_TIM_START_peri>:
/*----------------------------------------------------------------------------------------------------------------------------------------------*/
/// @brief MCAL_TIM_START_peri  : this Function is used to Start the Counter.
/// @param timx                  : the general Timer handler struct.
/// @return     Function State. 
TIM_FUN_STATE   MCAL_TIM_START_peri(TIM_HANDLER   *timx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
    // Check parameters.
    if(timx ->TIMx == NULL){ return TIM_ERROR ; }
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <MCAL_TIM_START_peri+0x14>
 8002004:	2303      	movs	r3, #3
 8002006:	e014      	b.n	8002032 <MCAL_TIM_START_peri+0x3e>

    // write the prescaler value in the {PSC} register.
    timx ->TIMx ->PSC = timx ->prescaler_V;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	88d2      	ldrh	r2, [r2, #6]
 8002010:	851a      	strh	r2, [r3, #40]	; 0x28

    // write the Reload value in the {ARR} register.
    timx ->TIMx ->ARR = timx ->Reload_V;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	8952      	ldrh	r2, [r2, #10]
 800201a:	859a      	strh	r2, [r3, #44]	; 0x2c

    // Enable the Peripheral.
    SET_BIT(timx ->TIMx ->CR1, CR1_CEN);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b29a      	uxth	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0201 	orr.w	r2, r2, #1
 800202c:	b292      	uxth	r2, r2
 800202e:	801a      	strh	r2, [r3, #0]

    return TIM_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <MCAL_TIM_STOP_peri>:
/*----------------------------------------------------------------------------------------------------------------------------------------------*/
/// @brief MCAL_TIM_STOP_peri   : this Function is used to Stop the Counter.
/// @param timx                 : the general Timer handler struct.
/// @return     Function State.
TIM_FUN_STATE   MCAL_TIM_STOP_peri(TIM_HANDLER   *timx)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
    // Check parameters.
    if(timx ->TIMx == NULL){ return TIM_ERROR ; }
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <MCAL_TIM_STOP_peri+0x14>
 800204e:	2303      	movs	r3, #3
 8002050:	e012      	b.n	8002078 <MCAL_TIM_STOP_peri+0x3a>

    // Disable the Peripheral.
    CLR_BIT(timx ->TIMx ->CR1, CR1_CEN);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	b29a      	uxth	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	b292      	uxth	r2, r2
 8002064:	801a      	strh	r2, [r3, #0]

    // write the prescaler value in the {PSC} register.
    timx ->TIMx ->PSC = 0;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2200      	movs	r2, #0
 800206c:	851a      	strh	r2, [r3, #40]	; 0x28

    // write the Reload value in the {ARR} register.
    timx ->TIMx ->ARR = 0;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2200      	movs	r2, #0
 8002074:	859a      	strh	r2, [r3, #44]	; 0x2c

    return TIM_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <MCAL_TIM_Elapsed_Time>:

/// @brief MCAL_TIM_Elapsed_Time : this function is used to return the elapsed time of the counter. 
/// @param timx                  : the general Timer handler struct.
/// @return         the Elapsed time value.
u32   MCAL_TIM_Elapsed_Time(TIM_HANDLER   *timx )
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
    // Check parameters.
    if(timx ->TIMx == NULL){ return TIM_ERROR ; }
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <MCAL_TIM_Elapsed_Time+0x14>
 8002094:	2303      	movs	r3, #3
 8002096:	e036      	b.n	8002106 <MCAL_TIM_Elapsed_Time+0x82>

    u32 Elapsed_Time ;

    if (timx ->Count_M != Center_Aligned)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	791b      	ldrb	r3, [r3, #4]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d019      	beq.n	80020d4 <MCAL_TIM_Elapsed_Time+0x50>
    {
        Elapsed_Time = GET_BIT(timx ->TIMx ->CR1 , CR1_DIR)? ((timx ->Reload_V) -(timx ->TIMx ->CNT)):(timx ->TIMx ->CNT);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <MCAL_TIM_Elapsed_Time+0x42>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	895b      	ldrh	r3, [r3, #10]
 80020b8:	461a      	mov	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	e003      	b.n	80020ce <MCAL_TIM_Elapsed_Time+0x4a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	60fb      	str	r3, [r7, #12]
        return Elapsed_Time;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	e018      	b.n	8002106 <MCAL_TIM_Elapsed_Time+0x82>
    }
    else
    {
        Elapsed_Time = GET_BIT(timx ->TIMx ->CR1 , CR1_DIR)? (timx ->TIMx ->CNT):((timx ->TIMx ->CNT)+(timx ->Reload_V));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	b29b      	uxth	r3, r3
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d004      	beq.n	80020f2 <MCAL_TIM_Elapsed_Time+0x6e>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	e007      	b.n	8002102 <MCAL_TIM_Elapsed_Time+0x7e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	895b      	ldrh	r3, [r3, #10]
 8002100:	4413      	add	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
        return Elapsed_Time;
 8002104:	68fb      	ldr	r3, [r7, #12]
    }
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <TIM1_BRK_TIM9_IRQHandler>:
*/
/*----------------------------------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------------------------------*/
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
    TIM1_BRK_TIM9_handler();
 8002118:	4b02      	ldr	r3, [pc, #8]	; (8002124 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4798      	blx	r3
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000078 	.word	0x20000078

08002128 <TIM1_UP_TIM10_IRQHandler>:
/*----------------------------------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------------------------------*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
    TIM1_UP_TIM10_handler();
 800212c:	4b02      	ldr	r3, [pc, #8]	; (8002138 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4798      	blx	r3
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000007c 	.word	0x2000007c

0800213c <TIM1_TRG_COM_TIM11_IRQHandler>:
/*----------------------------------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------------------------------*/
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
    TIM1_TRG_COM_TIM11_handler();
 8002140:	4b02      	ldr	r3, [pc, #8]	; (800214c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4798      	blx	r3
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000080 	.word	0x20000080

08002150 <TIM1_CC_IRQHandler>:
/*----------------------------------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------------------------------*/
void TIM1_CC_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
    TIM1_CC_handler();
 8002154:	4b02      	ldr	r3, [pc, #8]	; (8002160 <TIM1_CC_IRQHandler+0x10>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4798      	blx	r3
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000084 	.word	0x20000084

08002164 <TIM2_IRQHandler>:
/*----------------------------------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------------------------------*/
void TIM2_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
    TIM2_handler();
 8002168:	4b02      	ldr	r3, [pc, #8]	; (8002174 <TIM2_IRQHandler+0x10>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4798      	blx	r3
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000088 	.word	0x20000088

08002178 <TIM3_IRQHandler>:
/*----------------------------------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------------------------------*/
void TIM3_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
    TIM3_handler();
 800217c:	4b02      	ldr	r3, [pc, #8]	; (8002188 <TIM3_IRQHandler+0x10>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4798      	blx	r3
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	2000008c 	.word	0x2000008c

0800218c <TIM4_IRQHandler>:
/*----------------------------------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------------------------------*/
void TIM4_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
    TIM4_handler();
 8002190:	4b02      	ldr	r3, [pc, #8]	; (800219c <TIM4_IRQHandler+0x10>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4798      	blx	r3
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000090 	.word	0x20000090

080021a0 <TIM5_IRQHandler>:
/*----------------------------------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------------------------------*/
void TIM5_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
    TIM5_handler();
 80021a4:	4b02      	ldr	r3, [pc, #8]	; (80021b0 <TIM5_IRQHandler+0x10>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4798      	blx	r3
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000094 	.word	0x20000094
 80021b4:	00000000 	.word	0x00000000

080021b8 <MCAL_UART_Init_>:
/// @param  USART_receiving_struct : the struct of Received Data Handling Options .
/// @param	copy_u32BaudRate		: the baud Rate of the Peripheral.
/// @retval	Functions Status.
Uart_Fun_Status	    MCAL_UART_Init_(USART_HANDLE *USARTx , MUSART_Frame_Config *USART_frame_struct,
					             MUSART_Receiving_Config *USART_receiving_struct, u32 copy_u32BaudRate ,TIM_HANDLER *Uart_timx_Handle )
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
    // Check the USARTx struct.
    if ((USARTx == NULL) || (USARTx -> USART_x == NULL) || (USARTx -> Time_Limit) || (USARTx -> USART_x == NULL) )
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00b      	beq.n	80021e4 <MCAL_UART_Init_+0x2c>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d007      	beq.n	80021e4 <MCAL_UART_Init_+0x2c>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d103      	bne.n	80021e4 <MCAL_UART_Init_+0x2c>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <MCAL_UART_Init_+0x30>
    {
        return  Uart_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0e5      	b.n	80023b4 <MCAL_UART_Init_+0x1fc>
    }
    else
    {
        if      (USARTx -> USART_x == USART1_R){ USART1_Struct = USARTx; }
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a76      	ldr	r2, [pc, #472]	; (80023c8 <MCAL_UART_Init_+0x210>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d103      	bne.n	80021fa <MCAL_UART_Init_+0x42>
 80021f2:	4a76      	ldr	r2, [pc, #472]	; (80023cc <MCAL_UART_Init_+0x214>)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	e010      	b.n	800221c <MCAL_UART_Init_+0x64>
        else if (USARTx -> USART_x == USART2_R){ USART2_Struct = USARTx; }
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a74      	ldr	r2, [pc, #464]	; (80023d0 <MCAL_UART_Init_+0x218>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d103      	bne.n	800220c <MCAL_UART_Init_+0x54>
 8002204:	4a73      	ldr	r2, [pc, #460]	; (80023d4 <MCAL_UART_Init_+0x21c>)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e007      	b.n	800221c <MCAL_UART_Init_+0x64>
        else if (USARTx -> USART_x == USART6_R){ USART6_Struct = USARTx; }
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a71      	ldr	r2, [pc, #452]	; (80023d8 <MCAL_UART_Init_+0x220>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d102      	bne.n	800221c <MCAL_UART_Init_+0x64>
 8002216:	4a71      	ldr	r2, [pc, #452]	; (80023dc <MCAL_UART_Init_+0x224>)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6013      	str	r3, [r2, #0]
        TIMX_Handle = Uart_timx_Handle;
 800221c:	4a70      	ldr	r2, [pc, #448]	; (80023e0 <MCAL_UART_Init_+0x228>)
 800221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002220:	6013      	str	r3, [r2, #0]
    }
    /* First : define the Frame properties */
    //  Word Size
    USARTx->USART_x->CR1 |= ( USART_frame_struct -> M_VALUE << CR1_M ) ;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	0319      	lsls	r1, r3, #12
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	60da      	str	r2, [r3, #12]

    // Parity Bit 
    switch (USART_frame_struct -> parity_op)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	789b      	ldrb	r3, [r3, #2]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d016      	beq.n	8002270 <MCAL_UART_Init_+0xb8>
 8002242:	2b02      	cmp	r3, #2
 8002244:	dc1d      	bgt.n	8002282 <MCAL_UART_Init_+0xca>
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <MCAL_UART_Init_+0x98>
 800224a:	2b01      	cmp	r3, #1
 800224c:	d007      	beq.n	800225e <MCAL_UART_Init_+0xa6>
    case Odd_Parity :
       USARTx -> USART_x -> CR1 |= (Enable << CR1_PCE ) | ( (Odd_Parity -1)<< CR1_PS ) ;
        break;

    default:   
        break;
 800224e:	e018      	b.n	8002282 <MCAL_UART_Init_+0xca>
        USARTx -> USART_x -> CR1 |= (Disable << CR1_PCE )  ; 
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68d2      	ldr	r2, [r2, #12]
 800225a:	60da      	str	r2, [r3, #12]
        break;
 800225c:	e012      	b.n	8002284 <MCAL_UART_Init_+0xcc>
        USARTx -> USART_x -> CR1 |= (Enable << CR1_PCE ) | ( (Even_Parity -1)<< CR1_PS ) ;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800226c:	60da      	str	r2, [r3, #12]
        break;
 800226e:	e009      	b.n	8002284 <MCAL_UART_Init_+0xcc>
       USARTx -> USART_x -> CR1 |= (Enable << CR1_PCE ) | ( (Odd_Parity -1)<< CR1_PS ) ;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 800227e:	60da      	str	r2, [r3, #12]
        break;
 8002280:	e000      	b.n	8002284 <MCAL_UART_Init_+0xcc>
        break;
 8002282:	bf00      	nop
    }
    // 3- Stop Bit Size
    USARTx -> USART_x -> CR2 |= (USART_frame_struct -> Stop_Bit_NUM << CR2_STOP0 ) ;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	785b      	ldrb	r3, [r3, #1]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	0319      	lsls	r1, r3, #12
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691a      	ldr	r2, [r3, #16]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	611a      	str	r2, [r3, #16]
/*--------------------------------------------------------------------------------------------------*/
// Second : define The Receiving data processes
/*--------------------------------------------------------------------------------------------------*/
    // 1- Oversampling_Value type
    USARTx -> USART_x -> CR1 |= (USART_receiving_struct -> Oversampling_type << CR1_OVER8) ;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	03d9      	lsls	r1, r3, #15
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	60da      	str	r2, [r3, #12]

    // 2- OneBit_Sample method
    USARTx -> USART_x -> CR3 |= (USART_receiving_struct -> OneBit_Sampling_method << CR3_ONEBIT) ;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	02d9      	lsls	r1, r3, #11
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695a      	ldr	r2, [r3, #20]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	615a      	str	r2, [r3, #20]
/*--------------------------------------------------------------------------------------------------*/
// third : define The Operation Mode
/*--------------------------------------------------------------------------------------------------*/
    // 1- Disable all Other Modes (LIN), (Synchronous), (Smartcard) and (IrDA)
    USARTx -> USART_x -> CR2 |= (Disable << CR2_CLKEN) | (Disable << CR2_LINEN) ;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6912      	ldr	r2, [r2, #16]
 80022d0:	611a      	str	r2, [r3, #16]
    USARTx -> USART_x -> CR3 |= (Disable << CR3_IREN_) | (Disable << CR3_SCEN) ;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6952      	ldr	r2, [r2, #20]
 80022dc:	615a      	str	r2, [r3, #20]
/*--------------------------------------------------------------------------------------------------*/
// Fourth : define the Baud Rate
/*--------------------------------------------------------------------------------------------------*/
    // 1- get the value of the total DIV
    f64 DIV = ((f64)(FCK)/(f64)((copy_u32BaudRate)*8*( 2 - GET_BIT(USARTx -> USART_x -> CR1 , CR1_OVER8) ) ) ) ;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	0bdb      	lsrs	r3, r3, #15
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	f1c3 0302 	rsb	r3, r3, #2
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	fb02 f303 	mul.w	r3, r2, r3
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe f8b4 	bl	8000464 <__aeabi_ui2d>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	a12f      	add	r1, pc, #188	; (adr r1, 80023c0 <MCAL_UART_Init_+0x208>)
 8002302:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002306:	f7fe fa51 	bl	80007ac <__aeabi_ddiv>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // 2- get the DIV_mantissa value
    u16 DIV_mantissa = (u16) DIV ;
 8002312:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002316:	f7fe fb31 	bl	800097c <__aeabi_d2uiz>
 800231a:	4603      	mov	r3, r0
 800231c:	82fb      	strh	r3, [r7, #22]
    // 3- put the DIV_mantissa into the (15-4)bits in the (BRR) register
    USARTx -> USART_x -> BRR |= (DIV_mantissa << 4) ;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	8afb      	ldrh	r3, [r7, #22]
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	4619      	mov	r1, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	609a      	str	r2, [r3, #8]

    // 4- get the DIV_fraction value
    u8 DIV_fraction = ( (DIV - DIV_mantissa) * 16 ) ;
 8002332:	8afb      	ldrh	r3, [r7, #22]
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe f8a5 	bl	8000484 <__aeabi_i2d>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002342:	f7fd ff51 	bl	80001e8 <__aeabi_dsub>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <MCAL_UART_Init_+0x22c>)
 8002354:	f7fe f900 	bl	8000558 <__aeabi_dmul>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f7fe fb0c 	bl	800097c <__aeabi_d2uiz>
 8002364:	4603      	mov	r3, r0
 8002366:	757b      	strb	r3, [r7, #21]

    // 5- Check if the value of the DIV_fraction is not greater the (15)
    if (DIV_fraction <= 15)
 8002368:	7d7b      	ldrb	r3, [r7, #21]
 800236a:	2b0f      	cmp	r3, #15
 800236c:	d808      	bhi.n	8002380 <MCAL_UART_Init_+0x1c8>
    {
        // 6- if true, then put the DIV_fraction into the first four bits in the (BRR) register
        USARTx -> USART_x -> BRR |= DIV_fraction ;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6899      	ldr	r1, [r3, #8]
 8002374:	7d7a      	ldrb	r2, [r7, #21]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	e015      	b.n	80023ac <MCAL_UART_Init_+0x1f4>
    }
    else
    {
        // 6- if false, then put zero into the first four bits in the (BRR) register
        USARTx -> USART_x -> BRR &= (0xfff0) ;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6899      	ldr	r1, [r3, #8]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800238e:	400b      	ands	r3, r1
 8002390:	6093      	str	r3, [r2, #8]

        // 7-add (1) to the DIV_mantissa value
        DIV_mantissa++ ;
 8002392:	8afb      	ldrh	r3, [r7, #22]
 8002394:	3301      	adds	r3, #1
 8002396:	82fb      	strh	r3, [r7, #22]

        // 8- put the new DIV_mantissa into the (15-4)bits in the (BRR) register
        USARTx -> USART_x -> BRR |= (DIV_mantissa << 4) ;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	8afb      	ldrh	r3, [r7, #22]
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	4619      	mov	r1, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	609a      	str	r2, [r3, #8]
    }
/*--------------------------------------------------------------------------------------------------*/
// Fifth : define the Error code in the USARTx Struct.
/*--------------------------------------------------------------------------------------------------*/
    USARTx -> Error_Code = (u8 *)Error_1;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4a0e      	ldr	r2, [pc, #56]	; (80023e8 <MCAL_UART_Init_+0x230>)
 80023b0:	621a      	str	r2, [r3, #32]
/*--------------------------------------------------------------------------------------------------*/
    return  Uart_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	f3af 8000 	nop.w
 80023c0:	00000000 	.word	0x00000000
 80023c4:	416e8480 	.word	0x416e8480
 80023c8:	40011000 	.word	0x40011000
 80023cc:	200000b0 	.word	0x200000b0
 80023d0:	40004400 	.word	0x40004400
 80023d4:	200000b4 	.word	0x200000b4
 80023d8:	40011400 	.word	0x40011400
 80023dc:	200000b8 	.word	0x200000b8
 80023e0:	200000bc 	.word	0x200000bc
 80023e4:	40300000 	.word	0x40300000
 80023e8:	08006fc8 	.word	0x08006fc8

080023ec <MCAL_UART_Enable>:

/// @brief  MCAL_USART_Enable  : the function responses of Enabling the Peripheral, Start The Communication and defining Its Type.
/// @param  USARTx             : the Struct of Peripheral's Registers .
/// @retval	Functions Status.
Uart_Fun_Status	    MCAL_UART_Enable( USART_HANDLE *USARTx )
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
    __UART_ENABLE( USARTx -> USART_x );
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002402:	60da      	str	r2, [r3, #12]
    return Uart_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <MCAL_UART_Transmit>:
/// @param ptData                : pointer of data we want to Transmit.
/// @param Size                  : the size of the data that will be Transmitted.
/// @param Time_Limit            : the maximum time for this function. 
///@retval Functions Status.
Uart_Fun_Status	    MCAL_UART_Transmit(USART_HANDLE *USARTx , u8 *ptData ,u16 Size, u32 Time_Limit ,u8 Last_element)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	4613      	mov	r3, r2
 8002422:	80fb      	strh	r3, [r7, #6]
    // Check the Given data and the size values.
    if( (ptData == NULL ) || (Size == 0) || (Time_Limit == 0)){ return  Uart_ERROR; }
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <MCAL_UART_Transmit+0x22>
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <MCAL_UART_Transmit+0x22>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <MCAL_UART_Transmit+0x26>
 8002436:	2301      	movs	r3, #1
 8002438:	e0f0      	b.n	800261c <MCAL_UART_Transmit+0x208>

    if (UART_Check_LockState(USARTx ,TX ) == BUSY)
 800243a:	2100      	movs	r1, #0
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 fcbd 	bl	8002dbc <UART_Check_LockState>
 8002442:	4603      	mov	r3, r0
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <MCAL_UART_Transmit+0x38>
    {
        return Uart_BUSY;
 8002448:	2305      	movs	r3, #5
 800244a:	e0e7      	b.n	800261c <MCAL_UART_Transmit+0x208>
    }

    // the Starting conditions:
    USARTx ->TX_Lock_Flag = BUSY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	745a      	strb	r2, [r3, #17]
    USARTx ->TX_Lock_Counter = 0;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	749a      	strb	r2, [r3, #18]

    u8 *Local_buffer;

    // Enable Tx
    __COMM_ENABLE(USARTx,TX);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0208 	orr.w	r2, r2, #8
 8002466:	60da      	str	r2, [r3, #12]

    // Define the rest of elements iin the USARTx Struct.
    USARTx -> TX_Buffer_Ptr     = ptData;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	609a      	str	r2, [r3, #8]
    USARTx -> TX_Buffer_Size    = Size;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	88fa      	ldrh	r2, [r7, #6]
 8002472:	819a      	strh	r2, [r3, #12]
    USARTx -> TX_Process_Count  = 0;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	81da      	strh	r2, [r3, #14]
    USARTx -> Error_Code        = (u8 *)Error_1;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4a69      	ldr	r2, [pc, #420]	; (8002624 <MCAL_UART_Transmit+0x210>)
 800247e:	621a      	str	r2, [r3, #32]
    USARTx -> TX_Buffer_lastEL  = Last_element;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002486:	741a      	strb	r2, [r3, #16]

    // start timer;
    MCAL_TIM_START_peri(TIMX_Handle);
 8002488:	4b67      	ldr	r3, [pc, #412]	; (8002628 <MCAL_UART_Transmit+0x214>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fdb1 	bl	8001ff4 <MCAL_TIM_START_peri>

    // enter the Transmission process, send {MSB} first.
    while ( (USARTx -> TX_Process_Count) <= (USARTx -> TX_Buffer_Size) )
 8002492:	e08b      	b.n	80025ac <MCAL_UART_Transmit+0x198>
    {
        // check the Timer.
        if (MCAL_TIM_Elapsed_Time(TIMX_Handle) == Time_Limit)
 8002494:	4b64      	ldr	r3, [pc, #400]	; (8002628 <MCAL_UART_Transmit+0x214>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fdf3 	bl	8002084 <MCAL_TIM_Elapsed_Time>
 800249e:	4602      	mov	r2, r0
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d114      	bne.n	80024d0 <MCAL_UART_Transmit+0xbc>
        {
            MCAL_TIM_STOP_peri(TIMX_Handle);
 80024a6:	4b60      	ldr	r3, [pc, #384]	; (8002628 <MCAL_UART_Transmit+0x214>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fdc7 	bl	800203e <MCAL_TIM_STOP_peri>
            USARTx ->TX_Lock_Flag = IDLE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	745a      	strb	r2, [r3, #17]
            USARTx ->TX_Lock_Counter = 0;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	749a      	strb	r2, [r3, #18]

            // Disable Tx.
            __COMM_DISABLE(USARTx,TX);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0208 	bic.w	r2, r2, #8
 80024ca:	60da      	str	r2, [r3, #12]

            return Uart_TIMEOUT;
 80024cc:	2302      	movs	r3, #2
 80024ce:	e0a5      	b.n	800261c <MCAL_UART_Transmit+0x208>
        }

        // clear the DR register.
        (void)USARTx ->USART_x ->DR;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]

        // Check the (TRANSMIT DATA REGISTER EMPTY) flag "TXE" in SR register if it is {1} or not.
        if(__UART_GET_FLAG(USARTx -> USART_x,__TXE__) == 1 )
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	09db      	lsrs	r3, r3, #7
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d162      	bne.n	80025ac <MCAL_UART_Transmit+0x198>
        {
            ++(USARTx -> TX_Process_Count);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3301      	adds	r3, #1
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	b21a      	sxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	81da      	strh	r2, [r3, #14]

        	Local_buffer = (u8 *)ptData;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	617b      	str	r3, [r7, #20]

            // load the Transmit word into the (DR) register 
            USARTx -> USART_x -> DR =  (*Local_buffer & (u8)0x00FF);
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	781a      	ldrb	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]

            ptData += 1U ;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	3301      	adds	r3, #1
 800250a:	60bb      	str	r3, [r7, #8]

            // Check the (TRANSMISSION COMPLETE) flag "TC" in SR register if it is {0} or not and wait till it is {1}.
            while (__UART_GET_FLAG(USARTx -> USART_x,__TC__) == 0 )
 800250c:	e01d      	b.n	800254a <MCAL_UART_Transmit+0x136>
            { 
                // Check the Timer.
                if (MCAL_TIM_Elapsed_Time(TIMX_Handle) == Time_Limit)
 800250e:	4b46      	ldr	r3, [pc, #280]	; (8002628 <MCAL_UART_Transmit+0x214>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fdb6 	bl	8002084 <MCAL_TIM_Elapsed_Time>
 8002518:	4602      	mov	r2, r0
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	4293      	cmp	r3, r2
 800251e:	d114      	bne.n	800254a <MCAL_UART_Transmit+0x136>
                {
                    // stop the Timer.
                    MCAL_TIM_STOP_peri(TIMX_Handle);
 8002520:	4b41      	ldr	r3, [pc, #260]	; (8002628 <MCAL_UART_Transmit+0x214>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fd8a 	bl	800203e <MCAL_TIM_STOP_peri>

                    USARTx ->TX_Lock_Flag = IDLE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	745a      	strb	r2, [r3, #17]
                    USARTx ->TX_Lock_Counter = 0;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	749a      	strb	r2, [r3, #18]

                    // Disable Tx.
                    __COMM_DISABLE(USARTx,TX);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0208 	bic.w	r2, r2, #8
 8002544:	60da      	str	r2, [r3, #12]

                    return Uart_TIMEOUT;
 8002546:	2302      	movs	r3, #2
 8002548:	e068      	b.n	800261c <MCAL_UART_Transmit+0x208>
            while (__UART_GET_FLAG(USARTx -> USART_x,__TC__) == 0 )
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0d9      	beq.n	800250e <MCAL_UART_Transmit+0xfa>
                }
            }

            // clear the {TC} flag.
            __UART_CLEAR_FLAG(USARTx -> USART_x, __TC__);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002568:	601a      	str	r2, [r3, #0]

            // Check the last element.
            if ( *Local_buffer == Last_element)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002572:	429a      	cmp	r2, r3
 8002574:	d11a      	bne.n	80025ac <MCAL_UART_Transmit+0x198>
            {
                (USARTx -> TX_Buffer_Size) = USARTx -> TX_Process_Count;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	819a      	strh	r2, [r3, #12]

                MCAL_TIM_STOP_peri(TIMX_Handle);
 8002582:	4b29      	ldr	r3, [pc, #164]	; (8002628 <MCAL_UART_Transmit+0x214>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fd59 	bl	800203e <MCAL_TIM_STOP_peri>

                USARTx ->TX_Lock_Flag = IDLE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	745a      	strb	r2, [r3, #17]
                USARTx ->TX_Lock_Counter = 0;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	749a      	strb	r2, [r3, #18]

                // Disable Tx.
                __COMM_DISABLE(USARTx,TX);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0208 	bic.w	r2, r2, #8
 80025a6:	60da      	str	r2, [r3, #12]

                return Uart_UNDERSIZE ;
 80025a8:	2304      	movs	r3, #4
 80025aa:	e037      	b.n	800261c <MCAL_UART_Transmit+0x208>
    while ( (USARTx -> TX_Process_Count) <= (USARTx -> TX_Buffer_Size) )
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80025b2:	461a      	mov	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	899b      	ldrh	r3, [r3, #12]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	f77f af6b 	ble.w	8002494 <MCAL_UART_Transmit+0x80>
            }
        }
    }

    if (*Local_buffer != USARTx -> TX_Buffer_lastEL )
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	781a      	ldrb	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	7c1b      	ldrb	r3, [r3, #16]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d014      	beq.n	80025f4 <MCAL_UART_Transmit+0x1e0>
    {
        MCAL_TIM_STOP_peri(TIMX_Handle);
 80025ca:	4b17      	ldr	r3, [pc, #92]	; (8002628 <MCAL_UART_Transmit+0x214>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fd35 	bl	800203e <MCAL_TIM_STOP_peri>

        USARTx ->TX_Lock_Flag = IDLE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	745a      	strb	r2, [r3, #17]
        USARTx ->TX_Lock_Counter = 0;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	749a      	strb	r2, [r3, #18]

        // Disable Tx.
        __COMM_DISABLE(USARTx,TX);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0208 	bic.w	r2, r2, #8
 80025ee:	60da      	str	r2, [r3, #12]

        return Uart_OVERSIZE ;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e013      	b.n	800261c <MCAL_UART_Transmit+0x208>
    }

    // stop the Timer.
    MCAL_TIM_STOP_peri(TIMX_Handle);
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <MCAL_UART_Transmit+0x214>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fd20 	bl	800203e <MCAL_TIM_STOP_peri>

    USARTx ->TX_Lock_Flag = IDLE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	745a      	strb	r2, [r3, #17]
    USARTx ->TX_Lock_Counter = 0;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	749a      	strb	r2, [r3, #18]

    // Disable Tx.
    __COMM_DISABLE(USARTx,TX);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0208 	bic.w	r2, r2, #8
 8002618:	60da      	str	r2, [r3, #12]

    return Uart_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	08006fc8 	.word	0x08006fc8
 8002628:	200000bc 	.word	0x200000bc

0800262c <UART_Transmit_Handler>:

/// @brief  UART_Transmit_Handler    : it is the function that will be performed inside the USART_IRQHandler in the TCIE interrupt.
/// @param  USARTx                   : the Struct of Peripheral's Registers.
/// @return Functions Status.
static Uart_Fun_Status UART_Transmit_Handler(USART_HANDLE *USARTx)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
    // Disable Read register not empty interrupt.
    CLR_BIT(USARTx -> USART_x ->CR1, CR1_RXNEIE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0220 	bic.w	r2, r2, #32
 8002642:	60da      	str	r2, [r3, #12]
    // Disable the UART Transmit Complete Interrupt.
    CLR_BIT(USARTx -> USART_x ->CR1, CR1_TCIE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002652:	60da      	str	r2, [r3, #12]

    u8 *Local_buffer;

    // clear the DR register. ---------------------------------------------------------------------
    (void)USARTx ->USART_x ->DR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685b      	ldr	r3, [r3, #4]

    if (__UART_GET_FLAG(USARTx -> USART_x, __TXE__))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	09db      	lsrs	r3, r3, #7
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 808d 	beq.w	8002786 <UART_Transmit_Handler+0x15a>
    {
        // increment the process counter.
        ++(USARTx -> TX_Process_Count);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002672:	b29b      	uxth	r3, r3
 8002674:	3301      	adds	r3, #1
 8002676:	b29b      	uxth	r3, r3
 8002678:	b21a      	sxth	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	81da      	strh	r2, [r3, #14]

        // load the Transmit word into the Local_buffer.
        Local_buffer = (u8 *)USARTx -> TX_Buffer_Ptr;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	60fb      	str	r3, [r7, #12]

        // load the Transmit word into the (DR) register 
        USARTx -> USART_x -> DR =  (*Local_buffer & (u8)0x00FF);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	781a      	ldrb	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]

        USARTx -> TX_Buffer_Ptr += 1U;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	609a      	str	r2, [r3, #8]

        // restart the lock counter.
        USARTx -> TX_Lock_Counter = 0;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	749a      	strb	r2, [r3, #18]

        // Check if the buffer reaches its end. 
        if( USARTx->TX_Process_Count == USARTx ->TX_Buffer_Size )
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80026a4:	461a      	mov	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	899b      	ldrh	r3, [r3, #12]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d135      	bne.n	800271a <UART_Transmit_Handler+0xee>
        {
          if (*Local_buffer != USARTx -> TX_Buffer_lastEL )
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	781a      	ldrb	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	7c1b      	ldrb	r3, [r3, #16]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d017      	beq.n	80026ea <UART_Transmit_Handler+0xbe>
            {
                USARTx ->TX_Lock_Flag = IDLE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	745a      	strb	r2, [r3, #17]
                USARTx ->TX_Lock_Counter = 0;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	749a      	strb	r2, [r3, #18]

                // Enable Read register not empty interrupt.
                SET_BIT(USARTx -> USART_x ->CR1, CR1_RXNEIE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0220 	orr.w	r2, r2, #32
 80026d4:	60da      	str	r2, [r3, #12]

                // Disable the Tx line.
                __COMM_DISABLE(USARTx,TX);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0208 	bic.w	r2, r2, #8
 80026e4:	60da      	str	r2, [r3, #12]

                return Uart_OVERSIZE ;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e056      	b.n	8002798 <UART_Transmit_Handler+0x16c>
            }

            USARTx ->TX_Lock_Flag = IDLE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	745a      	strb	r2, [r3, #17]
            USARTx ->TX_Lock_Counter = 0;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	749a      	strb	r2, [r3, #18]

            // Enable Read register not empty interrupt.
            SET_BIT(USARTx -> USART_x ->CR1, CR1_RXNEIE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0220 	orr.w	r2, r2, #32
 8002704:	60da      	str	r2, [r3, #12]

            // Disable the Tx line.
            __COMM_DISABLE(USARTx,TX);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0208 	bic.w	r2, r2, #8
 8002714:	60da      	str	r2, [r3, #12]

           return Uart_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e03e      	b.n	8002798 <UART_Transmit_Handler+0x16c>
        }
        else
        {
            // Check the last Transmitted element.
            if (*Local_buffer == USARTx -> TX_Buffer_lastEL )
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	781a      	ldrb	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7c1b      	ldrb	r3, [r3, #16]
 8002722:	429a      	cmp	r2, r3
 8002724:	d11d      	bne.n	8002762 <UART_Transmit_Handler+0x136>
            {
                // Disable the Tx line.
                __COMM_DISABLE(USARTx,TX);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0208 	bic.w	r2, r2, #8
 8002734:	60da      	str	r2, [r3, #12]

                (USARTx -> TX_Buffer_Size) = USARTx -> TX_Process_Count;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800273c:	b29a      	uxth	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	819a      	strh	r2, [r3, #12]

                USARTx ->TX_Lock_Flag = IDLE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	745a      	strb	r2, [r3, #17]
                USARTx ->TX_Lock_Counter = 0;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	749a      	strb	r2, [r3, #18]

                // Enable Read register not empty interrupt.
                SET_BIT(USARTx -> USART_x ->CR1, CR1_RXNEIE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0220 	orr.w	r2, r2, #32
 800275c:	60da      	str	r2, [r3, #12]

                return Uart_UNDERSIZE ;
 800275e:	2304      	movs	r3, #4
 8002760:	e01a      	b.n	8002798 <UART_Transmit_Handler+0x16c>
            }
        }

        // Enable Read register not empty interrupt.
        SET_BIT(USARTx -> USART_x ->CR1, CR1_RXNEIE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0220 	orr.w	r2, r2, #32
 8002770:	60da      	str	r2, [r3, #12]
        // Enable the UART Transmit Complete Interrupt.
        SET_BIT(USARTx -> USART_x ->CR1, CR1_TCIE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002780:	60da      	str	r2, [r3, #12]

        return Uart_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	e008      	b.n	8002798 <UART_Transmit_Handler+0x16c>
    }

    // Enable Read register not empty interrupt.
    SET_BIT(USARTx -> USART_x ->CR1, CR1_RXNEIE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0220 	orr.w	r2, r2, #32
 8002794:	60da      	str	r2, [r3, #12]

    return Uart_ERROR;
 8002796:	2301      	movs	r3, #1
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <MCAL_UART_Receive_INT>:
/// @param ptData                 : pointer of data we want to Transmit.
/// @param Size                   : the size of the data that will be Transmitted.
/// @param Time_Limit             : the maximum time for this function.
///@retval Functions Status.
Uart_Fun_Status	    MCAL_UART_Receive_INT(USART_HANDLE *USARTx , u8 *ptData ,u16 Size_Limit, u8 Last_element)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	4611      	mov	r1, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	460b      	mov	r3, r1
 80027b4:	80fb      	strh	r3, [r7, #6]
 80027b6:	4613      	mov	r3, r2
 80027b8:	717b      	strb	r3, [r7, #5]
    // Check the Given data and the size values.
    if( (ptData == NULL ) || (Size_Limit == 0)){ return  Uart_ERROR; }
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <MCAL_UART_Receive_INT+0x22>
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <MCAL_UART_Receive_INT+0x26>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e039      	b.n	800283e <MCAL_UART_Receive_INT+0x9a>

    if (UART_Check_LockState(USARTx ,RX ) == BUSY)
 80027ca:	2101      	movs	r1, #1
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 faf5 	bl	8002dbc <UART_Check_LockState>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <MCAL_UART_Receive_INT+0x38>
    {
        return Uart_BUSY;
 80027d8:	2305      	movs	r3, #5
 80027da:	e030      	b.n	800283e <MCAL_UART_Receive_INT+0x9a>
    }

    // Enable Rx
    __COMM_ENABLE(USARTx,RX);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0204 	orr.w	r2, r2, #4
 80027ea:	60da      	str	r2, [r3, #12]

    // the Starting conditions:
    USARTx ->RX_Lock_Flag = BUSY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2201      	movs	r2, #1
 80027f0:	775a      	strb	r2, [r3, #29]
    USARTx ->RX_Lock_Counter = 0;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	779a      	strb	r2, [r3, #30]

    // Define the rest of elements in the USARTx Struct.
    USARTx -> RX_Buffer_Ptr     = ptData;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	615a      	str	r2, [r3, #20]
    USARTx -> RX_Buffer_Size    = Size_Limit;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	88fa      	ldrh	r2, [r7, #6]
 8002802:	831a      	strh	r2, [r3, #24]
    USARTx -> RX_Process_Count  = 0;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	835a      	strh	r2, [r3, #26]
    USARTx -> Error_Code        = (u8 *)Error_1;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a0e      	ldr	r2, [pc, #56]	; (8002848 <MCAL_UART_Receive_INT+0xa4>)
 800280e:	621a      	str	r2, [r3, #32]
    USARTx -> RX_Buffer_lastEL  = Last_element;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	797a      	ldrb	r2, [r7, #5]
 8002814:	771a      	strb	r2, [r3, #28]
    
    // clear the DR register.
    (void)USARTx ->USART_x ->DR;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]

    // Clear the Transmit complete flag.
    __UART_CLEAR_FLAG(USARTx -> USART_x ,__RXNE__);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0220 	bic.w	r2, r2, #32
 800282a:	601a      	str	r2, [r3, #0]

    // Enable Read register not empty interrupt. 
    SET_BIT(USARTx ->USART_x ->CR1, CR1_RXNEIE);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0220 	orr.w	r2, r2, #32
 800283a:	60da      	str	r2, [r3, #12]

    return Uart_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	08006fc8 	.word	0x08006fc8

0800284c <UART_Receive_Handler>:

/// @brief  UART_Receive_Handler    : it is the function that will be performed inside the USART_IRQHandler in the RXNEIE, PEIE, and EIE interrupts.
/// @param  USARTx 
/// @return Functions Status.
static Uart_Fun_Status UART_Receive_Handler(USART_HANDLE *USARTx)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
    // Disable the UART Transmit Complete Interrupt.
    CLR_BIT(USARTx -> USART_x ->CR1, CR1_TCIE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002862:	60da      	str	r2, [r3, #12]
    // Disable Read register not empty interrupt.
    CLR_BIT(USARTx ->USART_x ->CR1, CR1_RXNEIE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0220 	bic.w	r2, r2, #32
 8002872:	60da      	str	r2, [r3, #12]

    u8 *Local_buffer;
    u8 Error_counter = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]

    if (__UART_GET_FLAG(USARTx -> USART_x, __ORE__))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	08db      	lsrs	r3, r3, #3
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d01a      	beq.n	80028be <UART_Receive_Handler+0x72>
    {
        USARTx -> Error_Code = (u8 *)Error_5;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a96      	ldr	r2, [pc, #600]	; (8002ae4 <UART_Receive_Handler+0x298>)
 800288c:	621a      	str	r2, [r3, #32]
        USARTx ->RX_Lock_Flag = IDLE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	775a      	strb	r2, [r3, #29]
        USARTx ->RX_Lock_Counter = 0;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	779a      	strb	r2, [r3, #30]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(USARTx -> USART_x ->CR1, CR1_TCIE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028a8:	60da      	str	r2, [r3, #12]

        // Disable the Rx line.
        __COMM_DISABLE(USARTx,RX);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0204 	bic.w	r2, r2, #4
 80028b8:	60da      	str	r2, [r3, #12]

        return Uart_ERROR; 
 80028ba:	2301      	movs	r3, #1
 80028bc:	e133      	b.n	8002b26 <UART_Receive_Handler+0x2da>
    }

    if ((__UART_GET_FLAG(USARTx -> USART_x,__PE__) || __UART_GET_FLAG(USARTx -> USART_x,__FE__) || __UART_GET_FLAG(USARTx -> USART_x,__NE__)) == 0)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10f      	bne.n	80028ec <UART_Receive_Handler+0xa0>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d107      	bne.n	80028ec <UART_Receive_Handler+0xa0>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <UART_Receive_Handler+0xa4>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <UART_Receive_Handler+0xa6>
 80028f0:	2300      	movs	r3, #0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f040 808f 	bne.w	8002a16 <UART_Receive_Handler+0x1ca>
    {
        ++(USARTx -> RX_Process_Count);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3301      	adds	r3, #1
 8002902:	b29b      	uxth	r3, r3
 8002904:	b21a      	sxth	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	835a      	strh	r2, [r3, #26]

        Local_buffer = (u8 *)USARTx -> RX_Buffer_Ptr;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	60bb      	str	r3, [r7, #8]

        // check the parity if Enabled or Disable.
        if (GET_BIT(USARTx->USART_x -> CR1,CR1_PCE) == 0)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	0a9b      	lsrs	r3, r3, #10
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d106      	bne.n	800292e <UART_Receive_Handler+0xe2>
        {
            // store the Recevied word into the given pointer location.
            *Local_buffer = (u8)(USARTx -> USART_x -> DR & (u8)0x00FF);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	701a      	strb	r2, [r3, #0]
 800292c:	e008      	b.n	8002940 <UART_Receive_Handler+0xf4>
        }
        // the parity bit is the 8th-bit.
        else   
        {
            // store the Recevied word into the given pointer location.
            *Local_buffer = (u8)(USARTx -> USART_x -> DR & (u8)0x007F);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800293a:	b2da      	uxtb	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	701a      	strb	r2, [r3, #0]
        }

        USARTx -> RX_Buffer_Ptr += 1U;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	615a      	str	r2, [r3, #20]
        USARTx -> RX_Lock_Counter = 0;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	779a      	strb	r2, [r3, #30]

        // Check if the buffer reaches its end. 
        if( USARTx->RX_Process_Count ==  USARTx->RX_Buffer_Size)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002956:	461a      	mov	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	8b1b      	ldrh	r3, [r3, #24]
 800295c:	429a      	cmp	r2, r3
 800295e:	d135      	bne.n	80029cc <UART_Receive_Handler+0x180>
        {
           if (*Local_buffer != USARTx -> RX_Buffer_lastEL )
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	781a      	ldrb	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7f1b      	ldrb	r3, [r3, #28]
 8002968:	429a      	cmp	r2, r3
 800296a:	d017      	beq.n	800299c <UART_Receive_Handler+0x150>
            {
                USARTx ->RX_Lock_Flag = IDLE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	775a      	strb	r2, [r3, #29]
                USARTx ->RX_Lock_Counter = 0;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	779a      	strb	r2, [r3, #30]

                // Enable the UART Transmit Complete Interrupt.
                SET_BIT(USARTx -> USART_x ->CR1, CR1_TCIE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002986:	60da      	str	r2, [r3, #12]

                // Disable the Rx line.
                __COMM_DISABLE(USARTx,RX);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0204 	bic.w	r2, r2, #4
 8002996:	60da      	str	r2, [r3, #12]

                return Uart_OVERSIZE ;
 8002998:	2303      	movs	r3, #3
 800299a:	e0c4      	b.n	8002b26 <UART_Receive_Handler+0x2da>
            }

            USARTx ->RX_Lock_Flag = IDLE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	775a      	strb	r2, [r3, #29]
            USARTx ->RX_Lock_Counter = 0;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	779a      	strb	r2, [r3, #30]

            // Enable the UART Transmit Complete Interrupt.
            SET_BIT(USARTx -> USART_x ->CR1, CR1_TCIE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029b6:	60da      	str	r2, [r3, #12]

            // Disable the Rx line.
            __COMM_DISABLE(USARTx,RX);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0204 	bic.w	r2, r2, #4
 80029c6:	60da      	str	r2, [r3, #12]

            return Uart_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e0ac      	b.n	8002b26 <UART_Receive_Handler+0x2da>
        }
        else
        {
            // Check the Received element.
            if (*Local_buffer == USARTx -> RX_Buffer_lastEL)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	7f1b      	ldrb	r3, [r3, #28]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	f040 8095 	bne.w	8002b04 <UART_Receive_Handler+0x2b8>
            {
                USARTx -> RX_Buffer_Size = USARTx -> RX_Process_Count;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	831a      	strh	r2, [r3, #24]

                USARTx -> RX_Lock_Flag = IDLE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	775a      	strb	r2, [r3, #29]
                USARTx -> RX_Lock_Counter = 0;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	779a      	strb	r2, [r3, #30]

                // Enable the UART Transmit Complete Interrupt.
                SET_BIT(USARTx -> USART_x ->CR1, CR1_TCIE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a00:	60da      	str	r2, [r3, #12]

                // Disable the Rx line.
                __COMM_DISABLE(USARTx,RX);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0204 	bic.w	r2, r2, #4
 8002a10:	60da      	str	r2, [r3, #12]

                return Uart_UNDERSIZE ;
 8002a12:	2304      	movs	r3, #4
 8002a14:	e087      	b.n	8002b26 <UART_Receive_Handler+0x2da>
            }
        }
    }
    else
    {
        if (__UART_GET_FLAG(USARTx -> USART_x,__PE__))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <UART_Receive_Handler+0x1e4>
        {
            USARTx -> Error_Code = (u8 *)Error_2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a30      	ldr	r2, [pc, #192]	; (8002ae8 <UART_Receive_Handler+0x29c>)
 8002a28:	621a      	str	r2, [r3, #32]
            Error_counter += 2;
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	73fb      	strb	r3, [r7, #15]
        }
        if(__UART_GET_FLAG(USARTx -> USART_x,__NE__))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <UART_Receive_Handler+0x200>
        {
            USARTx -> Error_Code = (u8 *)Error_3;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a2a      	ldr	r2, [pc, #168]	; (8002aec <UART_Receive_Handler+0x2a0>)
 8002a44:	621a      	str	r2, [r3, #32]
            Error_counter += 3;
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	3303      	adds	r3, #3
 8002a4a:	73fb      	strb	r3, [r7, #15]
        }
        if(__UART_GET_FLAG(USARTx -> USART_x,__FE__))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	085b      	lsrs	r3, r3, #1
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <UART_Receive_Handler+0x21c>
        {
            USARTx -> Error_Code = (u8 *)Error_4;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a24      	ldr	r2, [pc, #144]	; (8002af0 <UART_Receive_Handler+0x2a4>)
 8002a60:	621a      	str	r2, [r3, #32]
            Error_counter += 4;
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	3304      	adds	r3, #4
 8002a66:	73fb      	strb	r3, [r7, #15]
        }
        // two or more errors had happened.
        if (Error_counter > 4)
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d920      	bls.n	8002ab0 <UART_Receive_Handler+0x264>
        {
            switch (Error_counter)
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	3b05      	subs	r3, #5
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d81d      	bhi.n	8002ab2 <UART_Receive_Handler+0x266>
 8002a76:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <UART_Receive_Handler+0x230>)
 8002a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7c:	08002a91 	.word	0x08002a91
 8002a80:	08002aa1 	.word	0x08002aa1
 8002a84:	08002a99 	.word	0x08002a99
 8002a88:	08002ab3 	.word	0x08002ab3
 8002a8c:	08002aa9 	.word	0x08002aa9
            {
            case 5: USARTx -> Error_Code = (u8 *)"Parity and Noise Errors ";
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <UART_Receive_Handler+0x2a8>)
 8002a94:	621a      	str	r2, [r3, #32]
                break;
 8002a96:	e00c      	b.n	8002ab2 <UART_Receive_Handler+0x266>
            case 7: USARTx -> Error_Code = (u8 *)"Noise and Frame Errors ";
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a17      	ldr	r2, [pc, #92]	; (8002af8 <UART_Receive_Handler+0x2ac>)
 8002a9c:	621a      	str	r2, [r3, #32]
                break;
 8002a9e:	e008      	b.n	8002ab2 <UART_Receive_Handler+0x266>
            case 6: USARTx -> Error_Code = (u8 *)"Parity and Frame Errors ";
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a16      	ldr	r2, [pc, #88]	; (8002afc <UART_Receive_Handler+0x2b0>)
 8002aa4:	621a      	str	r2, [r3, #32]
                break;
 8002aa6:	e004      	b.n	8002ab2 <UART_Receive_Handler+0x266>
            case 9: USARTx -> Error_Code = (u8 *)"Parity, Frame, and Noise Errors ";
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a15      	ldr	r2, [pc, #84]	; (8002b00 <UART_Receive_Handler+0x2b4>)
 8002aac:	621a      	str	r2, [r3, #32]
                break;
 8002aae:	e000      	b.n	8002ab2 <UART_Receive_Handler+0x266>
            }
        }
 8002ab0:	bf00      	nop

        USARTx ->RX_Lock_Flag = IDLE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	775a      	strb	r2, [r3, #29]
        USARTx ->RX_Lock_Counter = 0;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	779a      	strb	r2, [r3, #30]

        // Enable the UART Transmit Complete Interrupt.
        SET_BIT(USARTx -> USART_x ->CR1, CR1_TCIE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002acc:	60da      	str	r2, [r3, #12]

        // Disable the Rx line.
        __COMM_DISABLE(USARTx,RX);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0204 	bic.w	r2, r2, #4
 8002adc:	60da      	str	r2, [r3, #12]

        return Uart_ERROR; 
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e021      	b.n	8002b26 <UART_Receive_Handler+0x2da>
 8002ae2:	bf00      	nop
 8002ae4:	08006fd8 	.word	0x08006fd8
 8002ae8:	08006ffc 	.word	0x08006ffc
 8002aec:	0800700c 	.word	0x0800700c
 8002af0:	0800701c 	.word	0x0800701c
 8002af4:	0800702c 	.word	0x0800702c
 8002af8:	08007048 	.word	0x08007048
 8002afc:	08007060 	.word	0x08007060
 8002b00:	0800707c 	.word	0x0800707c
    }

    // Enable the UART Transmit Complete Interrupt.
    SET_BIT(USARTx -> USART_x ->CR1, CR1_TCIE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b12:	60da      	str	r2, [r3, #12]
    // Enable Read register not empty interrupt.
    SET_BIT(USARTx ->USART_x ->CR1, CR1_RXNEIE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0220 	orr.w	r2, r2, #32
 8002b22:	60da      	str	r2, [r3, #12]

    return Uart_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop

08002b34 <MCAL_UART_INTT_CALLBACK>:
/// @param  USARTx                 : the Struct of Peripheral's Registers.
/// @param  INTT_TYPE              : the type of the Interrupt that should be happened to execute this additional function.
/// @param  Copy_ptr               : pointer to the additional function that will be executed.
/// @retval Functions Status.
Uart_Fun_Status	    MCAL_UART_INTT_CALLBACK(USART_HANDLE *USARTx , USART_INT_TYPE INTT_TYPE, void (*Copy_ptr)(USART_HANDLE *USARTx))
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	72fb      	strb	r3, [r7, #11]
    USARTx ->Callback_Flag = INTT_TYPE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	7afa      	ldrb	r2, [r7, #11]
 8002b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if      (USARTx -> USART_x == USART1_R)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <MCAL_UART_INTT_CALLBACK+0x6c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d106      	bne.n	8002b62 <MCAL_UART_INTT_CALLBACK+0x2e>
    {
        USART1_CallBack = *Copy_ptr;
 8002b54:	4a13      	ldr	r2, [pc, #76]	; (8002ba4 <MCAL_UART_INTT_CALLBACK+0x70>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6013      	str	r3, [r2, #0]
        __USART1__INTERRUPT_TYPE__  = INTT_TYPE;
 8002b5a:	4a13      	ldr	r2, [pc, #76]	; (8002ba8 <MCAL_UART_INTT_CALLBACK+0x74>)
 8002b5c:	7afb      	ldrb	r3, [r7, #11]
 8002b5e:	7013      	strb	r3, [r2, #0]
 8002b60:	e016      	b.n	8002b90 <MCAL_UART_INTT_CALLBACK+0x5c>
    }
    else if (USARTx -> USART_x == USART2_R)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a11      	ldr	r2, [pc, #68]	; (8002bac <MCAL_UART_INTT_CALLBACK+0x78>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d106      	bne.n	8002b7a <MCAL_UART_INTT_CALLBACK+0x46>
    {
        USART2_CallBack = *Copy_ptr;
 8002b6c:	4a10      	ldr	r2, [pc, #64]	; (8002bb0 <MCAL_UART_INTT_CALLBACK+0x7c>)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6013      	str	r3, [r2, #0]
        __USART2__INTERRUPT_TYPE__  = INTT_TYPE;
 8002b72:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <MCAL_UART_INTT_CALLBACK+0x80>)
 8002b74:	7afb      	ldrb	r3, [r7, #11]
 8002b76:	7013      	strb	r3, [r2, #0]
 8002b78:	e00a      	b.n	8002b90 <MCAL_UART_INTT_CALLBACK+0x5c>
    }
    else if (USARTx -> USART_x == USART6_R)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a0e      	ldr	r2, [pc, #56]	; (8002bb8 <MCAL_UART_INTT_CALLBACK+0x84>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d105      	bne.n	8002b90 <MCAL_UART_INTT_CALLBACK+0x5c>
    {
        USART6_CallBack = *Copy_ptr;
 8002b84:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <MCAL_UART_INTT_CALLBACK+0x88>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6013      	str	r3, [r2, #0]
        __USART6__INTERRUPT_TYPE__  = INTT_TYPE;
 8002b8a:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <MCAL_UART_INTT_CALLBACK+0x8c>)
 8002b8c:	7afb      	ldrb	r3, [r7, #11]
 8002b8e:	7013      	strb	r3, [r2, #0]
    }
    return Uart_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40011000 	.word	0x40011000
 8002ba4:	20000098 	.word	0x20000098
 8002ba8:	2000009c 	.word	0x2000009c
 8002bac:	40004400 	.word	0x40004400
 8002bb0:	200000a0 	.word	0x200000a0
 8002bb4:	200000a4 	.word	0x200000a4
 8002bb8:	40011400 	.word	0x40011400
 8002bbc:	200000a8 	.word	0x200000a8
 8002bc0:	200000ac 	.word	0x200000ac

08002bc4 <USART1_IRQHandler>:

/// @brief  USART1_IRQHandler   : the HANDLER Function of The USART1_IRQHandler interrupt.
/// @param  takes No parameters.
/// @retval return Nothing.
void USART1_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
    // UART in mode Transmitter. 
	if(GET_BIT(USART1_Struct -> USART_x -> CR1,CR1_TCIE) && __UART_GET_FLAG(USART1_Struct -> USART_x ,__TC__))
 8002bc8:	4b26      	ldr	r3, [pc, #152]	; (8002c64 <USART1_IRQHandler+0xa0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	099b      	lsrs	r3, r3, #6
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d017      	beq.n	8002c0a <USART1_IRQHandler+0x46>
 8002bda:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <USART1_IRQHandler+0xa0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	099b      	lsrs	r3, r3, #6
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00e      	beq.n	8002c0a <USART1_IRQHandler+0x46>
	{
	    UART_Transmit_Handler(USART1_Struct);
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <USART1_IRQHandler+0xa0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fd1b 	bl	800262c <UART_Transmit_Handler>
        __UART_CLEAR_FLAG(USART1_Struct -> USART_x ,__TC__);
 8002bf6:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <USART1_IRQHandler+0xa0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <USART1_IRQHandler+0xa0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c08:	601a      	str	r2, [r3, #0]
	}
    // UART in mode Receiver.
	if(GET_BIT(USART1_Struct -> USART_x -> CR1,CR1_RXNEIE) && __UART_GET_FLAG(USART1_Struct -> USART_x ,__RXNE__))
 8002c0a:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <USART1_IRQHandler+0xa0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d017      	beq.n	8002c4c <USART1_IRQHandler+0x88>
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <USART1_IRQHandler+0xa0>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00e      	beq.n	8002c4c <USART1_IRQHandler+0x88>
	{
	    UART_Receive_Handler(USART1_Struct);
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <USART1_IRQHandler+0xa0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fe0a 	bl	800284c <UART_Receive_Handler>
        __UART_CLEAR_FLAG(USART1_Struct -> USART_x ,__RXNE__);
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <USART1_IRQHandler+0xa0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <USART1_IRQHandler+0xa0>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0220 	bic.w	r2, r2, #32
 8002c4a:	601a      	str	r2, [r3, #0]
	}
	if ( USART2_CallBack != NULL)
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <USART1_IRQHandler+0xa4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <USART1_IRQHandler+0x9c>
	{
		USART2_CallBack(USART1_Struct);
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <USART1_IRQHandler+0xa4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a02      	ldr	r2, [pc, #8]	; (8002c64 <USART1_IRQHandler+0xa0>)
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4798      	blx	r3
	}
}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	200000b0 	.word	0x200000b0
 8002c68:	200000a0 	.word	0x200000a0

08002c6c <USART2_IRQHandler>:

/// @brief  USART2_IRQHandler   : the HANDLER Function of The USART2_IRQHandler interrupt.
/// @param  takes No parameters.
/// @retval return Nothing.
void USART2_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
    // UART in mode Transmitter. 
	if(GET_BIT(USART2_Struct -> USART_x -> CR1,CR1_TCIE) && __UART_GET_FLAG(USART2_Struct -> USART_x ,__TC__))
 8002c70:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <USART2_IRQHandler+0xa0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d017      	beq.n	8002cb2 <USART2_IRQHandler+0x46>
 8002c82:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <USART2_IRQHandler+0xa0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	099b      	lsrs	r3, r3, #6
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00e      	beq.n	8002cb2 <USART2_IRQHandler+0x46>
    {
        UART_Transmit_Handler(USART2_Struct);
 8002c94:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <USART2_IRQHandler+0xa0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fcc7 	bl	800262c <UART_Transmit_Handler>
        __UART_CLEAR_FLAG(USART2_Struct -> USART_x ,__TC__);
 8002c9e:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <USART2_IRQHandler+0xa0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <USART2_IRQHandler+0xa0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb0:	601a      	str	r2, [r3, #0]
	}
    // UART in mode Receiver.
	if(GET_BIT(USART2_Struct -> USART_x -> CR1,CR1_RXNEIE) && __UART_GET_FLAG(USART2_Struct -> USART_x ,__RXNE__))
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <USART2_IRQHandler+0xa0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d017      	beq.n	8002cf4 <USART2_IRQHandler+0x88>
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <USART2_IRQHandler+0xa0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00e      	beq.n	8002cf4 <USART2_IRQHandler+0x88>
	{
	    UART_Receive_Handler(USART2_Struct);
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <USART2_IRQHandler+0xa0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fdb6 	bl	800284c <UART_Receive_Handler>
        __UART_CLEAR_FLAG(USART2_Struct -> USART_x ,__RXNE__);
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <USART2_IRQHandler+0xa0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <USART2_IRQHandler+0xa0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0220 	bic.w	r2, r2, #32
 8002cf2:	601a      	str	r2, [r3, #0]
	}
	if ( USART2_CallBack != NULL)
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <USART2_IRQHandler+0xa4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <USART2_IRQHandler+0x9c>
	{
		USART2_CallBack(USART2_Struct);
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <USART2_IRQHandler+0xa4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a02      	ldr	r2, [pc, #8]	; (8002d0c <USART2_IRQHandler+0xa0>)
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	4610      	mov	r0, r2
 8002d06:	4798      	blx	r3
	}
}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	200000b4 	.word	0x200000b4
 8002d10:	200000a0 	.word	0x200000a0

08002d14 <USART6_IRQHandler>:

/// @brief  USART6_IRQHandler   : the HANDLER Function of The USART6_IRQHandler interrupt.
/// @param  takes No parameters.
/// @retval return Nothing.
void USART6_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
    // UART in mode Transmitter. 
	if(GET_BIT(USART6_Struct -> USART_x -> CR1,CR1_TCIE) && __UART_GET_FLAG(USART6_Struct -> USART_x ,__TC__))
 8002d18:	4b26      	ldr	r3, [pc, #152]	; (8002db4 <USART6_IRQHandler+0xa0>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	099b      	lsrs	r3, r3, #6
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d017      	beq.n	8002d5a <USART6_IRQHandler+0x46>
 8002d2a:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <USART6_IRQHandler+0xa0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	099b      	lsrs	r3, r3, #6
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00e      	beq.n	8002d5a <USART6_IRQHandler+0x46>
	{
        UART_Transmit_Handler(USART6_Struct);
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <USART6_IRQHandler+0xa0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fc73 	bl	800262c <UART_Transmit_Handler>
	   __UART_CLEAR_FLAG(USART6_Struct -> USART_x ,__TC__);
 8002d46:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <USART6_IRQHandler+0xa0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <USART6_IRQHandler+0xa0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d58:	601a      	str	r2, [r3, #0]
	}
    // UART in mode Receiver.
	if(GET_BIT(USART6_Struct -> USART_x -> CR1,CR1_RXNEIE) && __UART_GET_FLAG(USART6_Struct -> USART_x ,__RXNE__))
 8002d5a:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <USART6_IRQHandler+0xa0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d017      	beq.n	8002d9c <USART6_IRQHandler+0x88>
 8002d6c:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <USART6_IRQHandler+0xa0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00e      	beq.n	8002d9c <USART6_IRQHandler+0x88>
	{
	    UART_Receive_Handler(USART6_Struct);
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <USART6_IRQHandler+0xa0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fd62 	bl	800284c <UART_Receive_Handler>
        __UART_CLEAR_FLAG(USART6_Struct -> USART_x ,__RXNE__);
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <USART6_IRQHandler+0xa0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <USART6_IRQHandler+0xa0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0220 	bic.w	r2, r2, #32
 8002d9a:	601a      	str	r2, [r3, #0]
	}
	if ( USART2_CallBack != NULL)
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <USART6_IRQHandler+0xa4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <USART6_IRQHandler+0x9c>
	{
		USART2_CallBack(USART6_Struct);
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <USART6_IRQHandler+0xa4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a02      	ldr	r2, [pc, #8]	; (8002db4 <USART6_IRQHandler+0xa0>)
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	4610      	mov	r0, r2
 8002dae:	4798      	blx	r3
	}
}
 8002db0:	bf00      	nop
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	200000b8 	.word	0x200000b8
 8002db8:	200000a0 	.word	0x200000a0

08002dbc <UART_Check_LockState>:
/// @param _CommType_           : the Type of Communication:
///        @arg  TX_Lock_Status :  The Tx lock Flag.
///        @arg  RX_Lock_Status :  The Rx lock Flag.
/// @return     the Flag state.
static Uart_LOCK_ST    UART_Check_LockState(USART_HANDLE *USARTx ,COMM_TYPE _CommType_ )
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	70fb      	strb	r3, [r7, #3]
    switch (_CommType_)
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d03a      	beq.n	8002e44 <UART_Check_LockState+0x88>
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	dc39      	bgt.n	8002e46 <UART_Check_LockState+0x8a>
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <UART_Check_LockState+0x20>
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d01a      	beq.n	8002e10 <UART_Check_LockState+0x54>
 8002dda:	e034      	b.n	8002e46 <UART_Check_LockState+0x8a>
    {
    case TX:
        if (USARTx -> TX_Lock_Flag == BUSY)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7c5b      	ldrb	r3, [r3, #17]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d113      	bne.n	8002e0c <UART_Check_LockState+0x50>
        {
            if ((USARTx -> TX_Lock_Counter) >= LOCK_TIME_LIMIT)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	7c9b      	ldrb	r3, [r3, #18]
 8002de8:	2b31      	cmp	r3, #49	; 0x31
 8002dea:	d907      	bls.n	8002dfc <UART_Check_LockState+0x40>
            {
                // perform the Unlock process.
                USARTx -> TX_Lock_Flag = IDLE ;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	745a      	strb	r2, [r3, #17]
                USARTx -> TX_Lock_Counter = 0 ;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	749a      	strb	r2, [r3, #18]
                return IDLE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e025      	b.n	8002e48 <UART_Check_LockState+0x8c>
            }
            else
            {
                USARTx -> TX_Lock_Counter ++;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	7c9b      	ldrb	r3, [r3, #18]
 8002e00:	3301      	adds	r3, #1
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	749a      	strb	r2, [r3, #18]
                return BUSY;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e01d      	b.n	8002e48 <UART_Check_LockState+0x8c>
            }
        }
        else
        {
            return IDLE ;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e01b      	b.n	8002e48 <UART_Check_LockState+0x8c>
        }
        break;

    case RX:
        if (USARTx -> RX_Lock_Flag == BUSY)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7f5b      	ldrb	r3, [r3, #29]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d113      	bne.n	8002e40 <UART_Check_LockState+0x84>
        {
            if ((USARTx -> RX_Lock_Counter) >= LOCK_TIME_LIMIT)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	7f9b      	ldrb	r3, [r3, #30]
 8002e1c:	2b31      	cmp	r3, #49	; 0x31
 8002e1e:	d907      	bls.n	8002e30 <UART_Check_LockState+0x74>
            {
                // perform the Unlock process.
                USARTx -> RX_Lock_Flag = IDLE ;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	775a      	strb	r2, [r3, #29]
                USARTx -> RX_Lock_Counter = 0 ;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	779a      	strb	r2, [r3, #30]
                return IDLE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e00b      	b.n	8002e48 <UART_Check_LockState+0x8c>
            }
            else
            {
                USARTx -> RX_Lock_Counter ++;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	7f9b      	ldrb	r3, [r3, #30]
 8002e34:	3301      	adds	r3, #1
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	779a      	strb	r2, [r3, #30]
                return BUSY;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e003      	b.n	8002e48 <UART_Check_LockState+0x8c>
            }
        }
        else
        {
            return IDLE ;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e001      	b.n	8002e48 <UART_Check_LockState+0x8c>
        }
        break;
    case TX_RX:
        break;
 8002e44:	bf00      	nop
    }
    return ERROR_IN;
 8002e46:	2302      	movs	r3, #2
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	; 0x28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002e60:	f002 fd64 	bl	800592c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002e64:	4b65      	ldr	r3, [pc, #404]	; (8002ffc <pvPortMalloc+0x1a8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002e6c:	f000 f934 	bl	80030d8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e70:	4b63      	ldr	r3, [pc, #396]	; (8003000 <pvPortMalloc+0x1ac>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f040 80a7 	bne.w	8002fcc <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d02d      	beq.n	8002ee0 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002e84:	2208      	movs	r2, #8
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d227      	bcs.n	8002ee0 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002e90:	2208      	movs	r2, #8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d021      	beq.n	8002ee6 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f023 0307 	bic.w	r3, r3, #7
 8002ea8:	3308      	adds	r3, #8
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d214      	bcs.n	8002eda <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f023 0307 	bic.w	r3, r3, #7
 8002eb6:	3308      	adds	r3, #8
 8002eb8:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d010      	beq.n	8002ee6 <pvPortMalloc+0x92>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002ed6:	bf00      	nop
 8002ed8:	e7fe      	b.n	8002ed8 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ede:	e002      	b.n	8002ee6 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	e000      	b.n	8002ee8 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ee6:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d06e      	beq.n	8002fcc <pvPortMalloc+0x178>
 8002eee:	4b45      	ldr	r3, [pc, #276]	; (8003004 <pvPortMalloc+0x1b0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d869      	bhi.n	8002fcc <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002ef8:	4b43      	ldr	r3, [pc, #268]	; (8003008 <pvPortMalloc+0x1b4>)
 8002efa:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002efc:	4b42      	ldr	r3, [pc, #264]	; (8003008 <pvPortMalloc+0x1b4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f02:	e004      	b.n	8002f0e <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d903      	bls.n	8002f20 <pvPortMalloc+0xcc>
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f1      	bne.n	8002f04 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002f20:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <pvPortMalloc+0x1a8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d050      	beq.n	8002fcc <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2208      	movs	r2, #8
 8002f30:	4413      	add	r3, r2
 8002f32:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	1ad2      	subs	r2, r2, r3
 8002f44:	2308      	movs	r3, #8
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d91f      	bls.n	8002f8c <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <pvPortMalloc+0x120>
        __asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	613b      	str	r3, [r7, #16]
    }
 8002f70:	bf00      	nop
 8002f72:	e7fe      	b.n	8002f72 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	1ad2      	subs	r2, r2, r3
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002f86:	69b8      	ldr	r0, [r7, #24]
 8002f88:	f000 f908 	bl	800319c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <pvPortMalloc+0x1b0>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <pvPortMalloc+0x1b0>)
 8002f98:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <pvPortMalloc+0x1b0>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4b1b      	ldr	r3, [pc, #108]	; (800300c <pvPortMalloc+0x1b8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d203      	bcs.n	8002fae <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002fa6:	4b17      	ldr	r3, [pc, #92]	; (8003004 <pvPortMalloc+0x1b0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a18      	ldr	r2, [pc, #96]	; (800300c <pvPortMalloc+0x1b8>)
 8002fac:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	4b13      	ldr	r3, [pc, #76]	; (8003000 <pvPortMalloc+0x1ac>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <pvPortMalloc+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	4a11      	ldr	r2, [pc, #68]	; (8003010 <pvPortMalloc+0x1bc>)
 8002fca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002fcc:	f002 fcbc 	bl	8005948 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <pvPortMalloc+0x19c>
        __asm volatile
 8002fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fde:	f383 8811 	msr	BASEPRI, r3
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	60fb      	str	r3, [r7, #12]
    }
 8002fec:	bf00      	nop
 8002fee:	e7fe      	b.n	8002fee <pvPortMalloc+0x19a>
    return pvReturn;
 8002ff0:	69fb      	ldr	r3, [r7, #28]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3728      	adds	r7, #40	; 0x28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	200050c8 	.word	0x200050c8
 8003000:	200050dc 	.word	0x200050dc
 8003004:	200050cc 	.word	0x200050cc
 8003008:	200050c0 	.word	0x200050c0
 800300c:	200050d0 	.word	0x200050d0
 8003010:	200050d4 	.word	0x200050d4

08003014 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d04d      	beq.n	80030c2 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003026:	2308      	movs	r3, #8
 8003028:	425b      	negs	r3, r3
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4413      	add	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	4b24      	ldr	r3, [pc, #144]	; (80030cc <vPortFree+0xb8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10a      	bne.n	8003058 <vPortFree+0x44>
        __asm volatile
 8003042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	60fb      	str	r3, [r7, #12]
    }
 8003054:	bf00      	nop
 8003056:	e7fe      	b.n	8003056 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <vPortFree+0x62>
        __asm volatile
 8003060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	60bb      	str	r3, [r7, #8]
    }
 8003072:	bf00      	nop
 8003074:	e7fe      	b.n	8003074 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	4b14      	ldr	r3, [pc, #80]	; (80030cc <vPortFree+0xb8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01e      	beq.n	80030c2 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d11a      	bne.n	80030c2 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <vPortFree+0xb8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	43db      	mvns	r3, r3
 8003096:	401a      	ands	r2, r3
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800309c:	f002 fc46 	bl	800592c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <vPortFree+0xbc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4413      	add	r3, r2
 80030aa:	4a09      	ldr	r2, [pc, #36]	; (80030d0 <vPortFree+0xbc>)
 80030ac:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80030ae:	6938      	ldr	r0, [r7, #16]
 80030b0:	f000 f874 	bl	800319c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80030b4:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <vPortFree+0xc0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3301      	adds	r3, #1
 80030ba:	4a06      	ldr	r2, [pc, #24]	; (80030d4 <vPortFree+0xc0>)
 80030bc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80030be:	f002 fc43 	bl	8005948 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80030c2:	bf00      	nop
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200050dc 	.word	0x200050dc
 80030d0:	200050cc 	.word	0x200050cc
 80030d4:	200050d8 	.word	0x200050d8

080030d8 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80030de:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80030e2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80030e4:	4b27      	ldr	r3, [pc, #156]	; (8003184 <prvHeapInit+0xac>)
 80030e6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00c      	beq.n	800310c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	3307      	adds	r3, #7
 80030f6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0307 	bic.w	r3, r3, #7
 80030fe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	4a1f      	ldr	r2, [pc, #124]	; (8003184 <prvHeapInit+0xac>)
 8003108:	4413      	add	r3, r2
 800310a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003110:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <prvHeapInit+0xb0>)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003116:	4b1c      	ldr	r3, [pc, #112]	; (8003188 <prvHeapInit+0xb0>)
 8003118:	2200      	movs	r2, #0
 800311a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	4413      	add	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003124:	2208      	movs	r2, #8
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0307 	bic.w	r3, r3, #7
 8003132:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4a15      	ldr	r2, [pc, #84]	; (800318c <prvHeapInit+0xb4>)
 8003138:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800313a:	4b14      	ldr	r3, [pc, #80]	; (800318c <prvHeapInit+0xb4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2200      	movs	r2, #0
 8003140:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003142:	4b12      	ldr	r3, [pc, #72]	; (800318c <prvHeapInit+0xb4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <prvHeapInit+0xb4>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <prvHeapInit+0xb8>)
 8003166:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4a09      	ldr	r2, [pc, #36]	; (8003194 <prvHeapInit+0xbc>)
 800316e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003170:	4b09      	ldr	r3, [pc, #36]	; (8003198 <prvHeapInit+0xc0>)
 8003172:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003176:	601a      	str	r2, [r3, #0]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	200000c0 	.word	0x200000c0
 8003188:	200050c0 	.word	0x200050c0
 800318c:	200050c8 	.word	0x200050c8
 8003190:	200050d0 	.word	0x200050d0
 8003194:	200050cc 	.word	0x200050cc
 8003198:	200050dc 	.word	0x200050dc

0800319c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80031a4:	4b28      	ldr	r3, [pc, #160]	; (8003248 <prvInsertBlockIntoFreeList+0xac>)
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	e002      	b.n	80031b0 <prvInsertBlockIntoFreeList+0x14>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d8f7      	bhi.n	80031aa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	4413      	add	r3, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d108      	bne.n	80031de <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	441a      	add	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	441a      	add	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d118      	bne.n	8003224 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <prvInsertBlockIntoFreeList+0xb0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d00d      	beq.n	800321a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	441a      	add	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	e008      	b.n	800322c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800321a:	4b0c      	ldr	r3, [pc, #48]	; (800324c <prvInsertBlockIntoFreeList+0xb0>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	e003      	b.n	800322c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	429a      	cmp	r2, r3
 8003232:	d002      	beq.n	800323a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	200050c0 	.word	0x200050c0
 800324c:	200050c8 	.word	0x200050c8

08003250 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f103 0208 	add.w	r2, r3, #8
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f04f 32ff 	mov.w	r2, #4294967295
 8003268:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f103 0208 	add.w	r2, r3, #8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f103 0208 	add.w	r2, r3, #8
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80032aa:	b480      	push	{r7}
 80032ac:	b085      	sub	sp, #20
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
 80032b2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	601a      	str	r2, [r3, #0]
}
 80032e6:	bf00      	nop
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80032f2:	b480      	push	{r7}
 80032f4:	b085      	sub	sp, #20
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d103      	bne.n	8003312 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	e00c      	b.n	800332c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3308      	adds	r3, #8
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	e002      	b.n	8003320 <vListInsert+0x2e>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	429a      	cmp	r2, r3
 800332a:	d2f6      	bcs.n	800331a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	601a      	str	r2, [r3, #0]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6892      	ldr	r2, [r2, #8]
 800337a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6852      	ldr	r2, [r2, #4]
 8003384:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	429a      	cmp	r2, r3
 800338e:	d103      	bne.n	8003398 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	1e5a      	subs	r2, r3, #1
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <main>:
/* USER CODE END 0 */
/* ---------------------------------------------------------------------------*/


int main(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af02      	add	r7, sp, #8
	// Peripheral Initialization :
	/* RCC Definition */
	MRCC_voidSystemClkInit();
 80033be:	f7fe fae3 	bl	8001988 <MRCC_voidSystemClkInit>
	MRCC_voidPeripheralEnable(AHB1 , GPIOAEN);
 80033c2:	2100      	movs	r1, #0
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7fe fb1b 	bl	8001a00 <MRCC_voidPeripheralEnable>
	MRCC_voidPeripheralEnable(APB1 , USART2EN);
 80033ca:	2111      	movs	r1, #17
 80033cc:	2002      	movs	r0, #2
 80033ce:	f7fe fb17 	bl	8001a00 <MRCC_voidPeripheralEnable>
	MRCC_voidPeripheralEnable(APB2 , TIM1EN);
 80033d2:	2100      	movs	r1, #0
 80033d4:	2003      	movs	r0, #3
 80033d6:	f7fe fb13 	bl	8001a00 <MRCC_voidPeripheralEnable>

	/* TIMER Definitions */
	MCAL_TIM_General_Config(&Uart_timer);
 80033da:	485f      	ldr	r0, [pc, #380]	; (8003558 <main+0x1a0>)
 80033dc:	f7fe fb6a 	bl	8001ab4 <MCAL_TIM_General_Config>
	MCAL_TIM_Prescaler(&Uart_timer, 16000);
 80033e0:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 80033e4:	485c      	ldr	r0, [pc, #368]	; (8003558 <main+0x1a0>)
 80033e6:	f7fe fdc5 	bl	8001f74 <MCAL_TIM_Prescaler>
	MCAL_TIM_Reload_Value(&Uart_timer, _AUTO_RELOAD_MAX_);
 80033ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80033ee:	485a      	ldr	r0, [pc, #360]	; (8003558 <main+0x1a0>)
 80033f0:	f7fe fde5 	bl	8001fbe <MCAL_TIM_Reload_Value>

	/* UART Definitions */
	MCAL_UART_Init_(&UART_2, &Serial_Frame, &Serial_Receiving, 112500, &Uart_timer);
 80033f4:	4b58      	ldr	r3, [pc, #352]	; (8003558 <main+0x1a0>)
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	4b58      	ldr	r3, [pc, #352]	; (800355c <main+0x1a4>)
 80033fa:	4a59      	ldr	r2, [pc, #356]	; (8003560 <main+0x1a8>)
 80033fc:	4959      	ldr	r1, [pc, #356]	; (8003564 <main+0x1ac>)
 80033fe:	485a      	ldr	r0, [pc, #360]	; (8003568 <main+0x1b0>)
 8003400:	f7fe feda 	bl	80021b8 <MCAL_UART_Init_>
	MCAL_UART_Enable(&UART_2);
 8003404:	4858      	ldr	r0, [pc, #352]	; (8003568 <main+0x1b0>)
 8003406:	f7fe fff1 	bl	80023ec <MCAL_UART_Enable>

	/* GPIO Definitions */
	GPIO_voidSetPinDirection(GPIO_PORTA, PIN2, &Uart2_Tx); // Uart2-TX.
 800340a:	4a58      	ldr	r2, [pc, #352]	; (800356c <main+0x1b4>)
 800340c:	2102      	movs	r1, #2
 800340e:	2000      	movs	r0, #0
 8003410:	f7fd fdac 	bl	8000f6c <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(GPIO_PORTA, PIN3, &Uart2_Rx); // Uart2-RX.
 8003414:	4a56      	ldr	r2, [pc, #344]	; (8003570 <main+0x1b8>)
 8003416:	2103      	movs	r1, #3
 8003418:	2000      	movs	r0, #0
 800341a:	f7fd fda7 	bl	8000f6c <GPIO_voidSetPinDirection>

	GPIO_voidSetAlternativeFunction(GPIO_PORTA , PIN2 , GPIO_AF_7);
 800341e:	2207      	movs	r2, #7
 8003420:	2102      	movs	r1, #2
 8003422:	2000      	movs	r0, #0
 8003424:	f7fe f9e4 	bl	80017f0 <GPIO_voidSetAlternativeFunction>
	GPIO_voidSetAlternativeFunction(GPIO_PORTA , PIN3 , GPIO_AF_7);
 8003428:	2207      	movs	r2, #7
 800342a:	2103      	movs	r1, #3
 800342c:	2000      	movs	r0, #0
 800342e:	f7fe f9df 	bl	80017f0 <GPIO_voidSetAlternativeFunction>

	// FreeRTOS inititalization :
	Receive_Mutex 		= xSemaphoreCreateMutex();
 8003432:	2001      	movs	r0, #1
 8003434:	f001 f872 	bl	800451c <xQueueCreateMutex>
 8003438:	4603      	mov	r3, r0
 800343a:	4a4e      	ldr	r2, [pc, #312]	; (8003574 <main+0x1bc>)
 800343c:	6013      	str	r3, [r2, #0]

	Uart_Message_Queue 			= xQueueCreate(3,sizeof(u8)	); // Receive Task queue
 800343e:	2200      	movs	r2, #0
 8003440:	2101      	movs	r1, #1
 8003442:	2003      	movs	r0, #3
 8003444:	f000 ffe0 	bl	8004408 <xQueueGenericCreate>
 8003448:	4603      	mov	r3, r0
 800344a:	4a4b      	ldr	r2, [pc, #300]	; (8003578 <main+0x1c0>)
 800344c:	6013      	str	r3, [r2, #0]
	qCalcObjectSpeedTask_Queue 	= xQueueCreate(2,sizeof(u8)	); // Calculate Object Speed queue
 800344e:	2200      	movs	r2, #0
 8003450:	2101      	movs	r1, #1
 8003452:	2002      	movs	r0, #2
 8003454:	f000 ffd8 	bl	8004408 <xQueueGenericCreate>
 8003458:	4603      	mov	r3, r0
 800345a:	4a48      	ldr	r2, [pc, #288]	; (800357c <main+0x1c4>)
 800345c:	6013      	str	r3, [r2, #0]
	Object_Queue 				= xQueueCreate(1,sizeof(f32)); // object Queues
 800345e:	2200      	movs	r2, #0
 8003460:	2104      	movs	r1, #4
 8003462:	2001      	movs	r0, #1
 8003464:	f000 ffd0 	bl	8004408 <xQueueGenericCreate>
 8003468:	4603      	mov	r3, r0
 800346a:	4a45      	ldr	r2, [pc, #276]	; (8003580 <main+0x1c8>)
 800346c:	6013      	str	r3, [r2, #0]
	SpeedLimit_Queue 			= xQueueCreate(1,sizeof(f32)); // Speed Limit Queues
 800346e:	2200      	movs	r2, #0
 8003470:	2104      	movs	r1, #4
 8003472:	2001      	movs	r0, #1
 8003474:	f000 ffc8 	bl	8004408 <xQueueGenericCreate>
 8003478:	4603      	mov	r3, r0
 800347a:	4a42      	ldr	r2, [pc, #264]	; (8003584 <main+0x1cc>)
 800347c:	6013      	str	r3, [r2, #0]
	Uart_Transmit_Queue 		= xQueueCreate(1,sizeof(f32)); // Transmit Task Queue
 800347e:	2200      	movs	r2, #0
 8003480:	2104      	movs	r1, #4
 8003482:	2001      	movs	r0, #1
 8003484:	f000 ffc0 	bl	8004408 <xQueueGenericCreate>
 8003488:	4603      	mov	r3, r0
 800348a:	4a3f      	ldr	r2, [pc, #252]	; (8003588 <main+0x1d0>)
 800348c:	6013      	str	r3, [r2, #0]

	CarNewSpeed_QueueSet		= xQueueCreateSet(2*(sizeof(f32))); // the queue that receive any change in the speed.
 800348e:	2008      	movs	r0, #8
 8003490:	f001 fe88 	bl	80051a4 <xQueueCreateSet>
 8003494:	4603      	mov	r3, r0
 8003496:	4a3d      	ldr	r2, [pc, #244]	; (800358c <main+0x1d4>)
 8003498:	6013      	str	r3, [r2, #0]
	// Adding Element to the QueueSet.
	xQueueAddToSet(Object_Queue, CarNewSpeed_QueueSet);
 800349a:	4b39      	ldr	r3, [pc, #228]	; (8003580 <main+0x1c8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a3b      	ldr	r2, [pc, #236]	; (800358c <main+0x1d4>)
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	4611      	mov	r1, r2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 fe8c 	bl	80051c2 <xQueueAddToSet>
	xQueueAddToSet(SpeedLimit_Queue, CarNewSpeed_QueueSet);
 80034aa:	4b36      	ldr	r3, [pc, #216]	; (8003584 <main+0x1cc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a37      	ldr	r2, [pc, #220]	; (800358c <main+0x1d4>)
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	4611      	mov	r1, r2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f001 fe84 	bl	80051c2 <xQueueAddToSet>

	// FreeRTOS Tasks Declerations :
	xTaskCreate( tReceiveFromUartTask , "tReceiveFromUartTask"  	, 100 , NULL , 10U 	, vReceiveFromUartTask ); // the Task that Receive the data from the UART
 80034ba:	4b35      	ldr	r3, [pc, #212]	; (8003590 <main+0x1d8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	4b34      	ldr	r3, [pc, #208]	; (8003594 <main+0x1dc>)
 80034c2:	9301      	str	r3, [sp, #4]
 80034c4:	230a      	movs	r3, #10
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	2300      	movs	r3, #0
 80034ca:	2264      	movs	r2, #100	; 0x64
 80034cc:	4932      	ldr	r1, [pc, #200]	; (8003598 <main+0x1e0>)
 80034ce:	f001 ff14 	bl	80052fa <xTaskCreate>
	xTaskCreate( tTransmitToUartTask  , "tTransmitToUartTask"  		, 100 , NULL , 9U 	, vTransmitToUartTask ); // the Task that transmit the data to the UART
 80034d2:	4b32      	ldr	r3, [pc, #200]	; (800359c <main+0x1e4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <main+0x1e8>)
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	2309      	movs	r3, #9
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	2300      	movs	r3, #0
 80034e2:	2264      	movs	r2, #100	; 0x64
 80034e4:	492f      	ldr	r1, [pc, #188]	; (80035a4 <main+0x1ec>)
 80034e6:	f001 ff08 	bl	80052fa <xTaskCreate>
	xTaskCreate( tFilterTask		  , "tFilterTask"  				, 100 , NULL , 8U 	, vFilterTask 			); // the Task that Receive the data from the UART
 80034ea:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <main+0x1f0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	4b2e      	ldr	r3, [pc, #184]	; (80035ac <main+0x1f4>)
 80034f2:	9301      	str	r3, [sp, #4]
 80034f4:	2308      	movs	r3, #8
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	2300      	movs	r3, #0
 80034fa:	2264      	movs	r2, #100	; 0x64
 80034fc:	492c      	ldr	r1, [pc, #176]	; (80035b0 <main+0x1f8>)
 80034fe:	f001 fefc 	bl	80052fa <xTaskCreate>
	xTaskCreate( tBumpHandlingTask 	  , "tBumpHandlingTask"  		, 100 , NULL , 7U 	, vBumpHandlingTask    ); // the task that handle the bump, this task should take high periority.
 8003502:	4b2c      	ldr	r3, [pc, #176]	; (80035b4 <main+0x1fc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	4b2b      	ldr	r3, [pc, #172]	; (80035b8 <main+0x200>)
 800350a:	9301      	str	r3, [sp, #4]
 800350c:	2307      	movs	r3, #7
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	2300      	movs	r3, #0
 8003512:	2264      	movs	r2, #100	; 0x64
 8003514:	4929      	ldr	r1, [pc, #164]	; (80035bc <main+0x204>)
 8003516:	f001 fef0 	bl	80052fa <xTaskCreate>
	xTaskCreate( tCalcCarNewSpeedTask , "tCalcCarNewSpeedTask"  	, 100 , NULL , 4U 	, vCalcCarNewSpeedTask ); // the Task that Detect the Car new Speed
 800351a:	4b29      	ldr	r3, [pc, #164]	; (80035c0 <main+0x208>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	4b28      	ldr	r3, [pc, #160]	; (80035c4 <main+0x20c>)
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	2304      	movs	r3, #4
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2300      	movs	r3, #0
 800352a:	2264      	movs	r2, #100	; 0x64
 800352c:	4926      	ldr	r1, [pc, #152]	; (80035c8 <main+0x210>)
 800352e:	f001 fee4 	bl	80052fa <xTaskCreate>
	xTaskCreate( tCalcObjectSpeedTask , "tCalcObjectSpeedTask"  	, 100 , NULL , 3U 	, vCalcObjectSpeedTask ); // the Task that Detect the Object Speed
 8003532:	4b26      	ldr	r3, [pc, #152]	; (80035cc <main+0x214>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	4b25      	ldr	r3, [pc, #148]	; (80035d0 <main+0x218>)
 800353a:	9301      	str	r3, [sp, #4]
 800353c:	2303      	movs	r3, #3
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2300      	movs	r3, #0
 8003542:	2264      	movs	r2, #100	; 0x64
 8003544:	4923      	ldr	r1, [pc, #140]	; (80035d4 <main+0x21c>)
 8003546:	f001 fed8 	bl	80052fa <xTaskCreate>




	// start the RTOS scheduler :
	vTaskStartScheduler();
 800354a:	f002 f99d 	bl	8005888 <vTaskStartScheduler>
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	2000002c 	.word	0x2000002c
 800355c:	0001b774 	.word	0x0001b774
 8003560:	20000028 	.word	0x20000028
 8003564:	200050e0 	.word	0x200050e0
 8003568:	20000000 	.word	0x20000000
 800356c:	20000044 	.word	0x20000044
 8003570:	20000048 	.word	0x20000048
 8003574:	200050e8 	.word	0x200050e8
 8003578:	200050ec 	.word	0x200050ec
 800357c:	200050f0 	.word	0x200050f0
 8003580:	200050f4 	.word	0x200050f4
 8003584:	200050f8 	.word	0x200050f8
 8003588:	200050fc 	.word	0x200050fc
 800358c:	20005100 	.word	0x20005100
 8003590:	20005108 	.word	0x20005108
 8003594:	08003661 	.word	0x08003661
 8003598:	080070a0 	.word	0x080070a0
 800359c:	2000511c 	.word	0x2000511c
 80035a0:	08003df1 	.word	0x08003df1
 80035a4:	080070b8 	.word	0x080070b8
 80035a8:	2000510c 	.word	0x2000510c
 80035ac:	080036d1 	.word	0x080036d1
 80035b0:	080070cc 	.word	0x080070cc
 80035b4:	20005118 	.word	0x20005118
 80035b8:	08003c1d 	.word	0x08003c1d
 80035bc:	080070d8 	.word	0x080070d8
 80035c0:	20005114 	.word	0x20005114
 80035c4:	08003b29 	.word	0x08003b29
 80035c8:	080070ec 	.word	0x080070ec
 80035cc:	20005110 	.word	0x20005110
 80035d0:	080037bd 	.word	0x080037bd
 80035d4:	08007104 	.word	0x08007104

080035d8 <add_callbackRX>:

/*---------------------------------------------------------------------------------------------------------------------*/
/* Special Functions Implementation : ---------------------------------------------------------------------------------*/
// the Uart Receive_interrupt mode callback function.
void add_callbackRX(USART_HANDLE *USARTx)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	// start from the Highest priority task or not.
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60fb      	str	r3, [r7, #12]

	// Take the Mutex to Start the task.
	xSemaphoreTake( Receive_Mutex , portMAX_DELAY );
 80035e4:	4b14      	ldr	r3, [pc, #80]	; (8003638 <add_callbackRX+0x60>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f04f 31ff 	mov.w	r1, #4294967295
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 fb15 	bl	8004c1c <xQueueSemaphoreTake>

	if(USARTx ->RX_Buffer_Ptr[USARTx -> RX_Process_Count]  == USARTx ->RX_Buffer_lastEL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 80035fc:	4413      	add	r3, r2
 80035fe:	781a      	ldrb	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	7f1b      	ldrb	r3, [r3, #28]
 8003604:	429a      	cmp	r2, r3
 8003606:	d107      	bne.n	8003618 <add_callbackRX+0x40>
	{
		// Give the Semaphore.
		xSemaphoreGiveFromISR( Receive_Mutex , &xHigherPriorityTaskWoken );
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <add_callbackRX+0x60>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f107 020c 	add.w	r2, r7, #12
 8003610:	4611      	mov	r1, r2
 8003612:	4618      	mov	r0, r3
 8003614:	f001 f975 	bl	8004902 <xQueueGiveFromISR>
	}

	//Return to the RTOS.
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <add_callbackRX+0x56>
 800361e:	4b07      	ldr	r3, [pc, #28]	; (800363c <add_callbackRX+0x64>)
 8003620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	f3bf 8f6f 	isb	sy
}
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	200050e8 	.word	0x200050e8
 800363c:	e000ed04 	.word	0xe000ed04

08003640 <vDumpTimerCallBack>:
// the Bump Timer Handling function.
void vDumpTimerCallBack(TimerHandle_t Bump_Dist_Timer)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
	// Resume the BumpHandling task each (1-S).
	vTaskResume(tBumpHandlingTask);
 8003648:	4b04      	ldr	r3, [pc, #16]	; (800365c <vDumpTimerCallBack+0x1c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f002 f895 	bl	800577c <vTaskResume>
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20005118 	.word	0x20005118

08003660 <vReceiveFromUartTask>:
/* Tasks Implementation : ---------------------------------------------------------------------------------------------*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// the Task that Receive From Uart : task 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vReceiveFromUartTask(void * pvParameters)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	u8 		*Received_Data_Pointer 	= 0;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
	u8		error_counter 			= 0;
 800366c:	2300      	movs	r3, #0
 800366e:	74fb      	strb	r3, [r7, #19]
	u32		local_waitTime			= pdMS_TO_TICKS(0);
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
	u8		_BUFFER_SIZE_ 			= 10;
 8003674:	230a      	movs	r3, #10
 8003676:	72fb      	strb	r3, [r7, #11]

	MCAL_UART_INTT_CALLBACK(&UART_2, RXNE_INT, add_callbackRX);
 8003678:	4a11      	ldr	r2, [pc, #68]	; (80036c0 <vReceiveFromUartTask+0x60>)
 800367a:	2105      	movs	r1, #5
 800367c:	4811      	ldr	r0, [pc, #68]	; (80036c4 <vReceiveFromUartTask+0x64>)
 800367e:	f7ff fa59 	bl	8002b34 <MCAL_UART_INTT_CALLBACK>

	while(1)
		{
			// 1- Take the Mutex to Start the task.
			xSemaphoreTake( Receive_Mutex , portMAX_DELAY );
 8003682:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <vReceiveFromUartTask+0x68>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f04f 31ff 	mov.w	r1, #4294967295
 800368a:	4618      	mov	r0, r3
 800368c:	f001 fac6 	bl	8004c1c <xQueueSemaphoreTake>

			// 2- Put the Received message into a Filter Queue.
			if( sizeof(Received_Data_Pointer) == _FRAME_SIZE_ )
			{
				xQueueSend( Uart_Message_Queue , Received_Data_Pointer , local_waitTime );
 8003690:	4b0e      	ldr	r3, [pc, #56]	; (80036cc <vReceiveFromUartTask+0x6c>)
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	2300      	movs	r3, #0
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	6979      	ldr	r1, [r7, #20]
 800369a:	f000 ff57 	bl	800454c <xQueueGenericSend>
				error_counter =0;
 800369e:	2300      	movs	r3, #0
 80036a0:	74fb      	strb	r3, [r7, #19]
			{
				error_counter++;
			}

			// 3- Restart the receive function.
			MCAL_UART_Receive_INT( &UART_2 , Received_Data_Pointer, _BUFFER_SIZE_ , _THE_STOP_CHAR_ );
 80036a2:	7afb      	ldrb	r3, [r7, #11]
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	2323      	movs	r3, #35	; 0x23
 80036a8:	6979      	ldr	r1, [r7, #20]
 80036aa:	4806      	ldr	r0, [pc, #24]	; (80036c4 <vReceiveFromUartTask+0x64>)
 80036ac:	f7ff f87a 	bl	80027a4 <MCAL_UART_Receive_INT>

			// 5- Give the Semaphore to stop the task.
			xSemaphoreGive( Receive_Mutex );
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <vReceiveFromUartTask+0x68>)
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	2300      	movs	r3, #0
 80036b6:	2200      	movs	r2, #0
 80036b8:	2100      	movs	r1, #0
 80036ba:	f000 ff47 	bl	800454c <xQueueGenericSend>
			xSemaphoreTake( Receive_Mutex , portMAX_DELAY );
 80036be:	e7e0      	b.n	8003682 <vReceiveFromUartTask+0x22>
 80036c0:	080035d9 	.word	0x080035d9
 80036c4:	20000000 	.word	0x20000000
 80036c8:	200050e8 	.word	0x200050e8
 80036cc:	200050ec 	.word	0x200050ec

080036d0 <vFilterTask>:
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// the Task that filter the Received data and send it to its next task : task 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vFilterTask(void* pvParameters)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	u8 	local_message_counter 	;
	u8 	*General_Array		= 0	;
 80036d8:	2300      	movs	r3, #0
 80036da:	613b      	str	r3, [r7, #16]
	u8 	Distance_Var		= 0 ;
 80036dc:	2300      	movs	r3, #0
 80036de:	73bb      	strb	r3, [r7, #14]
	u8  Frame_Size			= 0 ;
 80036e0:	2300      	movs	r3, #0
 80036e2:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		xQueueReceive( Uart_Message_Queue , General_Array , 0 );
 80036e4:	4b31      	ldr	r3, [pc, #196]	; (80037ac <vFilterTask+0xdc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2200      	movs	r2, #0
 80036ea:	6939      	ldr	r1, [r7, #16]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 f9b5 	bl	8004a5c <xQueueReceive>
		local_message_counter = 0 ;
 80036f2:	2300      	movs	r3, #0
 80036f4:	75fb      	strb	r3, [r7, #23]
		Frame_Size = sizeof(*General_Array);
 80036f6:	2301      	movs	r3, #1
 80036f8:	73fb      	strb	r3, [r7, #15]
		while( local_message_counter < Frame_Size)
 80036fa:	e052      	b.n	80037a2 <vFilterTask+0xd2>
		{
			if ( General_Array[local_message_counter] == 'D')
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4413      	add	r3, r2
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b44      	cmp	r3, #68	; 0x44
 8003706:	d111      	bne.n	800372c <vFilterTask+0x5c>
			{
				Distance_Var = General_Array[ local_message_counter + 1];
 8003708:	7dfb      	ldrb	r3, [r7, #23]
 800370a:	3301      	adds	r3, #1
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4413      	add	r3, r2
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	73bb      	strb	r3, [r7, #14]
				xQueueSend( qCalcObjectSpeedTask_Queue , &Distance_Var, 0 );
 8003714:	4b26      	ldr	r3, [pc, #152]	; (80037b0 <vFilterTask+0xe0>)
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	f107 010e 	add.w	r1, r7, #14
 800371c:	2300      	movs	r3, #0
 800371e:	2200      	movs	r2, #0
 8003720:	f000 ff14 	bl	800454c <xQueueGenericSend>

				local_message_counter += 2;
 8003724:	7dfb      	ldrb	r3, [r7, #23]
 8003726:	3302      	adds	r3, #2
 8003728:	75fb      	strb	r3, [r7, #23]
 800372a:	e03a      	b.n	80037a2 <vFilterTask+0xd2>
			}
			else if (General_Array[local_message_counter] == 'S')
 800372c:	7dfb      	ldrb	r3, [r7, #23]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4413      	add	r3, r2
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b53      	cmp	r3, #83	; 0x53
 8003736:	d126      	bne.n	8003786 <vFilterTask+0xb6>
			{
				if(General_Array[local_message_counter + 1]== 's') // received a speed limit signal from the [Master Node] as a Sign.
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	3301      	adds	r3, #1
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4413      	add	r3, r2
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b73      	cmp	r3, #115	; 0x73
 8003744:	d10f      	bne.n	8003766 <vFilterTask+0x96>
                {
					Car_Limit = General_Array[local_message_counter + 2];
 8003746:	7dfb      	ldrb	r3, [r7, #23]
 8003748:	3302      	adds	r3, #2
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4413      	add	r3, r2
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	ee07 3a90 	vmov	s15, r3
 8003754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003758:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <vFilterTask+0xe4>)
 800375a:	edc3 7a00 	vstr	s15, [r3]
					local_message_counter += 3;
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	3303      	adds	r3, #3
 8003762:	75fb      	strb	r3, [r7, #23]
 8003764:	e01d      	b.n	80037a2 <vFilterTask+0xd2>
				}
				else if(General_Array[local_message_counter + 1]== 'b') // received a bump signal from the [Master Node] as a Sign.
 8003766:	7dfb      	ldrb	r3, [r7, #23]
 8003768:	3301      	adds	r3, #1
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4413      	add	r3, r2
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b62      	cmp	r3, #98	; 0x62
 8003772:	d116      	bne.n	80037a2 <vFilterTask+0xd2>
				{
					// resume the Bump task.
					vTaskResume(tBumpHandlingTask);
 8003774:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <vFilterTask+0xe8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f001 ffff 	bl	800577c <vTaskResume>
					local_message_counter += 2	;
 800377e:	7dfb      	ldrb	r3, [r7, #23]
 8003780:	3302      	adds	r3, #2
 8003782:	75fb      	strb	r3, [r7, #23]
 8003784:	e00d      	b.n	80037a2 <vFilterTask+0xd2>
				}
			}
			else if (General_Array[local_message_counter] == 'B') // received a bump signal from the [interface Node].
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4413      	add	r3, r2
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b42      	cmp	r3, #66	; 0x42
 8003790:	d107      	bne.n	80037a2 <vFilterTask+0xd2>
			{
				// resume the Bump task.
				vTaskResume(tBumpHandlingTask);
 8003792:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <vFilterTask+0xe8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f001 fff0 	bl	800577c <vTaskResume>
				local_message_counter++	;
 800379c:	7dfb      	ldrb	r3, [r7, #23]
 800379e:	3301      	adds	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
		while( local_message_counter < Frame_Size)
 80037a2:	7dfa      	ldrb	r2, [r7, #23]
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d3a8      	bcc.n	80036fc <vFilterTask+0x2c>
		xQueueReceive( Uart_Message_Queue , General_Array , 0 );
 80037aa:	e79b      	b.n	80036e4 <vFilterTask+0x14>
 80037ac:	200050ec 	.word	0x200050ec
 80037b0:	200050f0 	.word	0x200050f0
 80037b4:	2000004c 	.word	0x2000004c
 80037b8:	20005118 	.word	0x20005118

080037bc <vCalcObjectSpeedTask>:
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// the Task that Calculate the Speed of the Object : task 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vCalcObjectSpeedTask(void * pvParameters)
{
 80037bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c0:	b0a2      	sub	sp, #136	; 0x88
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	66f8      	str	r0, [r7, #108]	; 0x6c
	// received data buffer.
	u8 dataBuffer;
	// Objects' Struct :
	OBJECT_STRUCT	Object_Struct = {0} ;
 80037c6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80037ca:	2300      	movs	r3, #0
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	6053      	str	r3, [r2, #4]
 80037d0:	6093      	str	r3, [r2, #8]
 80037d2:	60d3      	str	r3, [r2, #12]
	while(1)
	{
		// receive all date.
		xQueueReceive(qCalcObjectSpeedTask_Queue, &dataBuffer, portMAX_DELAY); // the enable Signal.
 80037d4:	4bd1      	ldr	r3, [pc, #836]	; (8003b1c <vCalcObjectSpeedTask+0x360>)
 80037d6:	6818      	ldr	r0, [r3, #0]
 80037d8:	f107 0387 	add.w	r3, r7, #135	; 0x87
 80037dc:	f04f 32ff 	mov.w	r2, #4294967295
 80037e0:	4619      	mov	r1, r3
 80037e2:	f001 f93b 	bl	8004a5c <xQueueReceive>

		// 1- store the first distance.
		Object_Struct.Object_Distances[Object_Struct.Pointer] = dataBuffer; // the number is a 'Char'.
 80037e6:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80037ea:	461a      	mov	r2, r3
 80037ec:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80037f0:	3220      	adds	r2, #32
 80037f2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80037f6:	440a      	add	r2, r1
 80037f8:	f802 3c18 	strb.w	r3, [r2, #-24]

		if (Object_Struct.Pointer == 0) {
 80037fc:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8003800:	2b00      	cmp	r3, #0
 8003802:	d152      	bne.n	80038aa <vCalcObjectSpeedTask+0xee>

			// 1- start the timer.
			Object_Struct.Object_Timer = pdTICKS_TO_MS(xTaskGetTickCount());
 8003804:	f002 f99c 	bl	8005b40 <xTaskGetTickCount>
 8003808:	4603      	mov	r3, r0
 800380a:	2200      	movs	r2, #0
 800380c:	62bb      	str	r3, [r7, #40]	; 0x28
 800380e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003810:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8003814:	4622      	mov	r2, r4
 8003816:	462b      	mov	r3, r5
 8003818:	f04f 0000 	mov.w	r0, #0
 800381c:	f04f 0100 	mov.w	r1, #0
 8003820:	0159      	lsls	r1, r3, #5
 8003822:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003826:	0150      	lsls	r0, r2, #5
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4621      	mov	r1, r4
 800382e:	ebb2 0801 	subs.w	r8, r2, r1
 8003832:	4629      	mov	r1, r5
 8003834:	eb63 0901 	sbc.w	r9, r3, r1
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8003844:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8003848:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800384c:	4690      	mov	r8, r2
 800384e:	4699      	mov	r9, r3
 8003850:	4623      	mov	r3, r4
 8003852:	eb18 0303 	adds.w	r3, r8, r3
 8003856:	643b      	str	r3, [r7, #64]	; 0x40
 8003858:	462b      	mov	r3, r5
 800385a:	eb49 0303 	adc.w	r3, r9, r3
 800385e:	647b      	str	r3, [r7, #68]	; 0x44
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800386c:	4629      	mov	r1, r5
 800386e:	00cb      	lsls	r3, r1, #3
 8003870:	4621      	mov	r1, r4
 8003872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003876:	4621      	mov	r1, r4
 8003878:	00ca      	lsls	r2, r1, #3
 800387a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800387e:	4610      	mov	r0, r2
 8003880:	4619      	mov	r1, r3
 8003882:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	f7fd f9a5 	bl	8000bd8 <__aeabi_uldivmod>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

			// 2- make the pointer to the second distance.
			Object_Struct.Pointer++ ;
 8003896:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800389a:	3301      	adds	r3, #1
 800389c:	b2db      	uxtb	r3, r3
 800389e:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72

			// 3 clear the second distance.
			Object_Struct.Object_Distances[1] = 0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 80038a8:	e794      	b.n	80037d4 <vCalcObjectSpeedTask+0x18>
		}
		else {
			// 1- get the time, then stop the timer.
			if (Object_Struct.Object_Timer > pdTICKS_TO_MS(xTaskGetTickCount()) )
 80038aa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80038ae:	f002 f947 	bl	8005b40 <xTaskGetTickCount>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2200      	movs	r2, #0
 80038b6:	663b      	str	r3, [r7, #96]	; 0x60
 80038b8:	667a      	str	r2, [r7, #100]	; 0x64
 80038ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80038be:	f04f 0000 	mov.w	r0, #0
 80038c2:	f04f 0100 	mov.w	r1, #0
 80038c6:	0159      	lsls	r1, r3, #5
 80038c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038cc:	0150      	lsls	r0, r2, #5
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80038d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80038d8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80038da:	eb63 0b01 	sbc.w	fp, r3, r1
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80038ea:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 80038ee:	ea4f 028a 	mov.w	r2, sl, lsl #2
 80038f2:	4692      	mov	sl, r2
 80038f4:	469b      	mov	fp, r3
 80038f6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80038fa:	460b      	mov	r3, r1
 80038fc:	eb1a 0303 	adds.w	r3, sl, r3
 8003900:	65bb      	str	r3, [r7, #88]	; 0x58
 8003902:	4613      	mov	r3, r2
 8003904:	eb4b 0303 	adc.w	r3, fp, r3
 8003908:	65fb      	str	r3, [r7, #92]	; 0x5c
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003914:	00cb      	lsls	r3, r1, #3
 8003916:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003918:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800391c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800391e:	00ca      	lsls	r2, r1, #3
 8003920:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8003924:	4610      	mov	r0, r2
 8003926:	4619      	mov	r1, r3
 8003928:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	f7fd f952 	bl	8000bd8 <__aeabi_uldivmod>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	42a2      	cmp	r2, r4
 800393a:	41ab      	sbcs	r3, r5
 800393c:	d261      	bcs.n	8003a02 <vCalcObjectSpeedTask+0x246>
			{
			// we get the time in seconds here.
			Object_Struct.Object_Timer = (pdTICKS_TO_MS( (xTaskGetTickCount()+portMAX_DELAY) )-(Object_Struct.Object_Timer))/(1000);
 800393e:	f002 f8ff 	bl	8005b40 <xTaskGetTickCount>
 8003942:	4603      	mov	r3, r0
 8003944:	3b01      	subs	r3, #1
 8003946:	2200      	movs	r2, #0
 8003948:	623b      	str	r3, [r7, #32]
 800394a:	627a      	str	r2, [r7, #36]	; 0x24
 800394c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003950:	4622      	mov	r2, r4
 8003952:	462b      	mov	r3, r5
 8003954:	f04f 0000 	mov.w	r0, #0
 8003958:	f04f 0100 	mov.w	r1, #0
 800395c:	0159      	lsls	r1, r3, #5
 800395e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003962:	0150      	lsls	r0, r2, #5
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4621      	mov	r1, r4
 800396a:	1a51      	subs	r1, r2, r1
 800396c:	6539      	str	r1, [r7, #80]	; 0x50
 800396e:	4629      	mov	r1, r5
 8003970:	eb63 0301 	sbc.w	r3, r3, r1
 8003974:	657b      	str	r3, [r7, #84]	; 0x54
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003980:	008b      	lsls	r3, r1, #2
 8003982:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003984:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003988:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800398a:	008a      	lsls	r2, r1, #2
 800398c:	4610      	mov	r0, r2
 800398e:	4619      	mov	r1, r3
 8003990:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 8003994:	4603      	mov	r3, r0
 8003996:	4622      	mov	r2, r4
 8003998:	189b      	adds	r3, r3, r2
 800399a:	63bb      	str	r3, [r7, #56]	; 0x38
 800399c:	460b      	mov	r3, r1
 800399e:	462a      	mov	r2, r5
 80039a0:	4153      	adcs	r3, r2
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80039b0:	4629      	mov	r1, r5
 80039b2:	00cb      	lsls	r3, r1, #3
 80039b4:	4621      	mov	r1, r4
 80039b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ba:	4621      	mov	r1, r4
 80039bc:	00ca      	lsls	r2, r1, #3
 80039be:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80039c2:	4610      	mov	r0, r2
 80039c4:	4619      	mov	r1, r3
 80039c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	f7fd f903 	bl	8000bd8 <__aeabi_uldivmod>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4610      	mov	r0, r2
 80039d8:	4619      	mov	r1, r3
 80039da:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80039de:	1a84      	subs	r4, r0, r2
 80039e0:	61bc      	str	r4, [r7, #24]
 80039e2:	eb61 0303 	sbc.w	r3, r1, r3
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80039f4:	f7fd f8f0 	bl	8000bd8 <__aeabi_uldivmod>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8003a00:	e05f      	b.n	8003ac2 <vCalcObjectSpeedTask+0x306>
			}
			else
			{
				Object_Struct.Object_Timer = (pdTICKS_TO_MS(xTaskGetTickCount())-(Object_Struct.Object_Timer))/(1000);
 8003a02:	f002 f89d 	bl	8005b40 <xTaskGetTickCount>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2200      	movs	r2, #0
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	617a      	str	r2, [r7, #20]
 8003a0e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003a12:	4622      	mov	r2, r4
 8003a14:	462b      	mov	r3, r5
 8003a16:	f04f 0000 	mov.w	r0, #0
 8003a1a:	f04f 0100 	mov.w	r1, #0
 8003a1e:	0159      	lsls	r1, r3, #5
 8003a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a24:	0150      	lsls	r0, r2, #5
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	1a51      	subs	r1, r2, r1
 8003a2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a30:	4629      	mov	r1, r5
 8003a32:	eb63 0301 	sbc.w	r3, r3, r1
 8003a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003a42:	008b      	lsls	r3, r1, #2
 8003a44:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003a46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a4a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003a4c:	008a      	lsls	r2, r1, #2
 8003a4e:	4610      	mov	r0, r2
 8003a50:	4619      	mov	r1, r3
 8003a52:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8003a56:	4603      	mov	r3, r0
 8003a58:	4622      	mov	r2, r4
 8003a5a:	189b      	adds	r3, r3, r2
 8003a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a5e:	460b      	mov	r3, r1
 8003a60:	462a      	mov	r2, r5
 8003a62:	4153      	adcs	r3, r2
 8003a64:	637b      	str	r3, [r7, #52]	; 0x34
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a72:	4629      	mov	r1, r5
 8003a74:	00cb      	lsls	r3, r1, #3
 8003a76:	4621      	mov	r1, r4
 8003a78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	00ca      	lsls	r2, r1, #3
 8003a80:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8003a84:	4610      	mov	r0, r2
 8003a86:	4619      	mov	r1, r3
 8003a88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	f7fd f8a2 	bl	8000bd8 <__aeabi_uldivmod>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003aa0:	1a84      	subs	r4, r0, r2
 8003aa2:	60bc      	str	r4, [r7, #8]
 8003aa4:	eb61 0303 	sbc.w	r3, r1, r3
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ab6:	f7fd f88f 	bl	8000bd8 <__aeabi_uldivmod>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
			}

			// 2- calculate the speed :
			Object_Struct.Object_Speed = (((Object_Struct.Object_Distances[1]-Object_Struct.Object_Distances[0])/(Object_Struct.Object_Timer)) + (*Car_Speed));
 8003ac2:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	17da      	asrs	r2, r3, #31
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003ad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003adc:	f7fd f87c 	bl	8000bd8 <__aeabi_uldivmod>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f7fd f830 	bl	8000b4c <__aeabi_ul2f>
 8003aec:	ee07 0a10 	vmov	s14, r0
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <vCalcObjectSpeedTask+0x364>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	edd3 7a00 	vldr	s15, [r3]
 8003af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003afc:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

			// 3- Send the Speed of the Object to the next task :
			xQueueSend(Object_Queue , &Object_Struct.Object_Speed ,0);
 8003b00:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <vCalcObjectSpeedTask+0x368>)
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003b08:	1d19      	adds	r1, r3, #4
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f000 fd1d 	bl	800454c <xQueueGenericSend>

			// 4- return the pointer to 1 again.
			Object_Struct.Pointer = 0 ;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		xQueueReceive(qCalcObjectSpeedTask_Queue, &dataBuffer, portMAX_DELAY); // the enable Signal.
 8003b18:	e65c      	b.n	80037d4 <vCalcObjectSpeedTask+0x18>
 8003b1a:	bf00      	nop
 8003b1c:	200050f0 	.word	0x200050f0
 8003b20:	200050e4 	.word	0x200050e4
 8003b24:	200050f4 	.word	0x200050f4

08003b28 <vCalcCarNewSpeedTask>:
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// the Task that Detect the Car new Speed : task 4 , it should take the highest periority amoung the action tasks.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vCalcCarNewSpeedTask(void * pvParameters)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
	QueueHandle_t 	DataSource_Queue	= NULL ;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60fb      	str	r3, [r7, #12]
	f32 *ReceivedSpeed = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60bb      	str	r3, [r7, #8]
	*Car_Speed = 0;
 8003b38:	4b34      	ldr	r3, [pc, #208]	; (8003c0c <vCalcCarNewSpeedTask+0xe4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
	while(1)
	{
		// Receive the Data from the set.
		DataSource_Queue = xQueueSelectFromSet(CarNewSpeed_QueueSet, portMAX_DELAY);
 8003b42:	4b33      	ldr	r3, [pc, #204]	; (8003c10 <vCalcCarNewSpeedTask+0xe8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f04f 31ff 	mov.w	r1, #4294967295
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 fb5a 	bl	8005204 <xQueueSelectFromSet>
 8003b50:	60f8      	str	r0, [r7, #12]
		xQueueReceive(DataSource_Queue , ReceivedSpeed , portMAX_DELAY );
 8003b52:	f04f 32ff 	mov.w	r2, #4294967295
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 ff7f 	bl	8004a5c <xQueueReceive>
		// Compare with the care speed
		if ( *Car_Speed < *ReceivedSpeed) {
 8003b5e:	4b2b      	ldr	r3, [pc, #172]	; (8003c0c <vCalcCarNewSpeedTask+0xe4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	ed93 7a00 	vldr	s14, [r3]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	edd3 7a00 	vldr	s15, [r3]
 8003b6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b74:	d526      	bpl.n	8003bc4 <vCalcCarNewSpeedTask+0x9c>
			if (Car_Limit < *ReceivedSpeed) {
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	ed93 7a00 	vldr	s14, [r3]
 8003b7c:	4b25      	ldr	r3, [pc, #148]	; (8003c14 <vCalcCarNewSpeedTask+0xec>)
 8003b7e:	edd3 7a00 	vldr	s15, [r3]
 8003b82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b8a:	dd0d      	ble.n	8003ba8 <vCalcCarNewSpeedTask+0x80>
				// the car speed reaches its Limit.
				*Car_Speed = Car_Limit ;
 8003b8c:	4b1f      	ldr	r3, [pc, #124]	; (8003c0c <vCalcCarNewSpeedTask+0xe4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a20      	ldr	r2, [pc, #128]	; (8003c14 <vCalcCarNewSpeedTask+0xec>)
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	601a      	str	r2, [r3, #0]
				// send the new speed to the control task.
				xQueueSend(Uart_Transmit_Queue, Car_Speed,0);
 8003b96:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <vCalcCarNewSpeedTask+0xf0>)
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	4b1c      	ldr	r3, [pc, #112]	; (8003c0c <vCalcCarNewSpeedTask+0xe4>)
 8003b9c:	6819      	ldr	r1, [r3, #0]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f000 fcd3 	bl	800454c <xQueueGenericSend>
 8003ba6:	e7cc      	b.n	8003b42 <vCalcCarNewSpeedTask+0x1a>
			} else {
				// the car speed becomes the same front car speed.
				*Car_Speed = *ReceivedSpeed ;
 8003ba8:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <vCalcCarNewSpeedTask+0xe4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	601a      	str	r2, [r3, #0]
				// send the new speed to the control task.
				xQueueSend(Uart_Transmit_Queue, Car_Speed,0);
 8003bb2:	4b19      	ldr	r3, [pc, #100]	; (8003c18 <vCalcCarNewSpeedTask+0xf0>)
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <vCalcCarNewSpeedTask+0xe4>)
 8003bb8:	6819      	ldr	r1, [r3, #0]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f000 fcc5 	bl	800454c <xQueueGenericSend>
 8003bc2:	e7be      	b.n	8003b42 <vCalcCarNewSpeedTask+0x1a>
			}
		} else if (*Car_Speed > *ReceivedSpeed) {
 8003bc4:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <vCalcCarNewSpeedTask+0xe4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	ed93 7a00 	vldr	s14, [r3]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	edd3 7a00 	vldr	s15, [r3]
 8003bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bda:	dd0d      	ble.n	8003bf8 <vCalcCarNewSpeedTask+0xd0>
			// the car speed becomes the same front car speed.
			*Car_Speed = *ReceivedSpeed ;
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <vCalcCarNewSpeedTask+0xe4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	6812      	ldr	r2, [r2, #0]
 8003be4:	601a      	str	r2, [r3, #0]
			// send the new speed to the control task.
			xQueueSend(Uart_Transmit_Queue, Car_Speed,0);
 8003be6:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <vCalcCarNewSpeedTask+0xf0>)
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <vCalcCarNewSpeedTask+0xe4>)
 8003bec:	6819      	ldr	r1, [r3, #0]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f000 fcab 	bl	800454c <xQueueGenericSend>
 8003bf6:	e7a4      	b.n	8003b42 <vCalcCarNewSpeedTask+0x1a>
		} else {
			// the car speed does not change.
			// send current speed to the control task.
			xQueueSend(Uart_Transmit_Queue, Car_Speed,0);
 8003bf8:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <vCalcCarNewSpeedTask+0xf0>)
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <vCalcCarNewSpeedTask+0xe4>)
 8003bfe:	6819      	ldr	r1, [r3, #0]
 8003c00:	2300      	movs	r3, #0
 8003c02:	2200      	movs	r2, #0
 8003c04:	f000 fca2 	bl	800454c <xQueueGenericSend>
		DataSource_Queue = xQueueSelectFromSet(CarNewSpeed_QueueSet, portMAX_DELAY);
 8003c08:	e79b      	b.n	8003b42 <vCalcCarNewSpeedTask+0x1a>
 8003c0a:	bf00      	nop
 8003c0c:	200050e4 	.word	0x200050e4
 8003c10:	20005100 	.word	0x20005100
 8003c14:	2000004c 	.word	0x2000004c
 8003c18:	200050fc 	.word	0x200050fc

08003c1c <vBumpHandlingTask>:
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// the Task that Handle the Bump crossing Sitiuation : task 6 , it should take the highest periority when it starts.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vBumpHandlingTask(void* pvParameters)
{
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b08b      	sub	sp, #44	; 0x2c
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	6078      	str	r0, [r7, #4]
	// the distance between the car and the bump.
	f32  	speed_difference		= 0	;
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
	f32		reduction_value			= 0 ;
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]
	f32		new_speed				= 0 ;
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	60bb      	str	r3, [r7, #8]
	u8		distance_sections		= 0 ;
 8003c36:	2300      	movs	r3, #0
 8003c38:	76fb      	strb	r3, [r7, #27]
	u8		section_space			= 0	;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	76bb      	strb	r3, [r7, #26]
	f32		crossed_dist			= 0	;
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
	// local counter to detect the number of seconds.
	u16 	second_local_counter	= 0 ;
 8003c44:	2300      	movs	r3, #0
 8003c46:	827b      	strh	r3, [r7, #18]
	// create the Timer
	Bump_Dist_Timer	 			= xTimerCreate("Bump Timer", _1S_, pdTRUE, NULL, &vDumpTimerCallBack );
 8003c48:	4b61      	ldr	r3, [pc, #388]	; (8003dd0 <vBumpHandlingTask+0x1b4>)
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c54:	485f      	ldr	r0, [pc, #380]	; (8003dd4 <vBumpHandlingTask+0x1b8>)
 8003c56:	f002 fe4d 	bl	80068f4 <xTimerCreate>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4a5e      	ldr	r2, [pc, #376]	; (8003dd8 <vBumpHandlingTask+0x1bc>)
 8003c5e:	6013      	str	r3, [r2, #0]

	// at the beginning we suspend this task until we receive a notification of a bump.
	vTaskSuspend(tBumpHandlingTask);
 8003c60:	4b5e      	ldr	r3, [pc, #376]	; (8003ddc <vBumpHandlingTask+0x1c0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f001 fcb7 	bl	80055d8 <vTaskSuspend>

		while(1)
		{
			if (second_local_counter == 0)
 8003c6a:	8a7b      	ldrh	r3, [r7, #18]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d155      	bne.n	8003d1c <vBumpHandlingTask+0x100>
			{
				// calculate the differecnce between the current speed and the bump crossing speed.
				speed_difference = (*Car_Speed) - _BUMP_CROSS_SPEED_ ;
 8003c70:	4b5b      	ldr	r3, [pc, #364]	; (8003de0 <vBumpHandlingTask+0x1c4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	edd3 7a00 	vldr	s15, [r3]
 8003c78:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003c7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c80:	edc7 7a03 	vstr	s15, [r7, #12]
				 * But the reduction of the speed stop at (_BUMP_DEFAULT_DIST_ - 8*( _BUMP_DEFAULT_DIST_ / 10).
				 * if the division of the difference to ( 10 ) < (_BUMP_CROSS_SPEED_ Km/H) ,
				 * then the speed should decreases by ( Car speed / 6 ) for each (_BUMP_DEFAULT_DIST_ / 6).
				 * But the reduction of the speed stop at (_BUMP_DEFAULT_DIST_ - 4*( _BUMP_DEFAULT_DIST_ / 6).
				 */
				if (speed_difference >= _BUMP_CROSS_SPEED_) {
 8003c84:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c88:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c94:	db0e      	blt.n	8003cb4 <vBumpHandlingTask+0x98>
					distance_sections 	= 10 ;
 8003c96:	230a      	movs	r3, #10
 8003c98:	76fb      	strb	r3, [r7, #27]
					reduction_value   	= (*Car_Speed) / 10 ;
 8003c9a:	4b51      	ldr	r3, [pc, #324]	; (8003de0 <vBumpHandlingTask+0x1c4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	ed93 7a00 	vldr	s14, [r3]
 8003ca2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003ca6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003caa:	edc7 7a07 	vstr	s15, [r7, #28]
					section_space		=	_BUMP_DEFAULT_DIST_ / 10 ;
 8003cae:	230a      	movs	r3, #10
 8003cb0:	76bb      	strb	r3, [r7, #26]
 8003cb2:	e00d      	b.n	8003cd0 <vBumpHandlingTask+0xb4>
				}else {
					distance_sections 	=	 6 ;
 8003cb4:	2306      	movs	r3, #6
 8003cb6:	76fb      	strb	r3, [r7, #27]
					reduction_value   	=	(*Car_Speed) / 6 ;
 8003cb8:	4b49      	ldr	r3, [pc, #292]	; (8003de0 <vBumpHandlingTask+0x1c4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	ed93 7a00 	vldr	s14, [r3]
 8003cc0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8003cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cc8:	edc7 7a07 	vstr	s15, [r7, #28]
					section_space		=	_BUMP_DEFAULT_DIST_ / 6 ;
 8003ccc:	2310      	movs	r3, #16
 8003cce:	76bb      	strb	r3, [r7, #26]
				}

				//calculate the new speed
				new_speed =  (*Car_Speed) - (reduction_value);
 8003cd0:	4b43      	ldr	r3, [pc, #268]	; (8003de0 <vBumpHandlingTask+0x1c4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	ed93 7a00 	vldr	s14, [r3]
 8003cd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ce0:	edc7 7a02 	vstr	s15, [r7, #8]
				// decrease the distance sections by (1);
				distance_sections --;
 8003ce4:	7efb      	ldrb	r3, [r7, #27]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	76fb      	strb	r3, [r7, #27]
				// increase the second_local_counter by (1)
				second_local_counter ++;
 8003cea:	8a7b      	ldrh	r3, [r7, #18]
 8003cec:	3301      	adds	r3, #1
 8003cee:	827b      	strh	r3, [r7, #18]

				// send the new speed
				xQueueSend(Uart_Transmit_Queue, &new_speed,0);
 8003cf0:	4b3c      	ldr	r3, [pc, #240]	; (8003de4 <vBumpHandlingTask+0x1c8>)
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	f107 0108 	add.w	r1, r7, #8
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f000 fc26 	bl	800454c <xQueueGenericSend>

				// start the timer
				xTimerStart(Bump_Dist_Timer,_1S_);
 8003d00:	4b35      	ldr	r3, [pc, #212]	; (8003dd8 <vBumpHandlingTask+0x1bc>)
 8003d02:	681c      	ldr	r4, [r3, #0]
 8003d04:	f001 ff1c 	bl	8005b40 <xTaskGetTickCount>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	2300      	movs	r3, #0
 8003d12:	2101      	movs	r1, #1
 8003d14:	4620      	mov	r0, r4
 8003d16:	f002 fe47 	bl	80069a8 <xTimerGenericCommand>
 8003d1a:	e053      	b.n	8003dc4 <vBumpHandlingTask+0x1a8>

			}
			else
			{
				// calculate the crossed distance = Car_speed in (KM/H) / time in (s).
				crossed_dist += (*Car_Speed)/(3600);
 8003d1c:	4b30      	ldr	r3, [pc, #192]	; (8003de0 <vBumpHandlingTask+0x1c4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	ed93 7a00 	vldr	s14, [r3]
 8003d24:	eddf 6a30 	vldr	s13, [pc, #192]	; 8003de8 <vBumpHandlingTask+0x1cc>
 8003d28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d2c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d34:	edc7 7a05 	vstr	s15, [r7, #20]
				if (crossed_dist >= section_space)
 8003d38:	7ebb      	ldrb	r3, [r7, #26]
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d42:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4e:	db36      	blt.n	8003dbe <vBumpHandlingTask+0x1a2>
				{
					// reset the crossed_dist value.
					crossed_dist = 0;
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]

					// decrease the distance sections by (1);
					distance_sections --;
 8003d56:	7efb      	ldrb	r3, [r7, #27]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	76fb      	strb	r3, [r7, #27]
					if (distance_sections > 2)
 8003d5c:	7efb      	ldrb	r3, [r7, #27]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d912      	bls.n	8003d88 <vBumpHandlingTask+0x16c>
					{
						//calculate the new speed
						new_speed =  (*Car_Speed) - (reduction_value);
 8003d62:	4b1f      	ldr	r3, [pc, #124]	; (8003de0 <vBumpHandlingTask+0x1c4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	ed93 7a00 	vldr	s14, [r3]
 8003d6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d72:	edc7 7a02 	vstr	s15, [r7, #8]

						// send the new speed
						xQueueSend(Uart_Transmit_Queue, &new_speed,0);
 8003d76:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <vBumpHandlingTask+0x1c8>)
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	f107 0108 	add.w	r1, r7, #8
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2200      	movs	r2, #0
 8003d82:	f000 fbe3 	bl	800454c <xQueueGenericSend>
 8003d86:	e01a      	b.n	8003dbe <vBumpHandlingTask+0x1a2>
					}
					else
					{
						//the new speed will equal the "_BUMP_CROSS_SPEED_" , as it is not much higher.
						new_speed =  _BUMP_CROSS_SPEED_;
 8003d88:	4b18      	ldr	r3, [pc, #96]	; (8003dec <vBumpHandlingTask+0x1d0>)
 8003d8a:	60bb      	str	r3, [r7, #8]

						// send the new speed
						xQueueSend(Uart_Transmit_Queue, &new_speed,0);
 8003d8c:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <vBumpHandlingTask+0x1c8>)
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	f107 0108 	add.w	r1, r7, #8
 8003d94:	2300      	movs	r3, #0
 8003d96:	2200      	movs	r2, #0
 8003d98:	f000 fbd8 	bl	800454c <xQueueGenericSend>
						// end the bump case.
						if (distance_sections == 0) {
 8003d9c:	7efb      	ldrb	r3, [r7, #27]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10d      	bne.n	8003dbe <vBumpHandlingTask+0x1a2>
							xTimerStop(Bump_Dist_Timer,0);
 8003da2:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <vBumpHandlingTask+0x1bc>)
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	2300      	movs	r3, #0
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	2300      	movs	r3, #0
 8003dac:	2200      	movs	r2, #0
 8003dae:	2103      	movs	r1, #3
 8003db0:	f002 fdfa 	bl	80069a8 <xTimerGenericCommand>
							second_local_counter = 0 ;
 8003db4:	2300      	movs	r3, #0
 8003db6:	827b      	strh	r3, [r7, #18]
							crossed_dist = 0;
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
						}
					}
				}
				// increase the second_local_counter by (1)
				second_local_counter ++;
 8003dbe:	8a7b      	ldrh	r3, [r7, #18]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	827b      	strh	r3, [r7, #18]
			}
			// suspend the task again.
			vTaskSuspend(tBumpHandlingTask);
 8003dc4:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <vBumpHandlingTask+0x1c0>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 fc05 	bl	80055d8 <vTaskSuspend>
			if (second_local_counter == 0)
 8003dce:	e74c      	b.n	8003c6a <vBumpHandlingTask+0x4e>
 8003dd0:	08003641 	.word	0x08003641
 8003dd4:	0800711c 	.word	0x0800711c
 8003dd8:	20005104 	.word	0x20005104
 8003ddc:	20005118 	.word	0x20005118
 8003de0:	200050e4 	.word	0x200050e4
 8003de4:	200050fc 	.word	0x200050fc
 8003de8:	45610000 	.word	0x45610000
 8003dec:	40a00000 	.word	0x40a00000

08003df0 <vTransmitToUartTask>:
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// the Task that transmit the new speed though the Uart: task 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vTransmitToUartTask(void * pvParameters)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	6078      	str	r0, [r7, #4]
	f32 received_Speed = 0;
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	60bb      	str	r3, [r7, #8]
	f32 Old_Speed = *Car_Speed;
 8003dfe:	4b14      	ldr	r3, [pc, #80]	; (8003e50 <vTransmitToUartTask+0x60>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		// receive the speed from the Queue.
		xQueueReceive(Uart_Transmit_Queue, &received_Speed , portMAX_DELAY);
 8003e06:	4b13      	ldr	r3, [pc, #76]	; (8003e54 <vTransmitToUartTask+0x64>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f107 0108 	add.w	r1, r7, #8
 8003e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fe22 	bl	8004a5c <xQueueReceive>
		if (received_Speed != Old_Speed)
 8003e18:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e20:	eeb4 7a67 	vcmp.f32	s14, s15
 8003e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e28:	d0ed      	beq.n	8003e06 <vTransmitToUartTask+0x16>
		{
			// store the new speed as the car speed.
			*Car_Speed = received_Speed;
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <vTransmitToUartTask+0x60>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	601a      	str	r2, [r3, #0]
			Old_Speed = *Car_Speed;
 8003e32:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <vTransmitToUartTask+0x60>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60fb      	str	r3, [r7, #12]
			// send the new speed.
			MCAL_UART_Transmit(&UART_2, (u8 *)Car_Speed, 1, 1000 , 255);
 8003e3a:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <vTransmitToUartTask+0x60>)
 8003e3c:	6819      	ldr	r1, [r3, #0]
 8003e3e:	23ff      	movs	r3, #255	; 0xff
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e46:	2201      	movs	r2, #1
 8003e48:	4803      	ldr	r0, [pc, #12]	; (8003e58 <vTransmitToUartTask+0x68>)
 8003e4a:	f7fe fae3 	bl	8002414 <MCAL_UART_Transmit>
		xQueueReceive(Uart_Transmit_Queue, &received_Speed , portMAX_DELAY);
 8003e4e:	e7da      	b.n	8003e06 <vTransmitToUartTask+0x16>
 8003e50:	200050e4 	.word	0x200050e4
 8003e54:	200050fc 	.word	0x200050fc
 8003e58:	20000000 	.word	0x20000000

08003e5c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	3b04      	subs	r3, #4
 8003e6c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e74:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3b04      	subs	r3, #4
 8003e7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f023 0201 	bic.w	r2, r3, #1
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3b04      	subs	r3, #4
 8003e8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003e8c:	4a0c      	ldr	r2, [pc, #48]	; (8003ec0 <pxPortInitialiseStack+0x64>)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3b14      	subs	r3, #20
 8003e96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3b04      	subs	r3, #4
 8003ea2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f06f 0202 	mvn.w	r2, #2
 8003eaa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	3b20      	subs	r3, #32
 8003eb0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	08003ec5 	.word	0x08003ec5

08003ec4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003ece:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <prvTaskExitError+0x54>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed6:	d00a      	beq.n	8003eee <prvTaskExitError+0x2a>
        __asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	60fb      	str	r3, [r7, #12]
    }
 8003eea:	bf00      	nop
 8003eec:	e7fe      	b.n	8003eec <prvTaskExitError+0x28>
        __asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	60bb      	str	r3, [r7, #8]
    }
 8003f00:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003f02:	bf00      	nop
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0fc      	beq.n	8003f04 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003f0a:	bf00      	nop
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	20000050 	.word	0x20000050
 8003f1c:	00000000 	.word	0x00000000

08003f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <pxCurrentTCBConst2>)
 8003f22:	6819      	ldr	r1, [r3, #0]
 8003f24:	6808      	ldr	r0, [r1, #0]
 8003f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f2a:	f380 8809 	msr	PSP, r0
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f04f 0000 	mov.w	r0, #0
 8003f36:	f380 8811 	msr	BASEPRI, r0
 8003f3a:	4770      	bx	lr
 8003f3c:	f3af 8000 	nop.w

08003f40 <pxCurrentTCBConst2>:
 8003f40:	20005168 	.word	0x20005168
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop

08003f48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003f48:	4808      	ldr	r0, [pc, #32]	; (8003f6c <prvPortStartFirstTask+0x24>)
 8003f4a:	6800      	ldr	r0, [r0, #0]
 8003f4c:	6800      	ldr	r0, [r0, #0]
 8003f4e:	f380 8808 	msr	MSP, r0
 8003f52:	f04f 0000 	mov.w	r0, #0
 8003f56:	f380 8814 	msr	CONTROL, r0
 8003f5a:	b662      	cpsie	i
 8003f5c:	b661      	cpsie	f
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	df00      	svc	0
 8003f68:	bf00      	nop
 8003f6a:	0000      	.short	0x0000
 8003f6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop

08003f74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f7a:	4b46      	ldr	r3, [pc, #280]	; (8004094 <xPortStartScheduler+0x120>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a46      	ldr	r2, [pc, #280]	; (8004098 <xPortStartScheduler+0x124>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d10a      	bne.n	8003f9a <xPortStartScheduler+0x26>
        __asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	613b      	str	r3, [r7, #16]
    }
 8003f96:	bf00      	nop
 8003f98:	e7fe      	b.n	8003f98 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f9a:	4b3e      	ldr	r3, [pc, #248]	; (8004094 <xPortStartScheduler+0x120>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a3f      	ldr	r2, [pc, #252]	; (800409c <xPortStartScheduler+0x128>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d10a      	bne.n	8003fba <xPortStartScheduler+0x46>
        __asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	60fb      	str	r3, [r7, #12]
    }
 8003fb6:	bf00      	nop
 8003fb8:	e7fe      	b.n	8003fb8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fba:	4b39      	ldr	r3, [pc, #228]	; (80040a0 <xPortStartScheduler+0x12c>)
 8003fbc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	22ff      	movs	r2, #255	; 0xff
 8003fca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	4b31      	ldr	r3, [pc, #196]	; (80040a4 <xPortStartScheduler+0x130>)
 8003fe0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fe2:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <xPortStartScheduler+0x134>)
 8003fe4:	2207      	movs	r2, #7
 8003fe6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fe8:	e009      	b.n	8003ffe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003fea:	4b2f      	ldr	r3, [pc, #188]	; (80040a8 <xPortStartScheduler+0x134>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	4a2d      	ldr	r2, [pc, #180]	; (80040a8 <xPortStartScheduler+0x134>)
 8003ff2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ffe:	78fb      	ldrb	r3, [r7, #3]
 8004000:	b2db      	uxtb	r3, r3
 8004002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004006:	2b80      	cmp	r3, #128	; 0x80
 8004008:	d0ef      	beq.n	8003fea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800400a:	4b27      	ldr	r3, [pc, #156]	; (80040a8 <xPortStartScheduler+0x134>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f1c3 0307 	rsb	r3, r3, #7
 8004012:	2b04      	cmp	r3, #4
 8004014:	d00a      	beq.n	800402c <xPortStartScheduler+0xb8>
        __asm volatile
 8004016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401a:	f383 8811 	msr	BASEPRI, r3
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	60bb      	str	r3, [r7, #8]
    }
 8004028:	bf00      	nop
 800402a:	e7fe      	b.n	800402a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800402c:	4b1e      	ldr	r3, [pc, #120]	; (80040a8 <xPortStartScheduler+0x134>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	4a1d      	ldr	r2, [pc, #116]	; (80040a8 <xPortStartScheduler+0x134>)
 8004034:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004036:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <xPortStartScheduler+0x134>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800403e:	4a1a      	ldr	r2, [pc, #104]	; (80040a8 <xPortStartScheduler+0x134>)
 8004040:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	b2da      	uxtb	r2, r3
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800404a:	4b18      	ldr	r3, [pc, #96]	; (80040ac <xPortStartScheduler+0x138>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a17      	ldr	r2, [pc, #92]	; (80040ac <xPortStartScheduler+0x138>)
 8004050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004054:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <xPortStartScheduler+0x138>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a14      	ldr	r2, [pc, #80]	; (80040ac <xPortStartScheduler+0x138>)
 800405c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004060:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004062:	f000 f8db 	bl	800421c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004066:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <xPortStartScheduler+0x13c>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800406c:	f000 f8f0 	bl	8004250 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004070:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <xPortStartScheduler+0x140>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a0f      	ldr	r2, [pc, #60]	; (80040b4 <xPortStartScheduler+0x140>)
 8004076:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800407a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800407c:	f7ff ff64 	bl	8003f48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004080:	f001 fe84 	bl	8005d8c <vTaskSwitchContext>
    prvTaskExitError();
 8004084:	f7ff ff1e 	bl	8003ec4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	e000ed00 	.word	0xe000ed00
 8004098:	410fc271 	.word	0x410fc271
 800409c:	410fc270 	.word	0x410fc270
 80040a0:	e000e400 	.word	0xe000e400
 80040a4:	20005120 	.word	0x20005120
 80040a8:	20005124 	.word	0x20005124
 80040ac:	e000ed20 	.word	0xe000ed20
 80040b0:	20000050 	.word	0x20000050
 80040b4:	e000ef34 	.word	0xe000ef34

080040b8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
        __asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	607b      	str	r3, [r7, #4]
    }
 80040d0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80040d2:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <vPortEnterCritical+0x58>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3301      	adds	r3, #1
 80040d8:	4a0d      	ldr	r2, [pc, #52]	; (8004110 <vPortEnterCritical+0x58>)
 80040da:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80040dc:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <vPortEnterCritical+0x58>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d10f      	bne.n	8004104 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <vPortEnterCritical+0x5c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <vPortEnterCritical+0x4c>
        __asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	603b      	str	r3, [r7, #0]
    }
 8004100:	bf00      	nop
 8004102:	e7fe      	b.n	8004102 <vPortEnterCritical+0x4a>
    }
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	20000050 	.word	0x20000050
 8004114:	e000ed04 	.word	0xe000ed04

08004118 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <vPortExitCritical+0x50>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10a      	bne.n	800413c <vPortExitCritical+0x24>
        __asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	607b      	str	r3, [r7, #4]
    }
 8004138:	bf00      	nop
 800413a:	e7fe      	b.n	800413a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <vPortExitCritical+0x50>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3b01      	subs	r3, #1
 8004142:	4a09      	ldr	r2, [pc, #36]	; (8004168 <vPortExitCritical+0x50>)
 8004144:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <vPortExitCritical+0x50>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d105      	bne.n	800415a <vPortExitCritical+0x42>
 800414e:	2300      	movs	r3, #0
 8004150:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004158:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	20000050 	.word	0x20000050
 800416c:	00000000 	.word	0x00000000

08004170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004170:	f3ef 8009 	mrs	r0, PSP
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <pxCurrentTCBConst>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	f01e 0f10 	tst.w	lr, #16
 8004180:	bf08      	it	eq
 8004182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418a:	6010      	str	r0, [r2, #0]
 800418c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004190:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004194:	f380 8811 	msr	BASEPRI, r0
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f001 fdf4 	bl	8005d8c <vTaskSwitchContext>
 80041a4:	f04f 0000 	mov.w	r0, #0
 80041a8:	f380 8811 	msr	BASEPRI, r0
 80041ac:	bc09      	pop	{r0, r3}
 80041ae:	6819      	ldr	r1, [r3, #0]
 80041b0:	6808      	ldr	r0, [r1, #0]
 80041b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b6:	f01e 0f10 	tst.w	lr, #16
 80041ba:	bf08      	it	eq
 80041bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041c0:	f380 8809 	msr	PSP, r0
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	f3af 8000 	nop.w

080041d0 <pxCurrentTCBConst>:
 80041d0:	20005168 	.word	0x20005168
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop

080041d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
        __asm volatile
 80041de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	607b      	str	r3, [r7, #4]
    }
 80041f0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80041f2:	f001 fcb5 	bl	8005b60 <xTaskIncrementTick>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041fc:	4b06      	ldr	r3, [pc, #24]	; (8004218 <SysTick_Handler+0x40>)
 80041fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	2300      	movs	r3, #0
 8004206:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	f383 8811 	msr	BASEPRI, r3
    }
 800420e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	e000ed04 	.word	0xe000ed04

0800421c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004220:	4b08      	ldr	r3, [pc, #32]	; (8004244 <vPortSetupTimerInterrupt+0x28>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004226:	4b08      	ldr	r3, [pc, #32]	; (8004248 <vPortSetupTimerInterrupt+0x2c>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800422c:	4b07      	ldr	r3, [pc, #28]	; (800424c <vPortSetupTimerInterrupt+0x30>)
 800422e:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8004232:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <vPortSetupTimerInterrupt+0x28>)
 8004236:	2207      	movs	r2, #7
 8004238:	601a      	str	r2, [r3, #0]
}
 800423a:	bf00      	nop
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	e000e010 	.word	0xe000e010
 8004248:	e000e018 	.word	0xe000e018
 800424c:	e000e014 	.word	0xe000e014

08004250 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004250:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004260 <vPortEnableVFP+0x10>
 8004254:	6801      	ldr	r1, [r0, #0]
 8004256:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800425a:	6001      	str	r1, [r0, #0]
 800425c:	4770      	bx	lr
 800425e:	0000      	.short	0x0000
 8004260:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop

08004268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800426e:	f3ef 8305 	mrs	r3, IPSR
 8004272:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b0f      	cmp	r3, #15
 8004278:	d914      	bls.n	80042a4 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800427a:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <vPortValidateInterruptPriority+0x70>)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004284:	4b15      	ldr	r3, [pc, #84]	; (80042dc <vPortValidateInterruptPriority+0x74>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	7afa      	ldrb	r2, [r7, #11]
 800428a:	429a      	cmp	r2, r3
 800428c:	d20a      	bcs.n	80042a4 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	607b      	str	r3, [r7, #4]
    }
 80042a0:	bf00      	nop
 80042a2:	e7fe      	b.n	80042a2 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <vPortValidateInterruptPriority+0x78>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042ac:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <vPortValidateInterruptPriority+0x7c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d90a      	bls.n	80042ca <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	603b      	str	r3, [r7, #0]
    }
 80042c6:	bf00      	nop
 80042c8:	e7fe      	b.n	80042c8 <vPortValidateInterruptPriority+0x60>
    }
 80042ca:	bf00      	nop
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	e000e3f0 	.word	0xe000e3f0
 80042dc:	20005120 	.word	0x20005120
 80042e0:	e000ed0c 	.word	0xe000ed0c
 80042e4:	20005124 	.word	0x20005124

080042e8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80042f2:	2301      	movs	r3, #1
 80042f4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10a      	bne.n	8004316 <xQueueGenericReset+0x2e>
        __asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	60fb      	str	r3, [r7, #12]
    }
 8004312:	bf00      	nop
 8004314:	e7fe      	b.n	8004314 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d05d      	beq.n	80043d8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8004320:	2b00      	cmp	r3, #0
 8004322:	d059      	beq.n	80043d8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432c:	2100      	movs	r1, #0
 800432e:	fba3 2302 	umull	r2, r3, r3, r2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d000      	beq.n	8004338 <xQueueGenericReset+0x50>
 8004336:	2101      	movs	r1, #1
 8004338:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800433a:	2b00      	cmp	r3, #0
 800433c:	d14c      	bne.n	80043d8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800433e:	f7ff febb 	bl	80040b8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434a:	6939      	ldr	r1, [r7, #16]
 800434c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800434e:	fb01 f303 	mul.w	r3, r1, r3
 8004352:	441a      	add	r2, r3
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2200      	movs	r2, #0
 800435c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436e:	3b01      	subs	r3, #1
 8004370:	6939      	ldr	r1, [r7, #16]
 8004372:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	441a      	add	r2, r3
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	22ff      	movs	r2, #255	; 0xff
 8004382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	22ff      	movs	r2, #255	; 0xff
 800438a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d114      	bne.n	80043be <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01a      	beq.n	80043d2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	3310      	adds	r3, #16
 80043a0:	4618      	mov	r0, r3
 80043a2:	f001 fdb9 	bl	8005f18 <xTaskRemoveFromEventList>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d012      	beq.n	80043d2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80043ac:	4b15      	ldr	r3, [pc, #84]	; (8004404 <xQueueGenericReset+0x11c>)
 80043ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	e009      	b.n	80043d2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	3310      	adds	r3, #16
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fe ff44 	bl	8003250 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	3324      	adds	r3, #36	; 0x24
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fe ff3f 	bl	8003250 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80043d2:	f7ff fea1 	bl	8004118 <vPortExitCritical>
 80043d6:	e001      	b.n	80043dc <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10a      	bne.n	80043f8 <xQueueGenericReset+0x110>
        __asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	60bb      	str	r3, [r7, #8]
    }
 80043f4:	bf00      	nop
 80043f6:	e7fe      	b.n	80043f6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80043f8:	697b      	ldr	r3, [r7, #20]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	e000ed04 	.word	0xe000ed04

08004408 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004408:	b580      	push	{r7, lr}
 800440a:	b08a      	sub	sp, #40	; 0x28
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	4613      	mov	r3, r2
 8004414:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d02e      	beq.n	800447e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004420:	2100      	movs	r1, #0
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	fba3 2302 	umull	r2, r3, r3, r2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d000      	beq.n	8004430 <xQueueGenericCreate+0x28>
 800442e:	2101      	movs	r1, #1
 8004430:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004432:	2b00      	cmp	r3, #0
 8004434:	d123      	bne.n	800447e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800443e:	f113 0f4d 	cmn.w	r3, #77	; 0x4d
 8004442:	d81c      	bhi.n	800447e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	fb02 f303 	mul.w	r3, r2, r3
 800444c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	334c      	adds	r3, #76	; 0x4c
 8004452:	4618      	mov	r0, r3
 8004454:	f7fe fcfe 	bl	8002e54 <pvPortMalloc>
 8004458:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01c      	beq.n	800449a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	334c      	adds	r3, #76	; 0x4c
 8004468:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800446a:	79fa      	ldrb	r2, [r7, #7]
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	4613      	mov	r3, r2
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 f814 	bl	80044a4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800447c:	e00d      	b.n	800449a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <xQueueGenericCreate+0x92>
        __asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	613b      	str	r3, [r7, #16]
    }
 8004496:	bf00      	nop
 8004498:	e7fe      	b.n	8004498 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800449a:	69fb      	ldr	r3, [r7, #28]
    }
 800449c:	4618      	mov	r0, r3
 800449e:	3720      	adds	r7, #32
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d103      	bne.n	80044c0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	e002      	b.n	80044c6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044d2:	2101      	movs	r1, #1
 80044d4:	69b8      	ldr	r0, [r7, #24]
 80044d6:	f7ff ff07 	bl	80042e8 <xQueueGenericReset>
        }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
        {
            pxNewQueue->pxQueueSetContainer = NULL;
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2200      	movs	r2, #0
 80044de:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00e      	beq.n	8004514 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004508:	2300      	movs	r3, #0
 800450a:	2200      	movs	r2, #0
 800450c:	2100      	movs	r1, #0
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f81c 	bl	800454c <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8004514:	bf00      	nop
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004526:	2301      	movs	r3, #1
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	2300      	movs	r3, #0
 800452c:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	461a      	mov	r2, r3
 8004532:	6939      	ldr	r1, [r7, #16]
 8004534:	6978      	ldr	r0, [r7, #20]
 8004536:	f7ff ff67 	bl	8004408 <xQueueGenericCreate>
 800453a:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7ff ffd3 	bl	80044e8 <prvInitialiseMutex>

        return xNewQueue;
 8004542:	68fb      	ldr	r3, [r7, #12]
    }
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08e      	sub	sp, #56	; 0x38
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800455a:	2300      	movs	r3, #0
 800455c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <xQueueGenericSend+0x32>
        __asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d103      	bne.n	800458c <xQueueGenericSend+0x40>
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <xQueueGenericSend+0x44>
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <xQueueGenericSend+0x46>
 8004590:	2300      	movs	r3, #0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10a      	bne.n	80045ac <xQueueGenericSend+0x60>
        __asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	623b      	str	r3, [r7, #32]
    }
 80045a8:	bf00      	nop
 80045aa:	e7fe      	b.n	80045aa <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d103      	bne.n	80045ba <xQueueGenericSend+0x6e>
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d101      	bne.n	80045be <xQueueGenericSend+0x72>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <xQueueGenericSend+0x74>
 80045be:	2300      	movs	r3, #0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10a      	bne.n	80045da <xQueueGenericSend+0x8e>
        __asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	61fb      	str	r3, [r7, #28]
    }
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045da:	f001 fead 	bl	8006338 <xTaskGetSchedulerState>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d102      	bne.n	80045ea <xQueueGenericSend+0x9e>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <xQueueGenericSend+0xa2>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <xQueueGenericSend+0xa4>
 80045ee:	2300      	movs	r3, #0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10a      	bne.n	800460a <xQueueGenericSend+0xbe>
        __asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	61bb      	str	r3, [r7, #24]
    }
 8004606:	bf00      	nop
 8004608:	e7fe      	b.n	8004608 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800460a:	f7ff fd55 	bl	80040b8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004616:	429a      	cmp	r2, r3
 8004618:	d302      	bcc.n	8004620 <xQueueGenericSend+0xd4>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b02      	cmp	r3, #2
 800461e:	d145      	bne.n	80046ac <xQueueGenericSend+0x160>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c

                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800462c:	f000 fc1a 	bl	8004e64 <prvCopyDataToQueue>
 8004630:	62b8      	str	r0, [r7, #40]	; 0x28

                        if( pxQueue->pxQueueSetContainer != NULL )
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004636:	2b00      	cmp	r3, #0
 8004638:	d014      	beq.n	8004664 <xQueueGenericSend+0x118>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d102      	bne.n	8004646 <xQueueGenericSend+0xfa>
 8004640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d12e      	bne.n	80046a4 <xQueueGenericSend+0x158>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8004646:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004648:	f000 fdef 	bl	800522a <prvNotifyQueueSetContainer>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d028      	beq.n	80046a4 <xQueueGenericSend+0x158>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock. A context switch is required. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004652:	4b4a      	ldr	r3, [pc, #296]	; (800477c <xQueueGenericSend+0x230>)
 8004654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	e01f      	b.n	80046a4 <xQueueGenericSend+0x158>
                        }
                        else
                        {
                            /* If there was a task waiting for data to arrive on the
                             * queue then unblock it now. */
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	2b00      	cmp	r3, #0
 800466a:	d010      	beq.n	800468e <xQueueGenericSend+0x142>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	3324      	adds	r3, #36	; 0x24
 8004670:	4618      	mov	r0, r3
 8004672:	f001 fc51 	bl	8005f18 <xTaskRemoveFromEventList>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d013      	beq.n	80046a4 <xQueueGenericSend+0x158>
                                {
                                    /* The unblocked task has a priority higher than
                                     * our own so yield immediately.  Yes it is ok to
                                     * do this from within the critical section - the
                                     * kernel takes care of that. */
                                    queueYIELD_IF_USING_PREEMPTION();
 800467c:	4b3f      	ldr	r3, [pc, #252]	; (800477c <xQueueGenericSend+0x230>)
 800467e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	e00a      	b.n	80046a4 <xQueueGenericSend+0x158>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }
                            }
                            else if( xYieldRequired != pdFALSE )
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <xQueueGenericSend+0x158>
                            {
                                /* This path is a special case that will only get
                                 * executed if the task was holding multiple mutexes
                                 * and the mutexes were given back in an order that is
                                 * different to that in which they were taken. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004694:	4b39      	ldr	r3, [pc, #228]	; (800477c <xQueueGenericSend+0x230>)
 8004696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80046a4:	f7ff fd38 	bl	8004118 <vPortExitCritical>
                return pdPASS;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e063      	b.n	8004774 <xQueueGenericSend+0x228>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d103      	bne.n	80046ba <xQueueGenericSend+0x16e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80046b2:	f7ff fd31 	bl	8004118 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e05c      	b.n	8004774 <xQueueGenericSend+0x228>
                }
                else if( xEntryTimeSet == pdFALSE )
 80046ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d106      	bne.n	80046ce <xQueueGenericSend+0x182>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80046c0:	f107 0310 	add.w	r3, r7, #16
 80046c4:	4618      	mov	r0, r3
 80046c6:	f001 fcfd 	bl	80060c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80046ca:	2301      	movs	r3, #1
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80046ce:	f7ff fd23 	bl	8004118 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80046d2:	f001 f92b 	bl	800592c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80046d6:	f7ff fcef 	bl	80040b8 <vPortEnterCritical>
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046e0:	b25b      	sxtb	r3, r3
 80046e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e6:	d103      	bne.n	80046f0 <xQueueGenericSend+0x1a4>
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046f6:	b25b      	sxtb	r3, r3
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fc:	d103      	bne.n	8004706 <xQueueGenericSend+0x1ba>
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004706:	f7ff fd07 	bl	8004118 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800470a:	1d3a      	adds	r2, r7, #4
 800470c:	f107 0310 	add.w	r3, r7, #16
 8004710:	4611      	mov	r1, r2
 8004712:	4618      	mov	r0, r3
 8004714:	f001 fcec 	bl	80060f0 <xTaskCheckForTimeOut>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d124      	bne.n	8004768 <xQueueGenericSend+0x21c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800471e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004720:	f000 fca5 	bl	800506e <prvIsQueueFull>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d018      	beq.n	800475c <xQueueGenericSend+0x210>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	3310      	adds	r3, #16
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	4611      	mov	r1, r2
 8004732:	4618      	mov	r0, r3
 8004734:	f001 fb86 	bl	8005e44 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800473a:	f000 fc23 	bl	8004f84 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800473e:	f001 f903 	bl	8005948 <xTaskResumeAll>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	f47f af60 	bne.w	800460a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800474a:	4b0c      	ldr	r3, [pc, #48]	; (800477c <xQueueGenericSend+0x230>)
 800474c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	e756      	b.n	800460a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800475c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800475e:	f000 fc11 	bl	8004f84 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004762:	f001 f8f1 	bl	8005948 <xTaskResumeAll>
 8004766:	e750      	b.n	800460a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800476a:	f000 fc0b 	bl	8004f84 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800476e:	f001 f8eb 	bl	8005948 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004772:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004774:	4618      	mov	r0, r3
 8004776:	3738      	adds	r7, #56	; 0x38
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	e000ed04 	.word	0xe000ed04

08004780 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b090      	sub	sp, #64	; 0x40
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d103      	bne.n	80047bc <xQueueGenericSendFromISR+0x3c>
 80047b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <xQueueGenericSendFromISR+0x40>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <xQueueGenericSendFromISR+0x42>
 80047c0:	2300      	movs	r3, #0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10a      	bne.n	80047dc <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80047c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ca:	f383 8811 	msr	BASEPRI, r3
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80047d8:	bf00      	nop
 80047da:	e7fe      	b.n	80047da <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d103      	bne.n	80047ea <xQueueGenericSendFromISR+0x6a>
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <xQueueGenericSendFromISR+0x6e>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <xQueueGenericSendFromISR+0x70>
 80047ee:	2300      	movs	r3, #0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	623b      	str	r3, [r7, #32]
    }
 8004806:	bf00      	nop
 8004808:	e7fe      	b.n	8004808 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800480a:	f7ff fd2d 	bl	8004268 <vPortValidateInterruptPriority>
        __asm volatile
 800480e:	f3ef 8211 	mrs	r2, BASEPRI
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	61fa      	str	r2, [r7, #28]
 8004824:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8004826:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004828:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004832:	429a      	cmp	r2, r3
 8004834:	d302      	bcc.n	800483c <xQueueGenericSendFromISR+0xbc>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d155      	bne.n	80048e8 <xQueueGenericSendFromISR+0x168>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	68b9      	ldr	r1, [r7, #8]
 8004850:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004852:	f000 fb07 	bl	8004e64 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004856:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800485a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485e:	d129      	bne.n	80048b4 <xQueueGenericSendFromISR+0x134>
            {
                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        if( pxQueue->pxQueueSetContainer != NULL )
 8004860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004864:	2b00      	cmp	r3, #0
 8004866:	d012      	beq.n	800488e <xQueueGenericSendFromISR+0x10e>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d102      	bne.n	8004874 <xQueueGenericSendFromISR+0xf4>
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d136      	bne.n	80048e2 <xQueueGenericSendFromISR+0x162>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8004874:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004876:	f000 fcd8 	bl	800522a <prvNotifyQueueSetContainer>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d030      	beq.n	80048e2 <xQueueGenericSendFromISR+0x162>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock.  A context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d02d      	beq.n	80048e2 <xQueueGenericSendFromISR+0x162>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	e029      	b.n	80048e2 <xQueueGenericSendFromISR+0x162>
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else
                        {
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800488e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	2b00      	cmp	r3, #0
 8004894:	d025      	beq.n	80048e2 <xQueueGenericSendFromISR+0x162>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004898:	3324      	adds	r3, #36	; 0x24
 800489a:	4618      	mov	r0, r3
 800489c:	f001 fb3c 	bl	8005f18 <xTaskRemoveFromEventList>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d01d      	beq.n	80048e2 <xQueueGenericSendFromISR+0x162>
                                {
                                    /* The task waiting has a higher priority so
                                     *  record that a context switch is required. */
                                    if( pxHigherPriorityTaskWoken != NULL )
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01a      	beq.n	80048e2 <xQueueGenericSendFromISR+0x162>
                                    {
                                        *pxHigherPriorityTaskWoken = pdTRUE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	e016      	b.n	80048e2 <xQueueGenericSendFromISR+0x162>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80048b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80048b8:	2b7f      	cmp	r3, #127	; 0x7f
 80048ba:	d10a      	bne.n	80048d2 <xQueueGenericSendFromISR+0x152>
        __asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	617b      	str	r3, [r7, #20]
    }
 80048ce:	bf00      	nop
 80048d0:	e7fe      	b.n	80048d0 <xQueueGenericSendFromISR+0x150>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048d6:	3301      	adds	r3, #1
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	b25a      	sxtb	r2, r3
 80048dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80048e2:	2301      	movs	r3, #1
 80048e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80048e6:	e001      	b.n	80048ec <xQueueGenericSendFromISR+0x16c>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80048e8:	2300      	movs	r3, #0
 80048ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ee:	613b      	str	r3, [r7, #16]
        __asm volatile
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f383 8811 	msr	BASEPRI, r3
    }
 80048f6:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80048f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3740      	adds	r7, #64	; 0x40
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b08e      	sub	sp, #56	; 0x38
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10a      	bne.n	800492c <xQueueGiveFromISR+0x2a>
        __asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	623b      	str	r3, [r7, #32]
    }
 8004928:	bf00      	nop
 800492a:	e7fe      	b.n	800492a <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <xQueueGiveFromISR+0x48>
        __asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	61fb      	str	r3, [r7, #28]
    }
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800494a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d103      	bne.n	800495a <xQueueGiveFromISR+0x58>
 8004952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <xQueueGiveFromISR+0x5c>
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <xQueueGiveFromISR+0x5e>
 800495e:	2300      	movs	r3, #0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10a      	bne.n	800497a <xQueueGiveFromISR+0x78>
        __asm volatile
 8004964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	61bb      	str	r3, [r7, #24]
    }
 8004976:	bf00      	nop
 8004978:	e7fe      	b.n	8004978 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800497a:	f7ff fc75 	bl	8004268 <vPortValidateInterruptPriority>
        __asm volatile
 800497e:	f3ef 8211 	mrs	r2, BASEPRI
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	617a      	str	r2, [r7, #20]
 8004994:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8004996:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004998:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499e:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d24b      	bcs.n	8004a42 <xQueueGiveFromISR+0x140>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80049bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c4:	d123      	bne.n	8004a0e <xQueueGiveFromISR+0x10c>
            {
                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        if( pxQueue->pxQueueSetContainer != NULL )
 80049c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00c      	beq.n	80049e8 <xQueueGiveFromISR+0xe6>
                        {
                            if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80049ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049d0:	f000 fc2b 	bl	800522a <prvNotifyQueueSetContainer>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d030      	beq.n	8004a3c <xQueueGiveFromISR+0x13a>
                            {
                                /* The semaphore is a member of a queue set, and
                                 * posting to the queue set caused a higher priority
                                 * task to unblock.  A context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d02d      	beq.n	8004a3c <xQueueGiveFromISR+0x13a>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2201      	movs	r2, #1
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	e029      	b.n	8004a3c <xQueueGiveFromISR+0x13a>
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else
                        {
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d025      	beq.n	8004a3c <xQueueGiveFromISR+0x13a>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f2:	3324      	adds	r3, #36	; 0x24
 80049f4:	4618      	mov	r0, r3
 80049f6:	f001 fa8f 	bl	8005f18 <xTaskRemoveFromEventList>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01d      	beq.n	8004a3c <xQueueGiveFromISR+0x13a>
                                {
                                    /* The task waiting has a higher priority so
                                     *  record that a context switch is required. */
                                    if( pxHigherPriorityTaskWoken != NULL )
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d01a      	beq.n	8004a3c <xQueueGiveFromISR+0x13a>
                                    {
                                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	e016      	b.n	8004a3c <xQueueGiveFromISR+0x13a>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004a0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a12:	2b7f      	cmp	r3, #127	; 0x7f
 8004a14:	d10a      	bne.n	8004a2c <xQueueGiveFromISR+0x12a>
        __asm volatile
 8004a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	60fb      	str	r3, [r7, #12]
    }
 8004a28:	bf00      	nop
 8004a2a:	e7fe      	b.n	8004a2a <xQueueGiveFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a30:	3301      	adds	r3, #1
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	b25a      	sxtb	r2, r3
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a40:	e001      	b.n	8004a46 <xQueueGiveFromISR+0x144>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	637b      	str	r3, [r7, #52]	; 0x34
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f383 8811 	msr	BASEPRI, r3
    }
 8004a50:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3738      	adds	r7, #56	; 0x38
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08c      	sub	sp, #48	; 0x30
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10a      	bne.n	8004a8c <xQueueReceive+0x30>
        __asm volatile
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	623b      	str	r3, [r7, #32]
    }
 8004a88:	bf00      	nop
 8004a8a:	e7fe      	b.n	8004a8a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d103      	bne.n	8004a9a <xQueueReceive+0x3e>
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <xQueueReceive+0x42>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <xQueueReceive+0x44>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <xQueueReceive+0x5e>
        __asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	61fb      	str	r3, [r7, #28]
    }
 8004ab6:	bf00      	nop
 8004ab8:	e7fe      	b.n	8004ab8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004aba:	f001 fc3d 	bl	8006338 <xTaskGetSchedulerState>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d102      	bne.n	8004aca <xQueueReceive+0x6e>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <xQueueReceive+0x72>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e000      	b.n	8004ad0 <xQueueReceive+0x74>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <xQueueReceive+0x8e>
        __asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	61bb      	str	r3, [r7, #24]
    }
 8004ae6:	bf00      	nop
 8004ae8:	e7fe      	b.n	8004ae8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004aea:	f7ff fae5 	bl	80040b8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01f      	beq.n	8004b3a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004afe:	f000 fa1b 	bl	8004f38 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	1e5a      	subs	r2, r3, #1
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00f      	beq.n	8004b32 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	3310      	adds	r3, #16
 8004b16:	4618      	mov	r0, r3
 8004b18:	f001 f9fe 	bl	8005f18 <xTaskRemoveFromEventList>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004b22:	4b3d      	ldr	r3, [pc, #244]	; (8004c18 <xQueueReceive+0x1bc>)
 8004b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004b32:	f7ff faf1 	bl	8004118 <vPortExitCritical>
                return pdPASS;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e069      	b.n	8004c0e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d103      	bne.n	8004b48 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004b40:	f7ff faea 	bl	8004118 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004b44:	2300      	movs	r3, #0
 8004b46:	e062      	b.n	8004c0e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d106      	bne.n	8004b5c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004b4e:	f107 0310 	add.w	r3, r7, #16
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 fab6 	bl	80060c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004b5c:	f7ff fadc 	bl	8004118 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004b60:	f000 fee4 	bl	800592c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004b64:	f7ff faa8 	bl	80040b8 <vPortEnterCritical>
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b6e:	b25b      	sxtb	r3, r3
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b74:	d103      	bne.n	8004b7e <xQueueReceive+0x122>
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b84:	b25b      	sxtb	r3, r3
 8004b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8a:	d103      	bne.n	8004b94 <xQueueReceive+0x138>
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b94:	f7ff fac0 	bl	8004118 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b98:	1d3a      	adds	r2, r7, #4
 8004b9a:	f107 0310 	add.w	r3, r7, #16
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f001 faa5 	bl	80060f0 <xTaskCheckForTimeOut>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d123      	bne.n	8004bf4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bae:	f000 fa48 	bl	8005042 <prvIsQueueEmpty>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d017      	beq.n	8004be8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bba:	3324      	adds	r3, #36	; 0x24
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f001 f93f 	bl	8005e44 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bc8:	f000 f9dc 	bl	8004f84 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004bcc:	f000 febc 	bl	8005948 <xTaskResumeAll>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d189      	bne.n	8004aea <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004bd6:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <xQueueReceive+0x1bc>)
 8004bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	e780      	b.n	8004aea <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bea:	f000 f9cb 	bl	8004f84 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004bee:	f000 feab 	bl	8005948 <xTaskResumeAll>
 8004bf2:	e77a      	b.n	8004aea <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bf6:	f000 f9c5 	bl	8004f84 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004bfa:	f000 fea5 	bl	8005948 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c00:	f000 fa1f 	bl	8005042 <prvIsQueueEmpty>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f43f af6f 	beq.w	8004aea <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004c0c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3730      	adds	r7, #48	; 0x30
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	e000ed04 	.word	0xe000ed04

08004c1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08e      	sub	sp, #56	; 0x38
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004c26:	2300      	movs	r3, #0
 8004c28:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <xQueueSemaphoreTake+0x32>
        __asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	623b      	str	r3, [r7, #32]
    }
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <xQueueSemaphoreTake+0x50>
        __asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	61fb      	str	r3, [r7, #28]
    }
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c6c:	f001 fb64 	bl	8006338 <xTaskGetSchedulerState>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d102      	bne.n	8004c7c <xQueueSemaphoreTake+0x60>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <xQueueSemaphoreTake+0x64>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <xQueueSemaphoreTake+0x66>
 8004c80:	2300      	movs	r3, #0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10a      	bne.n	8004c9c <xQueueSemaphoreTake+0x80>
        __asm volatile
 8004c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	61bb      	str	r3, [r7, #24]
    }
 8004c98:	bf00      	nop
 8004c9a:	e7fe      	b.n	8004c9a <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004c9c:	f7ff fa0c 	bl	80040b8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d024      	beq.n	8004cf6 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	1e5a      	subs	r2, r3, #1
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d104      	bne.n	8004cc6 <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004cbc:	f001 fd54 	bl	8006768 <pvTaskIncrementMutexHeldCount>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc4:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00f      	beq.n	8004cee <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	3310      	adds	r3, #16
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f001 f920 	bl	8005f18 <xTaskRemoveFromEventList>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d007      	beq.n	8004cee <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004cde:	4b54      	ldr	r3, [pc, #336]	; (8004e30 <xQueueSemaphoreTake+0x214>)
 8004ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004cee:	f7ff fa13 	bl	8004118 <vPortExitCritical>
                return pdPASS;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e097      	b.n	8004e26 <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d111      	bne.n	8004d20 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	617b      	str	r3, [r7, #20]
    }
 8004d14:	bf00      	nop
 8004d16:	e7fe      	b.n	8004d16 <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8004d18:	f7ff f9fe 	bl	8004118 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	e082      	b.n	8004e26 <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004d26:	f107 030c 	add.w	r3, r7, #12
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f001 f9ca 	bl	80060c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004d30:	2301      	movs	r3, #1
 8004d32:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004d34:	f7ff f9f0 	bl	8004118 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004d38:	f000 fdf8 	bl	800592c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004d3c:	f7ff f9bc 	bl	80040b8 <vPortEnterCritical>
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d46:	b25b      	sxtb	r3, r3
 8004d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4c:	d103      	bne.n	8004d56 <xQueueSemaphoreTake+0x13a>
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d5c:	b25b      	sxtb	r3, r3
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d103      	bne.n	8004d6c <xQueueSemaphoreTake+0x150>
 8004d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d6c:	f7ff f9d4 	bl	8004118 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d70:	463a      	mov	r2, r7
 8004d72:	f107 030c 	add.w	r3, r7, #12
 8004d76:	4611      	mov	r1, r2
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f001 f9b9 	bl	80060f0 <xTaskCheckForTimeOut>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d132      	bne.n	8004dea <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d86:	f000 f95c 	bl	8005042 <prvIsQueueEmpty>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d026      	beq.n	8004dde <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d109      	bne.n	8004dac <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 8004d98:	f7ff f98e 	bl	80040b8 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f001 fae7 	bl	8006374 <xTaskPriorityInherit>
 8004da6:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8004da8:	f7ff f9b6 	bl	8004118 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dae:	3324      	adds	r3, #36	; 0x24
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	4611      	mov	r1, r2
 8004db4:	4618      	mov	r0, r3
 8004db6:	f001 f845 	bl	8005e44 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004dba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004dbc:	f000 f8e2 	bl	8004f84 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004dc0:	f000 fdc2 	bl	8005948 <xTaskResumeAll>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f47f af68 	bne.w	8004c9c <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8004dcc:	4b18      	ldr	r3, [pc, #96]	; (8004e30 <xQueueSemaphoreTake+0x214>)
 8004dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	e75e      	b.n	8004c9c <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8004dde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004de0:	f000 f8d0 	bl	8004f84 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004de4:	f000 fdb0 	bl	8005948 <xTaskResumeAll>
 8004de8:	e758      	b.n	8004c9c <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8004dea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004dec:	f000 f8ca 	bl	8004f84 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004df0:	f000 fdaa 	bl	8005948 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004df4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004df6:	f000 f924 	bl	8005042 <prvIsQueueEmpty>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f43f af4d 	beq.w	8004c9c <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00d      	beq.n	8004e24 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8004e08:	f7ff f956 	bl	80040b8 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004e0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e0e:	f000 f811 	bl	8004e34 <prvGetDisinheritPriorityAfterTimeout>
 8004e12:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f001 fbec 	bl	80065f8 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8004e20:	f7ff f97a 	bl	8004118 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004e24:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3738      	adds	r7, #56	; 0x38
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	e000ed04 	.word	0xe000ed04

08004e34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d006      	beq.n	8004e52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f1c3 0314 	rsb	r3, r3, #20
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	e001      	b.n	8004e56 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8004e56:	68fb      	ldr	r3, [r7, #12]
    }
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10d      	bne.n	8004e9e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d14d      	bne.n	8004f26 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f001 fb0e 	bl	80064b0 <xTaskPriorityDisinherit>
 8004e94:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	609a      	str	r2, [r3, #8]
 8004e9c:	e043      	b.n	8004f26 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d119      	bne.n	8004ed8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6858      	ldr	r0, [r3, #4]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	461a      	mov	r2, r3
 8004eae:	68b9      	ldr	r1, [r7, #8]
 8004eb0:	f002 f868 	bl	8006f84 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	441a      	add	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d32b      	bcc.n	8004f26 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	e026      	b.n	8004f26 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	68d8      	ldr	r0, [r3, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	f002 f84e 	bl	8006f84 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	425b      	negs	r3, r3
 8004ef2:	441a      	add	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d207      	bcs.n	8004f14 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	425b      	negs	r3, r3
 8004f0e:	441a      	add	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d105      	bne.n	8004f26 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004f2e:	697b      	ldr	r3, [r7, #20]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d018      	beq.n	8004f7c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	441a      	add	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d303      	bcc.n	8004f6c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68d9      	ldr	r1, [r3, #12]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	461a      	mov	r2, r3
 8004f76:	6838      	ldr	r0, [r7, #0]
 8004f78:	f002 f804 	bl	8006f84 <memcpy>
    }
}
 8004f7c:	bf00      	nop
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004f8c:	f7ff f894 	bl	80040b8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f96:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f98:	e01e      	b.n	8004fd8 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d008      	beq.n	8004fb4 <prvUnlockQueue+0x30>
                    {
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f941 	bl	800522a <prvNotifyQueueSetContainer>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d010      	beq.n	8004fd0 <prvUnlockQueue+0x4c>
                        {
                            /* The queue is a member of a queue set, and posting to
                             * the queue set caused a higher priority task to unblock.
                             * A context switch is required. */
                            vTaskMissedYield();
 8004fae:	f001 f905 	bl	80061bc <vTaskMissedYield>
 8004fb2:	e00d      	b.n	8004fd0 <prvUnlockQueue+0x4c>
                    else
                    {
                        /* Tasks that are removed from the event list will get
                         * added to the pending ready list as the scheduler is still
                         * suspended. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d012      	beq.n	8004fe2 <prvUnlockQueue+0x5e>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3324      	adds	r3, #36	; 0x24
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 ffa9 	bl	8005f18 <xTaskRemoveFromEventList>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <prvUnlockQueue+0x4c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                vTaskMissedYield();
 8004fcc:	f001 f8f6 	bl	80061bc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	dcdc      	bgt.n	8004f9a <prvUnlockQueue+0x16>
 8004fe0:	e000      	b.n	8004fe4 <prvUnlockQueue+0x60>
                            break;
 8004fe2:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	22ff      	movs	r2, #255	; 0xff
 8004fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004fec:	f7ff f894 	bl	8004118 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004ff0:	f7ff f862 	bl	80040b8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ffa:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ffc:	e011      	b.n	8005022 <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d012      	beq.n	800502c <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3310      	adds	r3, #16
 800500a:	4618      	mov	r0, r3
 800500c:	f000 ff84 	bl	8005f18 <xTaskRemoveFromEventList>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8005016:	f001 f8d1 	bl	80061bc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800501a:	7bbb      	ldrb	r3, [r7, #14]
 800501c:	3b01      	subs	r3, #1
 800501e:	b2db      	uxtb	r3, r3
 8005020:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005022:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005026:	2b00      	cmp	r3, #0
 8005028:	dce9      	bgt.n	8004ffe <prvUnlockQueue+0x7a>
 800502a:	e000      	b.n	800502e <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 800502c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	22ff      	movs	r2, #255	; 0xff
 8005032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005036:	f7ff f86f 	bl	8004118 <vPortExitCritical>
}
 800503a:	bf00      	nop
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800504a:	f7ff f835 	bl	80040b8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005056:	2301      	movs	r3, #1
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	e001      	b.n	8005060 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800505c:	2300      	movs	r3, #0
 800505e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005060:	f7ff f85a 	bl	8004118 <vPortExitCritical>

    return xReturn;
 8005064:	68fb      	ldr	r3, [r7, #12]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005076:	f7ff f81f 	bl	80040b8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005082:	429a      	cmp	r2, r3
 8005084:	d102      	bne.n	800508c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005086:	2301      	movs	r3, #1
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	e001      	b.n	8005090 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005090:	f7ff f842 	bl	8004118 <vPortExitCritical>

    return xReturn;
 8005094:	68fb      	ldr	r3, [r7, #12]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <vQueueAddToRegistry+0x26>
        __asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	60fb      	str	r3, [r7, #12]
    }
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d024      	beq.n	800511a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	e01e      	b.n	8005114 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80050d6:	4a18      	ldr	r2, [pc, #96]	; (8005138 <vQueueAddToRegistry+0x98>)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	4413      	add	r3, r2
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d105      	bne.n	80050f2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	4a13      	ldr	r2, [pc, #76]	; (8005138 <vQueueAddToRegistry+0x98>)
 80050ec:	4413      	add	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
                    break;
 80050f0:	e013      	b.n	800511a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10a      	bne.n	800510e <vQueueAddToRegistry+0x6e>
 80050f8:	4a0f      	ldr	r2, [pc, #60]	; (8005138 <vQueueAddToRegistry+0x98>)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d104      	bne.n	800510e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	4a0b      	ldr	r2, [pc, #44]	; (8005138 <vQueueAddToRegistry+0x98>)
 800510a:	4413      	add	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	3301      	adds	r3, #1
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2b07      	cmp	r3, #7
 8005118:	d9dd      	bls.n	80050d6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800512c:	bf00      	nop
 800512e:	371c      	adds	r7, #28
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	20005128 	.word	0x20005128

0800513c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800514c:	f7fe ffb4 	bl	80040b8 <vPortEnterCritical>
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005156:	b25b      	sxtb	r3, r3
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d103      	bne.n	8005166 <vQueueWaitForMessageRestricted+0x2a>
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800516c:	b25b      	sxtb	r3, r3
 800516e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005172:	d103      	bne.n	800517c <vQueueWaitForMessageRestricted+0x40>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800517c:	f7fe ffcc 	bl	8004118 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	2b00      	cmp	r3, #0
 8005186:	d106      	bne.n	8005196 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	3324      	adds	r3, #36	; 0x24
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fe7b 	bl	8005e8c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005196:	6978      	ldr	r0, [r7, #20]
 8005198:	f7ff fef4 	bl	8004f84 <prvUnlockQueue>
    }
 800519c:	bf00      	nop
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
    {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
        QueueSetHandle_t pxQueue;

        pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 80051ac:	2200      	movs	r2, #0
 80051ae:	2104      	movs	r1, #4
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff f929 	bl	8004408 <xQueueGenericCreate>
 80051b6:	60f8      	str	r0, [r7, #12]

        return pxQueue;
 80051b8:	68fb      	ldr	r3, [r7, #12]
    }
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <xQueueAddToSet>:

#if ( configUSE_QUEUE_SETS == 1 )

    BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore,
                               QueueSetHandle_t xQueueSet )
    {
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;

        taskENTER_CRITICAL();
 80051cc:	f7fe ff74 	bl	80040b8 <vPortEnterCritical>
        {
            if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <xQueueAddToSet+0x1c>
            {
                /* Cannot add a queue/semaphore to more than one queue set. */
                xReturn = pdFAIL;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	e00b      	b.n	80051f6 <xQueueAddToSet+0x34>
            }
            else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <xQueueAddToSet+0x2a>
            {
                /* Cannot add a queue/semaphore to a queue set if there are already
                 * items in the queue/semaphore. */
                xReturn = pdFAIL;
 80051e6:	2300      	movs	r3, #0
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	e004      	b.n	80051f6 <xQueueAddToSet+0x34>
            }
            else
            {
                ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	649a      	str	r2, [r3, #72]	; 0x48
                xReturn = pdPASS;
 80051f2:	2301      	movs	r3, #1
 80051f4:	60fb      	str	r3, [r7, #12]
            }
        }
        taskEXIT_CRITICAL();
 80051f6:	f7fe ff8f 	bl	8004118 <vPortExitCritical>

        return xReturn;
 80051fa:	68fb      	ldr	r3, [r7, #12]
    }
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <xQueueSelectFromSet>:

#if ( configUSE_QUEUE_SETS == 1 )

    QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet,
                                                TickType_t const xTicksToWait )
    {
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
        QueueSetMemberHandle_t xReturn = NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]

        ( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 8005212:	f107 030c 	add.w	r3, r7, #12
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	4619      	mov	r1, r3
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff fc1e 	bl	8004a5c <xQueueReceive>
        return xReturn;
 8005220:	68fb      	ldr	r3, [r7, #12]
    }
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 800522a:	b580      	push	{r7, lr}
 800522c:	b088      	sub	sp, #32
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005236:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005238:	2300      	movs	r3, #0
 800523a:	61fb      	str	r3, [r7, #28]
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10a      	bne.n	8005258 <prvNotifyQueueSetContainer+0x2e>
        __asm volatile
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	613b      	str	r3, [r7, #16]
    }
 8005254:	bf00      	nop
 8005256:	e7fe      	b.n	8005256 <prvNotifyQueueSetContainer+0x2c>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005260:	429a      	cmp	r2, r3
 8005262:	d30a      	bcc.n	800527a <prvNotifyQueueSetContainer+0x50>
        __asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	60fb      	str	r3, [r7, #12]
    }
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <prvNotifyQueueSetContainer+0x4e>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	429a      	cmp	r2, r3
 8005284:	d234      	bcs.n	80052f0 <prvNotifyQueueSetContainer+0xc6>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800528c:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 800528e:	1d3b      	adds	r3, r7, #4
 8005290:	2200      	movs	r2, #0
 8005292:	4619      	mov	r1, r3
 8005294:	69b8      	ldr	r0, [r7, #24]
 8005296:	f7ff fde5 	bl	8004e64 <prvCopyDataToQueue>
 800529a:	61f8      	str	r0, [r7, #28]

            if( cTxLock == queueUNLOCKED )
 800529c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a4:	d10e      	bne.n	80052c4 <prvNotifyQueueSetContainer+0x9a>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d020      	beq.n	80052f0 <prvNotifyQueueSetContainer+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	3324      	adds	r3, #36	; 0x24
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fe30 	bl	8005f18 <xTaskRemoveFromEventList>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d018      	beq.n	80052f0 <prvNotifyQueueSetContainer+0xc6>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 80052be:	2301      	movs	r3, #1
 80052c0:	61fb      	str	r3, [r7, #28]
 80052c2:	e015      	b.n	80052f0 <prvNotifyQueueSetContainer+0xc6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                configASSERT( cTxLock != queueINT8_MAX );
 80052c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052c8:	2b7f      	cmp	r3, #127	; 0x7f
 80052ca:	d10a      	bne.n	80052e2 <prvNotifyQueueSetContainer+0xb8>
        __asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	60bb      	str	r3, [r7, #8]
    }
 80052de:	bf00      	nop
 80052e0:	e7fe      	b.n	80052e0 <prvNotifyQueueSetContainer+0xb6>

                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052e2:	7dfb      	ldrb	r3, [r7, #23]
 80052e4:	3301      	adds	r3, #1
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	b25a      	sxtb	r2, r3
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80052f0:	69fb      	ldr	r3, [r7, #28]
    }
 80052f2:	4618      	mov	r0, r3
 80052f4:	3720      	adds	r7, #32
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b08c      	sub	sp, #48	; 0x30
 80052fe:	af04      	add	r7, sp, #16
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	603b      	str	r3, [r7, #0]
 8005306:	4613      	mov	r3, r2
 8005308:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800530a:	88fb      	ldrh	r3, [r7, #6]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4618      	mov	r0, r3
 8005310:	f7fd fda0 	bl	8002e54 <pvPortMalloc>
 8005314:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00e      	beq.n	800533a <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800531c:	2064      	movs	r0, #100	; 0x64
 800531e:	f7fd fd99 	bl	8002e54 <pvPortMalloc>
 8005322:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
 8005330:	e005      	b.n	800533e <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8005332:	6978      	ldr	r0, [r7, #20]
 8005334:	f7fd fe6e 	bl	8003014 <vPortFree>
 8005338:	e001      	b.n	800533e <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800533a:	2300      	movs	r3, #0
 800533c:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d013      	beq.n	800536c <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005344:	88fa      	ldrh	r2, [r7, #6]
 8005346:	2300      	movs	r3, #0
 8005348:	9303      	str	r3, [sp, #12]
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	9302      	str	r3, [sp, #8]
 800534e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f80e 	bl	800537c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005360:	69f8      	ldr	r0, [r7, #28]
 8005362:	f000 f8a7 	bl	80054b4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005366:	2301      	movs	r3, #1
 8005368:	61bb      	str	r3, [r7, #24]
 800536a:	e002      	b.n	8005372 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800536c:	f04f 33ff 	mov.w	r3, #4294967295
 8005370:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005372:	69bb      	ldr	r3, [r7, #24]
    }
 8005374:	4618      	mov	r0, r3
 8005376:	3720      	adds	r7, #32
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b088      	sub	sp, #32
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005394:	3b01      	subs	r3, #1
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	f023 0307 	bic.w	r3, r3, #7
 80053a2:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <prvInitialiseNewTask+0x48>
        __asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	617b      	str	r3, [r7, #20]
    }
 80053c0:	bf00      	nop
 80053c2:	e7fe      	b.n	80053c2 <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01f      	beq.n	800540a <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053ca:	2300      	movs	r3, #0
 80053cc:	61fb      	str	r3, [r7, #28]
 80053ce:	e012      	b.n	80053f6 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	4413      	add	r3, r2
 80053d6:	7819      	ldrb	r1, [r3, #0]
 80053d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	4413      	add	r3, r2
 80053de:	3334      	adds	r3, #52	; 0x34
 80053e0:	460a      	mov	r2, r1
 80053e2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4413      	add	r3, r2
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d006      	beq.n	80053fe <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	3301      	adds	r3, #1
 80053f4:	61fb      	str	r3, [r7, #28]
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	2b1d      	cmp	r3, #29
 80053fa:	d9e9      	bls.n	80053d0 <prvInitialiseNewTask+0x54>
 80053fc:	e000      	b.n	8005400 <prvInitialiseNewTask+0x84>
            {
                break;
 80053fe:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005408:	e003      	b.n	8005412 <prvInitialiseNewTask+0x96>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	2b13      	cmp	r3, #19
 8005416:	d90a      	bls.n	800542e <prvInitialiseNewTask+0xb2>
        __asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	613b      	str	r3, [r7, #16]
    }
 800542a:	bf00      	nop
 800542c:	e7fe      	b.n	800542c <prvInitialiseNewTask+0xb0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	2b13      	cmp	r3, #19
 8005432:	d901      	bls.n	8005438 <prvInitialiseNewTask+0xbc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005434:	2313      	movs	r3, #19
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800543c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005442:	655a      	str	r2, [r3, #84]	; 0x54
            pxNewTCB->uxMutexesHeld = 0;
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	2200      	movs	r2, #0
 8005448:	659a      	str	r2, [r3, #88]	; 0x58
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	3304      	adds	r3, #4
 800544e:	4618      	mov	r0, r3
 8005450:	f7fd ff1e 	bl	8003290 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	3318      	adds	r3, #24
 8005458:	4618      	mov	r0, r3
 800545a:	f7fd ff19 	bl	8003290 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005462:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	f1c3 0214 	rsb	r2, r3, #20
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005472:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005476:	335c      	adds	r3, #92	; 0x5c
 8005478:	2204      	movs	r2, #4
 800547a:	2100      	movs	r1, #0
 800547c:	4618      	mov	r0, r3
 800547e:	f001 fd8f 	bl	8006fa0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	3360      	adds	r3, #96	; 0x60
 8005486:	2201      	movs	r2, #1
 8005488:	2100      	movs	r1, #0
 800548a:	4618      	mov	r0, r3
 800548c:	f001 fd88 	bl	8006fa0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	68f9      	ldr	r1, [r7, #12]
 8005494:	69b8      	ldr	r0, [r7, #24]
 8005496:	f7fe fce1 	bl	8003e5c <pxPortInitialiseStack>
 800549a:	4602      	mov	r2, r0
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80054a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <prvInitialiseNewTask+0x130>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054aa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80054ac:	bf00      	nop
 80054ae:	3720      	adds	r7, #32
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80054bc:	f7fe fdfc 	bl	80040b8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80054c0:	4b3e      	ldr	r3, [pc, #248]	; (80055bc <prvAddNewTaskToReadyList+0x108>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3301      	adds	r3, #1
 80054c6:	4a3d      	ldr	r2, [pc, #244]	; (80055bc <prvAddNewTaskToReadyList+0x108>)
 80054c8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80054ca:	4b3d      	ldr	r3, [pc, #244]	; (80055c0 <prvAddNewTaskToReadyList+0x10c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d109      	bne.n	80054e6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80054d2:	4a3b      	ldr	r2, [pc, #236]	; (80055c0 <prvAddNewTaskToReadyList+0x10c>)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054d8:	4b38      	ldr	r3, [pc, #224]	; (80055bc <prvAddNewTaskToReadyList+0x108>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d110      	bne.n	8005502 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80054e0:	f000 fe90 	bl	8006204 <prvInitialiseTaskLists>
 80054e4:	e00d      	b.n	8005502 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80054e6:	4b37      	ldr	r3, [pc, #220]	; (80055c4 <prvAddNewTaskToReadyList+0x110>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d109      	bne.n	8005502 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054ee:	4b34      	ldr	r3, [pc, #208]	; (80055c0 <prvAddNewTaskToReadyList+0x10c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d802      	bhi.n	8005502 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80054fc:	4a30      	ldr	r2, [pc, #192]	; (80055c0 <prvAddNewTaskToReadyList+0x10c>)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005502:	4b31      	ldr	r3, [pc, #196]	; (80055c8 <prvAddNewTaskToReadyList+0x114>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3301      	adds	r3, #1
 8005508:	4a2f      	ldr	r2, [pc, #188]	; (80055c8 <prvAddNewTaskToReadyList+0x114>)
 800550a:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	2201      	movs	r2, #1
 8005512:	409a      	lsls	r2, r3
 8005514:	4b2d      	ldr	r3, [pc, #180]	; (80055cc <prvAddNewTaskToReadyList+0x118>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4313      	orrs	r3, r2
 800551a:	4a2c      	ldr	r2, [pc, #176]	; (80055cc <prvAddNewTaskToReadyList+0x118>)
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005522:	492b      	ldr	r1, [pc, #172]	; (80055d0 <prvAddNewTaskToReadyList+0x11c>)
 8005524:	4613      	mov	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	3304      	adds	r3, #4
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	609a      	str	r2, [r3, #8]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	60da      	str	r2, [r3, #12]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	3204      	adds	r2, #4
 800554a:	605a      	str	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	1d1a      	adds	r2, r3, #4
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	609a      	str	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4a1b      	ldr	r2, [pc, #108]	; (80055d0 <prvAddNewTaskToReadyList+0x11c>)
 8005562:	441a      	add	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	615a      	str	r2, [r3, #20]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556c:	4918      	ldr	r1, [pc, #96]	; (80055d0 <prvAddNewTaskToReadyList+0x11c>)
 800556e:	4613      	mov	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	440b      	add	r3, r1
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	1c59      	adds	r1, r3, #1
 800557c:	4814      	ldr	r0, [pc, #80]	; (80055d0 <prvAddNewTaskToReadyList+0x11c>)
 800557e:	4613      	mov	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4403      	add	r3, r0
 8005588:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800558a:	f7fe fdc5 	bl	8004118 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800558e:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <prvAddNewTaskToReadyList+0x110>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00e      	beq.n	80055b4 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005596:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <prvAddNewTaskToReadyList+0x10c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d207      	bcs.n	80055b4 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80055a4:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <prvAddNewTaskToReadyList+0x120>)
 80055a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80055b4:	bf00      	nop
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	2000536c 	.word	0x2000536c
 80055c0:	20005168 	.word	0x20005168
 80055c4:	20005378 	.word	0x20005378
 80055c8:	20005388 	.word	0x20005388
 80055cc:	20005374 	.word	0x20005374
 80055d0:	2000516c 	.word	0x2000516c
 80055d4:	e000ed04 	.word	0xe000ed04

080055d8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80055e0:	f7fe fd6a 	bl	80040b8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d102      	bne.n	80055f0 <vTaskSuspend+0x18>
 80055ea:	4b43      	ldr	r3, [pc, #268]	; (80056f8 <vTaskSuspend+0x120>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	e000      	b.n	80055f2 <vTaskSuspend+0x1a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	3304      	adds	r3, #4
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fd feb3 	bl	8003364 <uxListRemove>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d115      	bne.n	8005630 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005608:	493c      	ldr	r1, [pc, #240]	; (80056fc <vTaskSuspend+0x124>)
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	440b      	add	r3, r1
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10a      	bne.n	8005630 <vTaskSuspend+0x58>
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	2201      	movs	r2, #1
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	43da      	mvns	r2, r3
 8005626:	4b36      	ldr	r3, [pc, #216]	; (8005700 <vTaskSuspend+0x128>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4013      	ands	r3, r2
 800562c:	4a34      	ldr	r2, [pc, #208]	; (8005700 <vTaskSuspend+0x128>)
 800562e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	2b00      	cmp	r3, #0
 8005636:	d004      	beq.n	8005642 <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	3318      	adds	r3, #24
 800563c:	4618      	mov	r0, r3
 800563e:	f7fd fe91 	bl	8003364 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	3304      	adds	r3, #4
 8005646:	4619      	mov	r1, r3
 8005648:	482e      	ldr	r0, [pc, #184]	; (8005704 <vTaskSuspend+0x12c>)
 800564a:	f7fd fe2e 	bl	80032aa <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	e010      	b.n	8005676 <vTaskSuspend+0x9e>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	4413      	add	r3, r2
 800565a:	3360      	adds	r3, #96	; 0x60
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b01      	cmp	r3, #1
 8005662:	d105      	bne.n	8005670 <vTaskSuspend+0x98>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	4413      	add	r3, r2
 800566a:	3360      	adds	r3, #96	; 0x60
 800566c:	2200      	movs	r2, #0
 800566e:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	3301      	adds	r3, #1
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b00      	cmp	r3, #0
 800567a:	ddeb      	ble.n	8005654 <vTaskSuspend+0x7c>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 800567c:	f7fe fd4c 	bl	8004118 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8005680:	4b21      	ldr	r3, [pc, #132]	; (8005708 <vTaskSuspend+0x130>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d005      	beq.n	8005694 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8005688:	f7fe fd16 	bl	80040b8 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 800568c:	f000 fe38 	bl	8006300 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8005690:	f7fe fd42 	bl	8004118 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8005694:	4b18      	ldr	r3, [pc, #96]	; (80056f8 <vTaskSuspend+0x120>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	429a      	cmp	r2, r3
 800569c:	d127      	bne.n	80056ee <vTaskSuspend+0x116>
        {
            if( xSchedulerRunning != pdFALSE )
 800569e:	4b1a      	ldr	r3, [pc, #104]	; (8005708 <vTaskSuspend+0x130>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d017      	beq.n	80056d6 <vTaskSuspend+0xfe>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 80056a6:	4b19      	ldr	r3, [pc, #100]	; (800570c <vTaskSuspend+0x134>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <vTaskSuspend+0xec>
        __asm volatile
 80056ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	60fb      	str	r3, [r7, #12]
    }
 80056c0:	bf00      	nop
 80056c2:	e7fe      	b.n	80056c2 <vTaskSuspend+0xea>
                portYIELD_WITHIN_API();
 80056c4:	4b12      	ldr	r3, [pc, #72]	; (8005710 <vTaskSuspend+0x138>)
 80056c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80056d4:	e00b      	b.n	80056ee <vTaskSuspend+0x116>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80056d6:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <vTaskSuspend+0x12c>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	4b0e      	ldr	r3, [pc, #56]	; (8005714 <vTaskSuspend+0x13c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d103      	bne.n	80056ea <vTaskSuspend+0x112>
                    pxCurrentTCB = NULL;
 80056e2:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <vTaskSuspend+0x120>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]
    }
 80056e8:	e001      	b.n	80056ee <vTaskSuspend+0x116>
                    vTaskSwitchContext();
 80056ea:	f000 fb4f 	bl	8005d8c <vTaskSwitchContext>
    }
 80056ee:	bf00      	nop
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20005168 	.word	0x20005168
 80056fc:	2000516c 	.word	0x2000516c
 8005700:	20005374 	.word	0x20005374
 8005704:	20005358 	.word	0x20005358
 8005708:	20005378 	.word	0x20005378
 800570c:	20005394 	.word	0x20005394
 8005710:	e000ed04 	.word	0xe000ed04
 8005714:	2000536c 	.word	0x2000536c

08005718 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8005720:	2300      	movs	r3, #0
 8005722:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10a      	bne.n	8005744 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	60fb      	str	r3, [r7, #12]
    }
 8005740:	bf00      	nop
 8005742:	e7fe      	b.n	8005742 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	4a0a      	ldr	r2, [pc, #40]	; (8005774 <prvTaskIsTaskSuspended+0x5c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d10a      	bne.n	8005764 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005752:	4a09      	ldr	r2, [pc, #36]	; (8005778 <prvTaskIsTaskSuspended+0x60>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d005      	beq.n	8005764 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8005760:	2301      	movs	r3, #1
 8005762:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005764:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005766:	4618      	mov	r0, r3
 8005768:	371c      	adds	r7, #28
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	20005358 	.word	0x20005358
 8005778:	2000532c 	.word	0x2000532c

0800577c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10a      	bne.n	80057a4 <vTaskResume+0x28>
        __asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	60fb      	str	r3, [r7, #12]
    }
 80057a0:	bf00      	nop
 80057a2:	e7fe      	b.n	80057a2 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80057a4:	4b34      	ldr	r3, [pc, #208]	; (8005878 <vTaskResume+0xfc>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d05f      	beq.n	800586e <vTaskResume+0xf2>
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d05c      	beq.n	800586e <vTaskResume+0xf2>
        {
            taskENTER_CRITICAL();
 80057b4:	f7fe fc80 	bl	80040b8 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80057b8:	6978      	ldr	r0, [r7, #20]
 80057ba:	f7ff ffad 	bl	8005718 <prvTaskIsTaskSuspended>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d052      	beq.n	800586a <vTaskResume+0xee>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	3304      	adds	r3, #4
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fd fdcb 	bl	8003364 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d2:	2201      	movs	r2, #1
 80057d4:	409a      	lsls	r2, r3
 80057d6:	4b29      	ldr	r3, [pc, #164]	; (800587c <vTaskResume+0x100>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4313      	orrs	r3, r2
 80057dc:	4a27      	ldr	r2, [pc, #156]	; (800587c <vTaskResume+0x100>)
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e4:	4926      	ldr	r1, [pc, #152]	; (8005880 <vTaskResume+0x104>)
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	440b      	add	r3, r1
 80057f0:	3304      	adds	r3, #4
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	613b      	str	r3, [r7, #16]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	609a      	str	r2, [r3, #8]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	60da      	str	r2, [r3, #12]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	3204      	adds	r2, #4
 800580c:	605a      	str	r2, [r3, #4]
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	1d1a      	adds	r2, r3, #4
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	609a      	str	r2, [r3, #8]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4a17      	ldr	r2, [pc, #92]	; (8005880 <vTaskResume+0x104>)
 8005824:	441a      	add	r2, r3
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	615a      	str	r2, [r3, #20]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582e:	4914      	ldr	r1, [pc, #80]	; (8005880 <vTaskResume+0x104>)
 8005830:	4613      	mov	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	440b      	add	r3, r1
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	1c59      	adds	r1, r3, #1
 800583e:	4810      	ldr	r0, [pc, #64]	; (8005880 <vTaskResume+0x104>)
 8005840:	4613      	mov	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4403      	add	r3, r0
 800584a:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005850:	4b09      	ldr	r3, [pc, #36]	; (8005878 <vTaskResume+0xfc>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	429a      	cmp	r2, r3
 8005858:	d307      	bcc.n	800586a <vTaskResume+0xee>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 800585a:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <vTaskResume+0x108>)
 800585c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800586a:	f7fe fc55 	bl	8004118 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800586e:	bf00      	nop
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20005168 	.word	0x20005168
 800587c:	20005374 	.word	0x20005374
 8005880:	2000516c 	.word	0x2000516c
 8005884:	e000ed04 	.word	0xe000ed04

08005888 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800588e:	4b20      	ldr	r3, [pc, #128]	; (8005910 <vTaskStartScheduler+0x88>)
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	2300      	movs	r3, #0
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	2300      	movs	r3, #0
 8005898:	2280      	movs	r2, #128	; 0x80
 800589a:	491e      	ldr	r1, [pc, #120]	; (8005914 <vTaskStartScheduler+0x8c>)
 800589c:	481e      	ldr	r0, [pc, #120]	; (8005918 <vTaskStartScheduler+0x90>)
 800589e:	f7ff fd2c 	bl	80052fa <xTaskCreate>
 80058a2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d102      	bne.n	80058b0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80058aa:	f000 fff1 	bl	8006890 <xTimerCreateTimerTask>
 80058ae:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d116      	bne.n	80058e4 <vTaskStartScheduler+0x5c>
        __asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	60bb      	str	r3, [r7, #8]
    }
 80058c8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80058ca:	4b14      	ldr	r3, [pc, #80]	; (800591c <vTaskStartScheduler+0x94>)
 80058cc:	f04f 32ff 	mov.w	r2, #4294967295
 80058d0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80058d2:	4b13      	ldr	r3, [pc, #76]	; (8005920 <vTaskStartScheduler+0x98>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058d8:	4b12      	ldr	r3, [pc, #72]	; (8005924 <vTaskStartScheduler+0x9c>)
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80058de:	f7fe fb49 	bl	8003f74 <xPortStartScheduler>
 80058e2:	e00e      	b.n	8005902 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d10a      	bne.n	8005902 <vTaskStartScheduler+0x7a>
        __asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	607b      	str	r3, [r7, #4]
    }
 80058fe:	bf00      	nop
 8005900:	e7fe      	b.n	8005900 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005902:	4b09      	ldr	r3, [pc, #36]	; (8005928 <vTaskStartScheduler+0xa0>)
 8005904:	681b      	ldr	r3, [r3, #0]
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20005390 	.word	0x20005390
 8005914:	08007128 	.word	0x08007128
 8005918:	080061d5 	.word	0x080061d5
 800591c:	2000538c 	.word	0x2000538c
 8005920:	20005378 	.word	0x20005378
 8005924:	20005370 	.word	0x20005370
 8005928:	20000054 	.word	0x20000054

0800592c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005930:	4b04      	ldr	r3, [pc, #16]	; (8005944 <vTaskSuspendAll+0x18>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	4a03      	ldr	r2, [pc, #12]	; (8005944 <vTaskSuspendAll+0x18>)
 8005938:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800593a:	bf00      	nop
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	20005394 	.word	0x20005394

08005948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005952:	2300      	movs	r3, #0
 8005954:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005956:	4b71      	ldr	r3, [pc, #452]	; (8005b1c <xTaskResumeAll+0x1d4>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <xTaskResumeAll+0x2c>
        __asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	607b      	str	r3, [r7, #4]
    }
 8005970:	bf00      	nop
 8005972:	e7fe      	b.n	8005972 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005974:	f7fe fba0 	bl	80040b8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005978:	4b68      	ldr	r3, [pc, #416]	; (8005b1c <xTaskResumeAll+0x1d4>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3b01      	subs	r3, #1
 800597e:	4a67      	ldr	r2, [pc, #412]	; (8005b1c <xTaskResumeAll+0x1d4>)
 8005980:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005982:	4b66      	ldr	r3, [pc, #408]	; (8005b1c <xTaskResumeAll+0x1d4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	f040 80c0 	bne.w	8005b0c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800598c:	4b64      	ldr	r3, [pc, #400]	; (8005b20 <xTaskResumeAll+0x1d8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 80bb 	beq.w	8005b0c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005996:	e08a      	b.n	8005aae <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005998:	4b62      	ldr	r3, [pc, #392]	; (8005b24 <xTaskResumeAll+0x1dc>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	6a12      	ldr	r2, [r2, #32]
 80059ae:	609a      	str	r2, [r3, #8]
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	69d2      	ldr	r2, [r2, #28]
 80059b8:	605a      	str	r2, [r3, #4]
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	3318      	adds	r3, #24
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d103      	bne.n	80059ce <xTaskResumeAll+0x86>
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	6a1a      	ldr	r2, [r3, #32]
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	605a      	str	r2, [r3, #4]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	2200      	movs	r2, #0
 80059d2:	629a      	str	r2, [r3, #40]	; 0x28
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	1e5a      	subs	r2, r3, #1
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	68d2      	ldr	r2, [r2, #12]
 80059ec:	609a      	str	r2, [r3, #8]
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	69fa      	ldr	r2, [r7, #28]
 80059f4:	6892      	ldr	r2, [r2, #8]
 80059f6:	605a      	str	r2, [r3, #4]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	3304      	adds	r3, #4
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d103      	bne.n	8005a0c <xTaskResumeAll+0xc4>
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	605a      	str	r2, [r3, #4]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	615a      	str	r2, [r3, #20]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	1e5a      	subs	r2, r3, #1
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	2201      	movs	r2, #1
 8005a22:	409a      	lsls	r2, r3
 8005a24:	4b40      	ldr	r3, [pc, #256]	; (8005b28 <xTaskResumeAll+0x1e0>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	4a3f      	ldr	r2, [pc, #252]	; (8005b28 <xTaskResumeAll+0x1e0>)
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a32:	493e      	ldr	r1, [pc, #248]	; (8005b2c <xTaskResumeAll+0x1e4>)
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	3304      	adds	r3, #4
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60bb      	str	r3, [r7, #8]
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	609a      	str	r2, [r3, #8]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	60da      	str	r2, [r3, #12]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	3204      	adds	r2, #4
 8005a5a:	605a      	str	r2, [r3, #4]
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	1d1a      	adds	r2, r3, #4
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	609a      	str	r2, [r3, #8]
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4a2e      	ldr	r2, [pc, #184]	; (8005b2c <xTaskResumeAll+0x1e4>)
 8005a72:	441a      	add	r2, r3
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	615a      	str	r2, [r3, #20]
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7c:	492b      	ldr	r1, [pc, #172]	; (8005b2c <xTaskResumeAll+0x1e4>)
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	440b      	add	r3, r1
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	1c59      	adds	r1, r3, #1
 8005a8c:	4827      	ldr	r0, [pc, #156]	; (8005b2c <xTaskResumeAll+0x1e4>)
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4403      	add	r3, r0
 8005a98:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9e:	4b24      	ldr	r3, [pc, #144]	; (8005b30 <xTaskResumeAll+0x1e8>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d302      	bcc.n	8005aae <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8005aa8:	4b22      	ldr	r3, [pc, #136]	; (8005b34 <xTaskResumeAll+0x1ec>)
 8005aaa:	2201      	movs	r2, #1
 8005aac:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005aae:	4b1d      	ldr	r3, [pc, #116]	; (8005b24 <xTaskResumeAll+0x1dc>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f47f af70 	bne.w	8005998 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005abe:	f000 fc1f 	bl	8006300 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ac2:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <xTaskResumeAll+0x1f0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d010      	beq.n	8005af0 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005ace:	f000 f847 	bl	8005b60 <xTaskIncrementTick>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8005ad8:	4b16      	ldr	r3, [pc, #88]	; (8005b34 <xTaskResumeAll+0x1ec>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1f1      	bne.n	8005ace <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8005aea:	4b13      	ldr	r3, [pc, #76]	; (8005b38 <xTaskResumeAll+0x1f0>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005af0:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <xTaskResumeAll+0x1ec>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d009      	beq.n	8005b0c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005af8:	2301      	movs	r3, #1
 8005afa:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005afc:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <xTaskResumeAll+0x1f4>)
 8005afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005b0c:	f7fe fb04 	bl	8004118 <vPortExitCritical>

    return xAlreadyYielded;
 8005b10:	69bb      	ldr	r3, [r7, #24]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20005394 	.word	0x20005394
 8005b20:	2000536c 	.word	0x2000536c
 8005b24:	2000532c 	.word	0x2000532c
 8005b28:	20005374 	.word	0x20005374
 8005b2c:	2000516c 	.word	0x2000516c
 8005b30:	20005168 	.word	0x20005168
 8005b34:	20005380 	.word	0x20005380
 8005b38:	2000537c 	.word	0x2000537c
 8005b3c:	e000ed04 	.word	0xe000ed04

08005b40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005b46:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <xTaskGetTickCount+0x1c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005b4c:	687b      	ldr	r3, [r7, #4]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	20005370 	.word	0x20005370

08005b60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	; 0x28
 8005b64:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005b66:	2300      	movs	r3, #0
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b6a:	4b7d      	ldr	r3, [pc, #500]	; (8005d60 <xTaskIncrementTick+0x200>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f040 80ec 	bne.w	8005d4c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b74:	4b7b      	ldr	r3, [pc, #492]	; (8005d64 <xTaskIncrementTick+0x204>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005b7c:	4a79      	ldr	r2, [pc, #484]	; (8005d64 <xTaskIncrementTick+0x204>)
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d120      	bne.n	8005bca <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005b88:	4b77      	ldr	r3, [pc, #476]	; (8005d68 <xTaskIncrementTick+0x208>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <xTaskIncrementTick+0x48>
        __asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	607b      	str	r3, [r7, #4]
    }
 8005ba4:	bf00      	nop
 8005ba6:	e7fe      	b.n	8005ba6 <xTaskIncrementTick+0x46>
 8005ba8:	4b6f      	ldr	r3, [pc, #444]	; (8005d68 <xTaskIncrementTick+0x208>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	61fb      	str	r3, [r7, #28]
 8005bae:	4b6f      	ldr	r3, [pc, #444]	; (8005d6c <xTaskIncrementTick+0x20c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a6d      	ldr	r2, [pc, #436]	; (8005d68 <xTaskIncrementTick+0x208>)
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	4a6d      	ldr	r2, [pc, #436]	; (8005d6c <xTaskIncrementTick+0x20c>)
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	4b6c      	ldr	r3, [pc, #432]	; (8005d70 <xTaskIncrementTick+0x210>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	4a6b      	ldr	r2, [pc, #428]	; (8005d70 <xTaskIncrementTick+0x210>)
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	f000 fb9b 	bl	8006300 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005bca:	4b6a      	ldr	r3, [pc, #424]	; (8005d74 <xTaskIncrementTick+0x214>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6a3a      	ldr	r2, [r7, #32]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	f0c0 80a6 	bcc.w	8005d22 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bd6:	4b64      	ldr	r3, [pc, #400]	; (8005d68 <xTaskIncrementTick+0x208>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d104      	bne.n	8005bea <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005be0:	4b64      	ldr	r3, [pc, #400]	; (8005d74 <xTaskIncrementTick+0x214>)
 8005be2:	f04f 32ff 	mov.w	r2, #4294967295
 8005be6:	601a      	str	r2, [r3, #0]
                    break;
 8005be8:	e09b      	b.n	8005d22 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bea:	4b5f      	ldr	r3, [pc, #380]	; (8005d68 <xTaskIncrementTick+0x208>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005bfa:	6a3a      	ldr	r2, [r7, #32]
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d203      	bcs.n	8005c0a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005c02:	4a5c      	ldr	r2, [pc, #368]	; (8005d74 <xTaskIncrementTick+0x214>)
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005c08:	e08b      	b.n	8005d22 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	68d2      	ldr	r2, [r2, #12]
 8005c18:	609a      	str	r2, [r3, #8]
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	6892      	ldr	r2, [r2, #8]
 8005c22:	605a      	str	r2, [r3, #4]
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d103      	bne.n	8005c38 <xTaskIncrementTick+0xd8>
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	605a      	str	r2, [r3, #4]
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	615a      	str	r2, [r3, #20]
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	1e5a      	subs	r2, r3, #1
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d01e      	beq.n	8005c8e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	6a12      	ldr	r2, [r2, #32]
 8005c5e:	609a      	str	r2, [r3, #8]
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	69d2      	ldr	r2, [r2, #28]
 8005c68:	605a      	str	r2, [r3, #4]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	3318      	adds	r3, #24
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d103      	bne.n	8005c7e <xTaskIncrementTick+0x11e>
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	6a1a      	ldr	r2, [r3, #32]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	605a      	str	r2, [r3, #4]
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	2200      	movs	r2, #0
 8005c82:	629a      	str	r2, [r3, #40]	; 0x28
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	1e5a      	subs	r2, r3, #1
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	2201      	movs	r2, #1
 8005c94:	409a      	lsls	r2, r3
 8005c96:	4b38      	ldr	r3, [pc, #224]	; (8005d78 <xTaskIncrementTick+0x218>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	4a36      	ldr	r2, [pc, #216]	; (8005d78 <xTaskIncrementTick+0x218>)
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca4:	4935      	ldr	r1, [pc, #212]	; (8005d7c <xTaskIncrementTick+0x21c>)
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	440b      	add	r3, r1
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	60bb      	str	r3, [r7, #8]
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	609a      	str	r2, [r3, #8]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	60da      	str	r2, [r3, #12]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	3204      	adds	r2, #4
 8005ccc:	605a      	str	r2, [r3, #4]
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	1d1a      	adds	r2, r3, #4
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	609a      	str	r2, [r3, #8]
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cda:	4613      	mov	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4a26      	ldr	r2, [pc, #152]	; (8005d7c <xTaskIncrementTick+0x21c>)
 8005ce4:	441a      	add	r2, r3
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	615a      	str	r2, [r3, #20]
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cee:	4923      	ldr	r1, [pc, #140]	; (8005d7c <xTaskIncrementTick+0x21c>)
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	1c59      	adds	r1, r3, #1
 8005cfe:	481f      	ldr	r0, [pc, #124]	; (8005d7c <xTaskIncrementTick+0x21c>)
 8005d00:	4613      	mov	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4403      	add	r3, r0
 8005d0a:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d10:	4b1b      	ldr	r3, [pc, #108]	; (8005d80 <xTaskIncrementTick+0x220>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d16:	429a      	cmp	r2, r3
 8005d18:	f4ff af5d 	bcc.w	8005bd6 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d20:	e759      	b.n	8005bd6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d22:	4b17      	ldr	r3, [pc, #92]	; (8005d80 <xTaskIncrementTick+0x220>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d28:	4914      	ldr	r1, [pc, #80]	; (8005d7c <xTaskIncrementTick+0x21c>)
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d901      	bls.n	8005d3e <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005d3e:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <xTaskIncrementTick+0x224>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d007      	beq.n	8005d56 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8005d46:	2301      	movs	r3, #1
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
 8005d4a:	e004      	b.n	8005d56 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005d4c:	4b0e      	ldr	r3, [pc, #56]	; (8005d88 <xTaskIncrementTick+0x228>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3301      	adds	r3, #1
 8005d52:	4a0d      	ldr	r2, [pc, #52]	; (8005d88 <xTaskIncrementTick+0x228>)
 8005d54:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3728      	adds	r7, #40	; 0x28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	20005394 	.word	0x20005394
 8005d64:	20005370 	.word	0x20005370
 8005d68:	20005324 	.word	0x20005324
 8005d6c:	20005328 	.word	0x20005328
 8005d70:	20005384 	.word	0x20005384
 8005d74:	2000538c 	.word	0x2000538c
 8005d78:	20005374 	.word	0x20005374
 8005d7c:	2000516c 	.word	0x2000516c
 8005d80:	20005168 	.word	0x20005168
 8005d84:	20005380 	.word	0x20005380
 8005d88:	2000537c 	.word	0x2000537c

08005d8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d92:	4b27      	ldr	r3, [pc, #156]	; (8005e30 <vTaskSwitchContext+0xa4>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005d9a:	4b26      	ldr	r3, [pc, #152]	; (8005e34 <vTaskSwitchContext+0xa8>)
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005da0:	e03f      	b.n	8005e22 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005da2:	4b24      	ldr	r3, [pc, #144]	; (8005e34 <vTaskSwitchContext+0xa8>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005da8:	4b23      	ldr	r3, [pc, #140]	; (8005e38 <vTaskSwitchContext+0xac>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	fab3 f383 	clz	r3, r3
 8005db4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005db6:	7afb      	ldrb	r3, [r7, #11]
 8005db8:	f1c3 031f 	rsb	r3, r3, #31
 8005dbc:	617b      	str	r3, [r7, #20]
 8005dbe:	491f      	ldr	r1, [pc, #124]	; (8005e3c <vTaskSwitchContext+0xb0>)
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10a      	bne.n	8005de8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	607b      	str	r3, [r7, #4]
    }
 8005de4:	bf00      	nop
 8005de6:	e7fe      	b.n	8005de6 <vTaskSwitchContext+0x5a>
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4613      	mov	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4a12      	ldr	r2, [pc, #72]	; (8005e3c <vTaskSwitchContext+0xb0>)
 8005df4:	4413      	add	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	605a      	str	r2, [r3, #4]
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	3308      	adds	r3, #8
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d104      	bne.n	8005e18 <vTaskSwitchContext+0x8c>
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	605a      	str	r2, [r3, #4]
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	4a08      	ldr	r2, [pc, #32]	; (8005e40 <vTaskSwitchContext+0xb4>)
 8005e20:	6013      	str	r3, [r2, #0]
}
 8005e22:	bf00      	nop
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	20005394 	.word	0x20005394
 8005e34:	20005380 	.word	0x20005380
 8005e38:	20005374 	.word	0x20005374
 8005e3c:	2000516c 	.word	0x2000516c
 8005e40:	20005168 	.word	0x20005168

08005e44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	60fb      	str	r3, [r7, #12]
    }
 8005e66:	bf00      	nop
 8005e68:	e7fe      	b.n	8005e68 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e6a:	4b07      	ldr	r3, [pc, #28]	; (8005e88 <vTaskPlaceOnEventList+0x44>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3318      	adds	r3, #24
 8005e70:	4619      	mov	r1, r3
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fd fa3d 	bl	80032f2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e78:	2101      	movs	r1, #1
 8005e7a:	6838      	ldr	r0, [r7, #0]
 8005e7c:	f000 fc88 	bl	8006790 <prvAddCurrentTaskToDelayedList>
}
 8005e80:	bf00      	nop
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20005168 	.word	0x20005168

08005e8c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10a      	bne.n	8005eb4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	613b      	str	r3, [r7, #16]
    }
 8005eb0:	bf00      	nop
 8005eb2:	e7fe      	b.n	8005eb2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	4b16      	ldr	r3, [pc, #88]	; (8005f14 <vTaskPlaceOnEventListRestricted+0x88>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	61da      	str	r2, [r3, #28]
 8005ec2:	4b14      	ldr	r3, [pc, #80]	; (8005f14 <vTaskPlaceOnEventListRestricted+0x88>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	6892      	ldr	r2, [r2, #8]
 8005eca:	621a      	str	r2, [r3, #32]
 8005ecc:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <vTaskPlaceOnEventListRestricted+0x88>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	3218      	adds	r2, #24
 8005ed6:	605a      	str	r2, [r3, #4]
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	; (8005f14 <vTaskPlaceOnEventListRestricted+0x88>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f103 0218 	add.w	r2, r3, #24
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	609a      	str	r2, [r3, #8]
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <vTaskPlaceOnEventListRestricted+0x88>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	629a      	str	r2, [r3, #40]	; 0x28
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8005efc:	f04f 33ff 	mov.w	r3, #4294967295
 8005f00:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	68b8      	ldr	r0, [r7, #8]
 8005f06:	f000 fc43 	bl	8006790 <prvAddCurrentTaskToDelayedList>
    }
 8005f0a:	bf00      	nop
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20005168 	.word	0x20005168

08005f18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b08b      	sub	sp, #44	; 0x2c
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10a      	bne.n	8005f44 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	60fb      	str	r3, [r7, #12]
    }
 8005f40:	bf00      	nop
 8005f42:	e7fe      	b.n	8005f42 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f48:	61fb      	str	r3, [r7, #28]
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	6a3a      	ldr	r2, [r7, #32]
 8005f50:	6a12      	ldr	r2, [r2, #32]
 8005f52:	609a      	str	r2, [r3, #8]
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	6a3a      	ldr	r2, [r7, #32]
 8005f5a:	69d2      	ldr	r2, [r2, #28]
 8005f5c:	605a      	str	r2, [r3, #4]
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	3318      	adds	r3, #24
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d103      	bne.n	8005f72 <xTaskRemoveFromEventList+0x5a>
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	6a1a      	ldr	r2, [r3, #32]
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	605a      	str	r2, [r3, #4]
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	2200      	movs	r2, #0
 8005f76:	629a      	str	r2, [r3, #40]	; 0x28
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	1e5a      	subs	r2, r3, #1
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f82:	4b4a      	ldr	r3, [pc, #296]	; (80060ac <xTaskRemoveFromEventList+0x194>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d15e      	bne.n	8006048 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	6a3a      	ldr	r2, [r7, #32]
 8005f96:	68d2      	ldr	r2, [r2, #12]
 8005f98:	609a      	str	r2, [r3, #8]
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	6a3a      	ldr	r2, [r7, #32]
 8005fa0:	6892      	ldr	r2, [r2, #8]
 8005fa2:	605a      	str	r2, [r3, #4]
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	3304      	adds	r3, #4
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d103      	bne.n	8005fb8 <xTaskRemoveFromEventList+0xa0>
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	605a      	str	r2, [r3, #4]
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	615a      	str	r2, [r3, #20]
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	1e5a      	subs	r2, r3, #1
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	2201      	movs	r2, #1
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	4b37      	ldr	r3, [pc, #220]	; (80060b0 <xTaskRemoveFromEventList+0x198>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	4a36      	ldr	r2, [pc, #216]	; (80060b0 <xTaskRemoveFromEventList+0x198>)
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fde:	4935      	ldr	r1, [pc, #212]	; (80060b4 <xTaskRemoveFromEventList+0x19c>)
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	440b      	add	r3, r1
 8005fea:	3304      	adds	r3, #4
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	613b      	str	r3, [r7, #16]
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	609a      	str	r2, [r3, #8]
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	60da      	str	r2, [r3, #12]
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	6a3a      	ldr	r2, [r7, #32]
 8006004:	3204      	adds	r2, #4
 8006006:	605a      	str	r2, [r3, #4]
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	1d1a      	adds	r2, r3, #4
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	609a      	str	r2, [r3, #8]
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4a25      	ldr	r2, [pc, #148]	; (80060b4 <xTaskRemoveFromEventList+0x19c>)
 800601e:	441a      	add	r2, r3
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	615a      	str	r2, [r3, #20]
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006028:	4922      	ldr	r1, [pc, #136]	; (80060b4 <xTaskRemoveFromEventList+0x19c>)
 800602a:	4613      	mov	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	440b      	add	r3, r1
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	1c59      	adds	r1, r3, #1
 8006038:	481e      	ldr	r0, [pc, #120]	; (80060b4 <xTaskRemoveFromEventList+0x19c>)
 800603a:	4613      	mov	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4403      	add	r3, r0
 8006044:	6019      	str	r1, [r3, #0]
 8006046:	e01b      	b.n	8006080 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006048:	4b1b      	ldr	r3, [pc, #108]	; (80060b8 <xTaskRemoveFromEventList+0x1a0>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	61bb      	str	r3, [r7, #24]
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	61da      	str	r2, [r3, #28]
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	621a      	str	r2, [r3, #32]
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	6a3a      	ldr	r2, [r7, #32]
 8006062:	3218      	adds	r2, #24
 8006064:	605a      	str	r2, [r3, #4]
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	f103 0218 	add.w	r2, r3, #24
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	609a      	str	r2, [r3, #8]
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	4a11      	ldr	r2, [pc, #68]	; (80060b8 <xTaskRemoveFromEventList+0x1a0>)
 8006074:	629a      	str	r2, [r3, #40]	; 0x28
 8006076:	4b10      	ldr	r3, [pc, #64]	; (80060b8 <xTaskRemoveFromEventList+0x1a0>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3301      	adds	r3, #1
 800607c:	4a0e      	ldr	r2, [pc, #56]	; (80060b8 <xTaskRemoveFromEventList+0x1a0>)
 800607e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006084:	4b0d      	ldr	r3, [pc, #52]	; (80060bc <xTaskRemoveFromEventList+0x1a4>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	429a      	cmp	r2, r3
 800608c:	d905      	bls.n	800609a <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800608e:	2301      	movs	r3, #1
 8006090:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006092:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <xTaskRemoveFromEventList+0x1a8>)
 8006094:	2201      	movs	r2, #1
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	e001      	b.n	800609e <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800609a:	2300      	movs	r3, #0
 800609c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	372c      	adds	r7, #44	; 0x2c
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	20005394 	.word	0x20005394
 80060b0:	20005374 	.word	0x20005374
 80060b4:	2000516c 	.word	0x2000516c
 80060b8:	2000532c 	.word	0x2000532c
 80060bc:	20005168 	.word	0x20005168
 80060c0:	20005380 	.word	0x20005380

080060c4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060cc:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <vTaskInternalSetTimeOutState+0x24>)
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <vTaskInternalSetTimeOutState+0x28>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	605a      	str	r2, [r3, #4]
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	20005384 	.word	0x20005384
 80060ec:	20005370 	.word	0x20005370

080060f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	613b      	str	r3, [r7, #16]
    }
 8006112:	bf00      	nop
 8006114:	e7fe      	b.n	8006114 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10a      	bne.n	8006132 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	60fb      	str	r3, [r7, #12]
    }
 800612e:	bf00      	nop
 8006130:	e7fe      	b.n	8006130 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006132:	f7fd ffc1 	bl	80040b8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006136:	4b1f      	ldr	r3, [pc, #124]	; (80061b4 <xTaskCheckForTimeOut+0xc4>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d102      	bne.n	8006156 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006150:	2300      	movs	r3, #0
 8006152:	61fb      	str	r3, [r7, #28]
 8006154:	e026      	b.n	80061a4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	4b17      	ldr	r3, [pc, #92]	; (80061b8 <xTaskCheckForTimeOut+0xc8>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	429a      	cmp	r2, r3
 8006160:	d00a      	beq.n	8006178 <xTaskCheckForTimeOut+0x88>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	429a      	cmp	r2, r3
 800616a:	d305      	bcc.n	8006178 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800616c:	2301      	movs	r3, #1
 800616e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	e015      	b.n	80061a4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	429a      	cmp	r2, r3
 8006180:	d20b      	bcs.n	800619a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	1ad2      	subs	r2, r2, r3
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff ff98 	bl	80060c4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006194:	2300      	movs	r3, #0
 8006196:	61fb      	str	r3, [r7, #28]
 8006198:	e004      	b.n	80061a4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80061a0:	2301      	movs	r3, #1
 80061a2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80061a4:	f7fd ffb8 	bl	8004118 <vPortExitCritical>

    return xReturn;
 80061a8:	69fb      	ldr	r3, [r7, #28]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3720      	adds	r7, #32
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20005370 	.word	0x20005370
 80061b8:	20005384 	.word	0x20005384

080061bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80061c0:	4b03      	ldr	r3, [pc, #12]	; (80061d0 <vTaskMissedYield+0x14>)
 80061c2:	2201      	movs	r2, #1
 80061c4:	601a      	str	r2, [r3, #0]
}
 80061c6:	bf00      	nop
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	20005380 	.word	0x20005380

080061d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80061dc:	f000 f852 	bl	8006284 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061e0:	4b06      	ldr	r3, [pc, #24]	; (80061fc <prvIdleTask+0x28>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d9f9      	bls.n	80061dc <prvIdleTask+0x8>
                {
                    taskYIELD();
 80061e8:	4b05      	ldr	r3, [pc, #20]	; (8006200 <prvIdleTask+0x2c>)
 80061ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80061f8:	e7f0      	b.n	80061dc <prvIdleTask+0x8>
 80061fa:	bf00      	nop
 80061fc:	2000516c 	.word	0x2000516c
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800620a:	2300      	movs	r3, #0
 800620c:	607b      	str	r3, [r7, #4]
 800620e:	e00c      	b.n	800622a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	4613      	mov	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4a12      	ldr	r2, [pc, #72]	; (8006264 <prvInitialiseTaskLists+0x60>)
 800621c:	4413      	add	r3, r2
 800621e:	4618      	mov	r0, r3
 8006220:	f7fd f816 	bl	8003250 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3301      	adds	r3, #1
 8006228:	607b      	str	r3, [r7, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b13      	cmp	r3, #19
 800622e:	d9ef      	bls.n	8006210 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006230:	480d      	ldr	r0, [pc, #52]	; (8006268 <prvInitialiseTaskLists+0x64>)
 8006232:	f7fd f80d 	bl	8003250 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006236:	480d      	ldr	r0, [pc, #52]	; (800626c <prvInitialiseTaskLists+0x68>)
 8006238:	f7fd f80a 	bl	8003250 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800623c:	480c      	ldr	r0, [pc, #48]	; (8006270 <prvInitialiseTaskLists+0x6c>)
 800623e:	f7fd f807 	bl	8003250 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006242:	480c      	ldr	r0, [pc, #48]	; (8006274 <prvInitialiseTaskLists+0x70>)
 8006244:	f7fd f804 	bl	8003250 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006248:	480b      	ldr	r0, [pc, #44]	; (8006278 <prvInitialiseTaskLists+0x74>)
 800624a:	f7fd f801 	bl	8003250 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800624e:	4b0b      	ldr	r3, [pc, #44]	; (800627c <prvInitialiseTaskLists+0x78>)
 8006250:	4a05      	ldr	r2, [pc, #20]	; (8006268 <prvInitialiseTaskLists+0x64>)
 8006252:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006254:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <prvInitialiseTaskLists+0x7c>)
 8006256:	4a05      	ldr	r2, [pc, #20]	; (800626c <prvInitialiseTaskLists+0x68>)
 8006258:	601a      	str	r2, [r3, #0]
}
 800625a:	bf00      	nop
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	2000516c 	.word	0x2000516c
 8006268:	200052fc 	.word	0x200052fc
 800626c:	20005310 	.word	0x20005310
 8006270:	2000532c 	.word	0x2000532c
 8006274:	20005340 	.word	0x20005340
 8006278:	20005358 	.word	0x20005358
 800627c:	20005324 	.word	0x20005324
 8006280:	20005328 	.word	0x20005328

08006284 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800628a:	e019      	b.n	80062c0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800628c:	f7fd ff14 	bl	80040b8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006290:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <prvCheckTasksWaitingTermination+0x50>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3304      	adds	r3, #4
 800629c:	4618      	mov	r0, r3
 800629e:	f7fd f861 	bl	8003364 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80062a2:	4b0d      	ldr	r3, [pc, #52]	; (80062d8 <prvCheckTasksWaitingTermination+0x54>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	4a0b      	ldr	r2, [pc, #44]	; (80062d8 <prvCheckTasksWaitingTermination+0x54>)
 80062aa:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80062ac:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <prvCheckTasksWaitingTermination+0x58>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <prvCheckTasksWaitingTermination+0x58>)
 80062b4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80062b6:	f7fd ff2f 	bl	8004118 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f810 	bl	80062e0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062c0:	4b06      	ldr	r3, [pc, #24]	; (80062dc <prvCheckTasksWaitingTermination+0x58>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e1      	bne.n	800628c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80062c8:	bf00      	nop
 80062ca:	bf00      	nop
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20005340 	.word	0x20005340
 80062d8:	2000536c 	.word	0x2000536c
 80062dc:	20005354 	.word	0x20005354

080062e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fc fe91 	bl	8003014 <vPortFree>
                vPortFree( pxTCB );
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fc fe8e 	bl	8003014 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80062f8:	bf00      	nop
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006304:	4b0a      	ldr	r3, [pc, #40]	; (8006330 <prvResetNextTaskUnblockTime+0x30>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d104      	bne.n	8006318 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800630e:	4b09      	ldr	r3, [pc, #36]	; (8006334 <prvResetNextTaskUnblockTime+0x34>)
 8006310:	f04f 32ff 	mov.w	r2, #4294967295
 8006314:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006316:	e005      	b.n	8006324 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006318:	4b05      	ldr	r3, [pc, #20]	; (8006330 <prvResetNextTaskUnblockTime+0x30>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a04      	ldr	r2, [pc, #16]	; (8006334 <prvResetNextTaskUnblockTime+0x34>)
 8006322:	6013      	str	r3, [r2, #0]
}
 8006324:	bf00      	nop
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	20005324 	.word	0x20005324
 8006334:	2000538c 	.word	0x2000538c

08006338 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800633e:	4b0b      	ldr	r3, [pc, #44]	; (800636c <xTaskGetSchedulerState+0x34>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d102      	bne.n	800634c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006346:	2301      	movs	r3, #1
 8006348:	607b      	str	r3, [r7, #4]
 800634a:	e008      	b.n	800635e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800634c:	4b08      	ldr	r3, [pc, #32]	; (8006370 <xTaskGetSchedulerState+0x38>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d102      	bne.n	800635a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006354:	2302      	movs	r3, #2
 8006356:	607b      	str	r3, [r7, #4]
 8006358:	e001      	b.n	800635e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800635a:	2300      	movs	r3, #0
 800635c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800635e:	687b      	ldr	r3, [r7, #4]
    }
 8006360:	4618      	mov	r0, r3
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	20005378 	.word	0x20005378
 8006370:	20005394 	.word	0x20005394

08006374 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006380:	2300      	movs	r3, #0
 8006382:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 8087 	beq.w	800649a <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006390:	4b44      	ldr	r3, [pc, #272]	; (80064a4 <xTaskPriorityInherit+0x130>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006396:	429a      	cmp	r2, r3
 8006398:	d276      	bcs.n	8006488 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	db06      	blt.n	80063b0 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063a2:	4b40      	ldr	r3, [pc, #256]	; (80064a4 <xTaskPriorityInherit+0x130>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	f1c3 0214 	rsb	r2, r3, #20
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	6959      	ldr	r1, [r3, #20]
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4a39      	ldr	r2, [pc, #228]	; (80064a8 <xTaskPriorityInherit+0x134>)
 80063c2:	4413      	add	r3, r2
 80063c4:	4299      	cmp	r1, r3
 80063c6:	d157      	bne.n	8006478 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	3304      	adds	r3, #4
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fc ffc9 	bl	8003364 <uxListRemove>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10a      	bne.n	80063ee <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	2201      	movs	r2, #1
 80063de:	fa02 f303 	lsl.w	r3, r2, r3
 80063e2:	43da      	mvns	r2, r3
 80063e4:	4b31      	ldr	r3, [pc, #196]	; (80064ac <xTaskPriorityInherit+0x138>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4013      	ands	r3, r2
 80063ea:	4a30      	ldr	r2, [pc, #192]	; (80064ac <xTaskPriorityInherit+0x138>)
 80063ec:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80063ee:	4b2d      	ldr	r3, [pc, #180]	; (80064a4 <xTaskPriorityInherit+0x130>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	2201      	movs	r2, #1
 80063fe:	409a      	lsls	r2, r3
 8006400:	4b2a      	ldr	r3, [pc, #168]	; (80064ac <xTaskPriorityInherit+0x138>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4313      	orrs	r3, r2
 8006406:	4a29      	ldr	r2, [pc, #164]	; (80064ac <xTaskPriorityInherit+0x138>)
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640e:	4926      	ldr	r1, [pc, #152]	; (80064a8 <xTaskPriorityInherit+0x134>)
 8006410:	4613      	mov	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	440b      	add	r3, r1
 800641a:	3304      	adds	r3, #4
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	609a      	str	r2, [r3, #8]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	60da      	str	r2, [r3, #12]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	3204      	adds	r2, #4
 8006436:	605a      	str	r2, [r3, #4]
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	1d1a      	adds	r2, r3, #4
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	609a      	str	r2, [r3, #8]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006444:	4613      	mov	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4a16      	ldr	r2, [pc, #88]	; (80064a8 <xTaskPriorityInherit+0x134>)
 800644e:	441a      	add	r2, r3
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	615a      	str	r2, [r3, #20]
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006458:	4913      	ldr	r1, [pc, #76]	; (80064a8 <xTaskPriorityInherit+0x134>)
 800645a:	4613      	mov	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	440b      	add	r3, r1
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	1c59      	adds	r1, r3, #1
 8006468:	480f      	ldr	r0, [pc, #60]	; (80064a8 <xTaskPriorityInherit+0x134>)
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4403      	add	r3, r0
 8006474:	6019      	str	r1, [r3, #0]
 8006476:	e004      	b.n	8006482 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006478:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <xTaskPriorityInherit+0x130>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8006482:	2301      	movs	r3, #1
 8006484:	617b      	str	r3, [r7, #20]
 8006486:	e008      	b.n	800649a <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <xTaskPriorityInherit+0x130>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006492:	429a      	cmp	r2, r3
 8006494:	d201      	bcs.n	800649a <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8006496:	2301      	movs	r3, #1
 8006498:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800649a:	697b      	ldr	r3, [r7, #20]
    }
 800649c:	4618      	mov	r0, r3
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	20005168 	.word	0x20005168
 80064a8:	2000516c 	.word	0x2000516c
 80064ac:	20005374 	.word	0x20005374

080064b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80064bc:	2300      	movs	r3, #0
 80064be:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 808c 	beq.w	80065e0 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80064c8:	4b48      	ldr	r3, [pc, #288]	; (80065ec <xTaskPriorityDisinherit+0x13c>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d00a      	beq.n	80064e8 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	613b      	str	r3, [r7, #16]
    }
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10a      	bne.n	8006506 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	60fb      	str	r3, [r7, #12]
    }
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650a:	1e5a      	subs	r2, r3, #1
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	659a      	str	r2, [r3, #88]	; 0x58

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006518:	429a      	cmp	r2, r3
 800651a:	d061      	beq.n	80065e0 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006520:	2b00      	cmp	r3, #0
 8006522:	d15d      	bne.n	80065e0 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	3304      	adds	r3, #4
 8006528:	4618      	mov	r0, r3
 800652a:	f7fc ff1b 	bl	8003364 <uxListRemove>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10a      	bne.n	800654a <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	2201      	movs	r2, #1
 800653a:	fa02 f303 	lsl.w	r3, r2, r3
 800653e:	43da      	mvns	r2, r3
 8006540:	4b2b      	ldr	r3, [pc, #172]	; (80065f0 <xTaskPriorityDisinherit+0x140>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4013      	ands	r3, r2
 8006546:	4a2a      	ldr	r2, [pc, #168]	; (80065f0 <xTaskPriorityDisinherit+0x140>)
 8006548:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	f1c3 0214 	rsb	r2, r3, #20
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006562:	2201      	movs	r2, #1
 8006564:	409a      	lsls	r2, r3
 8006566:	4b22      	ldr	r3, [pc, #136]	; (80065f0 <xTaskPriorityDisinherit+0x140>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4313      	orrs	r3, r2
 800656c:	4a20      	ldr	r2, [pc, #128]	; (80065f0 <xTaskPriorityDisinherit+0x140>)
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006574:	491f      	ldr	r1, [pc, #124]	; (80065f4 <xTaskPriorityDisinherit+0x144>)
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	440b      	add	r3, r1
 8006580:	3304      	adds	r3, #4
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	609a      	str	r2, [r3, #8]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	60da      	str	r2, [r3, #12]
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	3204      	adds	r2, #4
 800659c:	605a      	str	r2, [r3, #4]
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	1d1a      	adds	r2, r3, #4
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	609a      	str	r2, [r3, #8]
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065aa:	4613      	mov	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4a10      	ldr	r2, [pc, #64]	; (80065f4 <xTaskPriorityDisinherit+0x144>)
 80065b4:	441a      	add	r2, r3
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	615a      	str	r2, [r3, #20]
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065be:	490d      	ldr	r1, [pc, #52]	; (80065f4 <xTaskPriorityDisinherit+0x144>)
 80065c0:	4613      	mov	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	440b      	add	r3, r1
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	1c59      	adds	r1, r3, #1
 80065ce:	4809      	ldr	r0, [pc, #36]	; (80065f4 <xTaskPriorityDisinherit+0x144>)
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4403      	add	r3, r0
 80065da:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80065dc:	2301      	movs	r3, #1
 80065de:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80065e0:	69fb      	ldr	r3, [r7, #28]
    }
 80065e2:	4618      	mov	r0, r3
 80065e4:	3720      	adds	r7, #32
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	20005168 	.word	0x20005168
 80065f0:	20005374 	.word	0x20005374
 80065f4:	2000516c 	.word	0x2000516c

080065f8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08a      	sub	sp, #40	; 0x28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006606:	2301      	movs	r3, #1
 8006608:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 80a1 	beq.w	8006754 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10a      	bne.n	8006630 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	613b      	str	r3, [r7, #16]
    }
 800662c:	bf00      	nop
 800662e:	e7fe      	b.n	800662e <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d902      	bls.n	8006640 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
 800663e:	e002      	b.n	8006646 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664c:	429a      	cmp	r2, r3
 800664e:	f000 8081 	beq.w	8006754 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006656:	69fa      	ldr	r2, [r7, #28]
 8006658:	429a      	cmp	r2, r3
 800665a:	d17b      	bne.n	8006754 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800665c:	4b3f      	ldr	r3, [pc, #252]	; (800675c <vTaskPriorityDisinheritAfterTimeout+0x164>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6a3a      	ldr	r2, [r7, #32]
 8006662:	429a      	cmp	r2, r3
 8006664:	d10a      	bne.n	800667c <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	60fb      	str	r3, [r7, #12]
    }
 8006678:	bf00      	nop
 800667a:	e7fe      	b.n	800667a <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006680:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006686:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	2b00      	cmp	r3, #0
 800668e:	db04      	blt.n	800669a <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	f1c3 0214 	rsb	r2, r3, #20
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	6959      	ldr	r1, [r3, #20]
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	4613      	mov	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4a2d      	ldr	r2, [pc, #180]	; (8006760 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80066aa:	4413      	add	r3, r2
 80066ac:	4299      	cmp	r1, r3
 80066ae:	d151      	bne.n	8006754 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fc fe55 	bl	8003364 <uxListRemove>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10a      	bne.n	80066d6 <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c4:	2201      	movs	r2, #1
 80066c6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ca:	43da      	mvns	r2, r3
 80066cc:	4b25      	ldr	r3, [pc, #148]	; (8006764 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4013      	ands	r3, r2
 80066d2:	4a24      	ldr	r2, [pc, #144]	; (8006764 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80066d4:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066da:	2201      	movs	r2, #1
 80066dc:	409a      	lsls	r2, r3
 80066de:	4b21      	ldr	r3, [pc, #132]	; (8006764 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	4a1f      	ldr	r2, [pc, #124]	; (8006764 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80066e6:	6013      	str	r3, [r2, #0]
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ec:	491c      	ldr	r1, [pc, #112]	; (8006760 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80066ee:	4613      	mov	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	440b      	add	r3, r1
 80066f8:	3304      	adds	r3, #4
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	609a      	str	r2, [r3, #8]
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	60da      	str	r2, [r3, #12]
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	6a3a      	ldr	r2, [r7, #32]
 8006712:	3204      	adds	r2, #4
 8006714:	605a      	str	r2, [r3, #4]
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	1d1a      	adds	r2, r3, #4
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	609a      	str	r2, [r3, #8]
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4a0d      	ldr	r2, [pc, #52]	; (8006760 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800672c:	441a      	add	r2, r3
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	615a      	str	r2, [r3, #20]
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006736:	490a      	ldr	r1, [pc, #40]	; (8006760 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8006738:	4613      	mov	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	440b      	add	r3, r1
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	1c59      	adds	r1, r3, #1
 8006746:	4806      	ldr	r0, [pc, #24]	; (8006760 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8006748:	4613      	mov	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4403      	add	r3, r0
 8006752:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8006754:	bf00      	nop
 8006756:	3728      	adds	r7, #40	; 0x28
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	20005168 	.word	0x20005168
 8006760:	2000516c 	.word	0x2000516c
 8006764:	20005374 	.word	0x20005374

08006768 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8006768:	b480      	push	{r7}
 800676a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800676c:	4b07      	ldr	r3, [pc, #28]	; (800678c <pvTaskIncrementMutexHeldCount+0x24>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d004      	beq.n	800677e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8006774:	4b05      	ldr	r3, [pc, #20]	; (800678c <pvTaskIncrementMutexHeldCount+0x24>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800677a:	3201      	adds	r2, #1
 800677c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        return pxCurrentTCB;
 800677e:	4b03      	ldr	r3, [pc, #12]	; (800678c <pvTaskIncrementMutexHeldCount+0x24>)
 8006780:	681b      	ldr	r3, [r3, #0]
    }
 8006782:	4618      	mov	r0, r3
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	20005168 	.word	0x20005168

08006790 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800679a:	4b36      	ldr	r3, [pc, #216]	; (8006874 <prvAddCurrentTaskToDelayedList+0xe4>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067a0:	4b35      	ldr	r3, [pc, #212]	; (8006878 <prvAddCurrentTaskToDelayedList+0xe8>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3304      	adds	r3, #4
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fc fddc 	bl	8003364 <uxListRemove>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10b      	bne.n	80067ca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80067b2:	4b31      	ldr	r3, [pc, #196]	; (8006878 <prvAddCurrentTaskToDelayedList+0xe8>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	2201      	movs	r2, #1
 80067ba:	fa02 f303 	lsl.w	r3, r2, r3
 80067be:	43da      	mvns	r2, r3
 80067c0:	4b2e      	ldr	r3, [pc, #184]	; (800687c <prvAddCurrentTaskToDelayedList+0xec>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4013      	ands	r3, r2
 80067c6:	4a2d      	ldr	r2, [pc, #180]	; (800687c <prvAddCurrentTaskToDelayedList+0xec>)
 80067c8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d0:	d124      	bne.n	800681c <prvAddCurrentTaskToDelayedList+0x8c>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d021      	beq.n	800681c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067d8:	4b29      	ldr	r3, [pc, #164]	; (8006880 <prvAddCurrentTaskToDelayedList+0xf0>)
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	613b      	str	r3, [r7, #16]
 80067de:	4b26      	ldr	r3, [pc, #152]	; (8006878 <prvAddCurrentTaskToDelayedList+0xe8>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	609a      	str	r2, [r3, #8]
 80067e6:	4b24      	ldr	r3, [pc, #144]	; (8006878 <prvAddCurrentTaskToDelayedList+0xe8>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	6892      	ldr	r2, [r2, #8]
 80067ee:	60da      	str	r2, [r3, #12]
 80067f0:	4b21      	ldr	r3, [pc, #132]	; (8006878 <prvAddCurrentTaskToDelayedList+0xe8>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	3204      	adds	r2, #4
 80067fa:	605a      	str	r2, [r3, #4]
 80067fc:	4b1e      	ldr	r3, [pc, #120]	; (8006878 <prvAddCurrentTaskToDelayedList+0xe8>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	1d1a      	adds	r2, r3, #4
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	609a      	str	r2, [r3, #8]
 8006806:	4b1c      	ldr	r3, [pc, #112]	; (8006878 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a1d      	ldr	r2, [pc, #116]	; (8006880 <prvAddCurrentTaskToDelayedList+0xf0>)
 800680c:	615a      	str	r2, [r3, #20]
 800680e:	4b1c      	ldr	r3, [pc, #112]	; (8006880 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3301      	adds	r3, #1
 8006814:	4a1a      	ldr	r2, [pc, #104]	; (8006880 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800681a:	e026      	b.n	800686a <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4413      	add	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006824:	4b14      	ldr	r3, [pc, #80]	; (8006878 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	429a      	cmp	r2, r3
 8006832:	d209      	bcs.n	8006848 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006834:	4b13      	ldr	r3, [pc, #76]	; (8006884 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <prvAddCurrentTaskToDelayedList+0xe8>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3304      	adds	r3, #4
 800683e:	4619      	mov	r1, r3
 8006840:	4610      	mov	r0, r2
 8006842:	f7fc fd56 	bl	80032f2 <vListInsert>
}
 8006846:	e010      	b.n	800686a <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006848:	4b0f      	ldr	r3, [pc, #60]	; (8006888 <prvAddCurrentTaskToDelayedList+0xf8>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <prvAddCurrentTaskToDelayedList+0xe8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3304      	adds	r3, #4
 8006852:	4619      	mov	r1, r3
 8006854:	4610      	mov	r0, r2
 8006856:	f7fc fd4c 	bl	80032f2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800685a:	4b0c      	ldr	r3, [pc, #48]	; (800688c <prvAddCurrentTaskToDelayedList+0xfc>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	429a      	cmp	r2, r3
 8006862:	d202      	bcs.n	800686a <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8006864:	4a09      	ldr	r2, [pc, #36]	; (800688c <prvAddCurrentTaskToDelayedList+0xfc>)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6013      	str	r3, [r2, #0]
}
 800686a:	bf00      	nop
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20005370 	.word	0x20005370
 8006878:	20005168 	.word	0x20005168
 800687c:	20005374 	.word	0x20005374
 8006880:	20005358 	.word	0x20005358
 8006884:	20005328 	.word	0x20005328
 8006888:	20005324 	.word	0x20005324
 800688c:	2000538c 	.word	0x2000538c

08006890 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006896:	2300      	movs	r3, #0
 8006898:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800689a:	f000 faef 	bl	8006e7c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800689e:	4b11      	ldr	r3, [pc, #68]	; (80068e4 <xTimerCreateTimerTask+0x54>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <xTimerCreateTimerTask+0x2c>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80068a6:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <xTimerCreateTimerTask+0x58>)
 80068a8:	9301      	str	r3, [sp, #4]
 80068aa:	2303      	movs	r3, #3
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	2300      	movs	r3, #0
 80068b0:	2280      	movs	r2, #128	; 0x80
 80068b2:	490e      	ldr	r1, [pc, #56]	; (80068ec <xTimerCreateTimerTask+0x5c>)
 80068b4:	480e      	ldr	r0, [pc, #56]	; (80068f0 <xTimerCreateTimerTask+0x60>)
 80068b6:	f7fe fd20 	bl	80052fa <xTaskCreate>
 80068ba:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10a      	bne.n	80068d8 <xTimerCreateTimerTask+0x48>
        __asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	603b      	str	r3, [r7, #0]
    }
 80068d4:	bf00      	nop
 80068d6:	e7fe      	b.n	80068d6 <xTimerCreateTimerTask+0x46>
        return xReturn;
 80068d8:	687b      	ldr	r3, [r7, #4]
    }
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	200053c8 	.word	0x200053c8
 80068e8:	200053cc 	.word	0x200053cc
 80068ec:	08007130 	.word	0x08007130
 80068f0:	08006ae9 	.word	0x08006ae9

080068f4 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af02      	add	r7, sp, #8
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006902:	2028      	movs	r0, #40	; 0x28
 8006904:	f7fc faa6 	bl	8002e54 <pvPortMalloc>
 8006908:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00d      	beq.n	800692c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	9301      	str	r3, [sp, #4]
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	68b9      	ldr	r1, [r7, #8]
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 f805 	bl	8006936 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800692c:	697b      	ldr	r3, [r7, #20]
        }
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006936:	b580      	push	{r7, lr}
 8006938:	b086      	sub	sp, #24
 800693a:	af00      	add	r7, sp, #0
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	607a      	str	r2, [r7, #4]
 8006942:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10a      	bne.n	8006960 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	617b      	str	r3, [r7, #20]
    }
 800695c:	bf00      	nop
 800695e:	e7fe      	b.n	800695e <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8006960:	f000 fa8c 	bl	8006e7c <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	6a3a      	ldr	r2, [r7, #32]
 800697a:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	3304      	adds	r3, #4
 8006980:	4618      	mov	r0, r3
 8006982:	f7fc fc85 	bl	8003290 <vListInitialiseItem>

        if( uxAutoReload != pdFALSE )
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d008      	beq.n	800699e <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006992:	f043 0304 	orr.w	r3, r3, #4
 8006996:	b2da      	uxtb	r2, r3
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 800699e:	bf00      	nop
 80069a0:	3718      	adds	r7, #24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
	...

080069a8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	; 0x28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
 80069b4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80069b6:	2300      	movs	r3, #0
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10a      	bne.n	80069d6 <xTimerGenericCommand+0x2e>
        __asm volatile
 80069c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	623b      	str	r3, [r7, #32]
    }
 80069d2:	bf00      	nop
 80069d4:	e7fe      	b.n	80069d4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80069d6:	4b1a      	ldr	r3, [pc, #104]	; (8006a40 <xTimerGenericCommand+0x98>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d02a      	beq.n	8006a34 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2b05      	cmp	r3, #5
 80069ee:	dc18      	bgt.n	8006a22 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069f0:	f7ff fca2 	bl	8006338 <xTaskGetSchedulerState>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d109      	bne.n	8006a0e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069fa:	4b11      	ldr	r3, [pc, #68]	; (8006a40 <xTimerGenericCommand+0x98>)
 80069fc:	6818      	ldr	r0, [r3, #0]
 80069fe:	f107 0114 	add.w	r1, r7, #20
 8006a02:	2300      	movs	r3, #0
 8006a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a06:	f7fd fda1 	bl	800454c <xQueueGenericSend>
 8006a0a:	6278      	str	r0, [r7, #36]	; 0x24
 8006a0c:	e012      	b.n	8006a34 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a0e:	4b0c      	ldr	r3, [pc, #48]	; (8006a40 <xTimerGenericCommand+0x98>)
 8006a10:	6818      	ldr	r0, [r3, #0]
 8006a12:	f107 0114 	add.w	r1, r7, #20
 8006a16:	2300      	movs	r3, #0
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f7fd fd97 	bl	800454c <xQueueGenericSend>
 8006a1e:	6278      	str	r0, [r7, #36]	; 0x24
 8006a20:	e008      	b.n	8006a34 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a22:	4b07      	ldr	r3, [pc, #28]	; (8006a40 <xTimerGenericCommand+0x98>)
 8006a24:	6818      	ldr	r0, [r3, #0]
 8006a26:	f107 0114 	add.w	r1, r7, #20
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	f7fd fea7 	bl	8004780 <xQueueGenericSendFromISR>
 8006a32:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006a36:	4618      	mov	r0, r3
 8006a38:	3728      	adds	r7, #40	; 0x28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	200053c8 	.word	0x200053c8

08006a44 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006a50:	e008      	b.n	8006a64 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	4413      	add	r3, r2
 8006a5a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	699a      	ldr	r2, [r3, #24]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	18d1      	adds	r1, r2, r3
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 f8dd 	bl	8006c30 <prvInsertTimerInActiveList>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1ea      	bne.n	8006a52 <prvReloadTimer+0xe>
        }
    }
 8006a7c:	bf00      	nop
 8006a7e:	bf00      	nop
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
	...

08006a88 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a92:	4b14      	ldr	r3, [pc, #80]	; (8006ae4 <prvProcessExpiredTimer+0x5c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7fc fc5f 	bl	8003364 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006aac:	f003 0304 	and.w	r3, r3, #4
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	6879      	ldr	r1, [r7, #4]
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f7ff ffc3 	bl	8006a44 <prvReloadTimer>
 8006abe:	e008      	b.n	8006ad2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ac6:	f023 0301 	bic.w	r3, r3, #1
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	4798      	blx	r3
    }
 8006ada:	bf00      	nop
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	200053c0 	.word	0x200053c0

08006ae8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006af0:	f107 0308 	add.w	r3, r7, #8
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 f857 	bl	8006ba8 <prvGetNextExpireTime>
 8006afa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4619      	mov	r1, r3
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 f803 	bl	8006b0c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006b06:	f000 f8d5 	bl	8006cb4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b0a:	e7f1      	b.n	8006af0 <prvTimerTask+0x8>

08006b0c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006b16:	f7fe ff09 	bl	800592c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b1a:	f107 0308 	add.w	r3, r7, #8
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 f866 	bl	8006bf0 <prvSampleTimeNow>
 8006b24:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d130      	bne.n	8006b8e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <prvProcessTimerOrBlockTask+0x3c>
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d806      	bhi.n	8006b48 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006b3a:	f7fe ff05 	bl	8005948 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b3e:	68f9      	ldr	r1, [r7, #12]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7ff ffa1 	bl	8006a88 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006b46:	e024      	b.n	8006b92 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d008      	beq.n	8006b60 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b4e:	4b13      	ldr	r3, [pc, #76]	; (8006b9c <prvProcessTimerOrBlockTask+0x90>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <prvProcessTimerOrBlockTask+0x50>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e000      	b.n	8006b5e <prvProcessTimerOrBlockTask+0x52>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b60:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <prvProcessTimerOrBlockTask+0x94>)
 8006b62:	6818      	ldr	r0, [r3, #0]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	f7fe fae5 	bl	800513c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006b72:	f7fe fee9 	bl	8005948 <xTaskResumeAll>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10a      	bne.n	8006b92 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006b7c:	4b09      	ldr	r3, [pc, #36]	; (8006ba4 <prvProcessTimerOrBlockTask+0x98>)
 8006b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	f3bf 8f6f 	isb	sy
    }
 8006b8c:	e001      	b.n	8006b92 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006b8e:	f7fe fedb 	bl	8005948 <xTaskResumeAll>
    }
 8006b92:	bf00      	nop
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	200053c4 	.word	0x200053c4
 8006ba0:	200053c8 	.word	0x200053c8
 8006ba4:	e000ed04 	.word	0xe000ed04

08006ba8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006bb0:	4b0e      	ldr	r3, [pc, #56]	; (8006bec <prvGetNextExpireTime+0x44>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <prvGetNextExpireTime+0x16>
 8006bba:	2201      	movs	r2, #1
 8006bbc:	e000      	b.n	8006bc0 <prvGetNextExpireTime+0x18>
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d105      	bne.n	8006bd8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bcc:	4b07      	ldr	r3, [pc, #28]	; (8006bec <prvGetNextExpireTime+0x44>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	60fb      	str	r3, [r7, #12]
 8006bd6:	e001      	b.n	8006bdc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
    }
 8006bde:	4618      	mov	r0, r3
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	200053c0 	.word	0x200053c0

08006bf0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006bf8:	f7fe ffa2 	bl	8005b40 <xTaskGetTickCount>
 8006bfc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006bfe:	4b0b      	ldr	r3, [pc, #44]	; (8006c2c <prvSampleTimeNow+0x3c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d205      	bcs.n	8006c14 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006c08:	f000 f912 	bl	8006e30 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	e002      	b.n	8006c1a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006c1a:	4a04      	ldr	r2, [pc, #16]	; (8006c2c <prvSampleTimeNow+0x3c>)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006c20:	68fb      	ldr	r3, [r7, #12]
    }
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	200053d0 	.word	0x200053d0

08006c30 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d812      	bhi.n	8006c7c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	1ad2      	subs	r2, r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d302      	bcc.n	8006c6a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006c64:	2301      	movs	r3, #1
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	e01b      	b.n	8006ca2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c6a:	4b10      	ldr	r3, [pc, #64]	; (8006cac <prvInsertTimerInActiveList+0x7c>)
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3304      	adds	r3, #4
 8006c72:	4619      	mov	r1, r3
 8006c74:	4610      	mov	r0, r2
 8006c76:	f7fc fb3c 	bl	80032f2 <vListInsert>
 8006c7a:	e012      	b.n	8006ca2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d206      	bcs.n	8006c92 <prvInsertTimerInActiveList+0x62>
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d302      	bcc.n	8006c92 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	617b      	str	r3, [r7, #20]
 8006c90:	e007      	b.n	8006ca2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c92:	4b07      	ldr	r3, [pc, #28]	; (8006cb0 <prvInsertTimerInActiveList+0x80>)
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	f7fc fb28 	bl	80032f2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006ca2:	697b      	ldr	r3, [r7, #20]
    }
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3718      	adds	r7, #24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	200053c4 	.word	0x200053c4
 8006cb0:	200053c0 	.word	0x200053c0

08006cb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b088      	sub	sp, #32
 8006cb8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cba:	e0a6      	b.n	8006e0a <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f2c0 80a2 	blt.w	8006e08 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d004      	beq.n	8006cda <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7fc fb45 	bl	8003364 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cda:	1d3b      	adds	r3, r7, #4
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff ff87 	bl	8006bf0 <prvSampleTimeNow>
 8006ce2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	2b08      	cmp	r3, #8
 8006cea:	f200 808e 	bhi.w	8006e0a <prvProcessReceivedCommands+0x156>
 8006cee:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <prvProcessReceivedCommands+0x40>)
 8006cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d19 	.word	0x08006d19
 8006cfc:	08006d81 	.word	0x08006d81
 8006d00:	08006d95 	.word	0x08006d95
 8006d04:	08006ddf 	.word	0x08006ddf
 8006d08:	08006d19 	.word	0x08006d19
 8006d0c:	08006d19 	.word	0x08006d19
 8006d10:	08006d81 	.word	0x08006d81
 8006d14:	08006d95 	.word	0x08006d95
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d1e:	f043 0301 	orr.w	r3, r3, #1
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	18d1      	adds	r1, r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	69f8      	ldr	r0, [r7, #28]
 8006d38:	f7ff ff7a 	bl	8006c30 <prvInsertTimerInActiveList>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d063      	beq.n	8006e0a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d009      	beq.n	8006d64 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	4413      	add	r3, r2
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	69f8      	ldr	r0, [r7, #28]
 8006d5e:	f7ff fe71 	bl	8006a44 <prvReloadTimer>
 8006d62:	e008      	b.n	8006d76 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d6a:	f023 0301 	bic.w	r3, r3, #1
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	69f8      	ldr	r0, [r7, #28]
 8006d7c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006d7e:	e044      	b.n	8006e0a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d86:	f023 0301 	bic.w	r3, r3, #1
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8006d92:	e03a      	b.n	8006e0a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d9a:	f043 0301 	orr.w	r3, r3, #1
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10a      	bne.n	8006dca <prvProcessReceivedCommands+0x116>
        __asm volatile
 8006db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	617b      	str	r3, [r7, #20]
    }
 8006dc6:	bf00      	nop
 8006dc8:	e7fe      	b.n	8006dc8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	18d1      	adds	r1, r2, r3
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	69f8      	ldr	r0, [r7, #28]
 8006dd8:	f7ff ff2a 	bl	8006c30 <prvInsertTimerInActiveList>
                        break;
 8006ddc:	e015      	b.n	8006e0a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d103      	bne.n	8006df4 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8006dec:	69f8      	ldr	r0, [r7, #28]
 8006dee:	f7fc f911 	bl	8003014 <vPortFree>
 8006df2:	e00a      	b.n	8006e0a <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006dfa:	f023 0301 	bic.w	r3, r3, #1
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006e06:	e000      	b.n	8006e0a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006e08:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e0a:	4b08      	ldr	r3, [pc, #32]	; (8006e2c <prvProcessReceivedCommands+0x178>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f107 0108 	add.w	r1, r7, #8
 8006e12:	2200      	movs	r2, #0
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fd fe21 	bl	8004a5c <xQueueReceive>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f47f af4d 	bne.w	8006cbc <prvProcessReceivedCommands+0x8>
        }
    }
 8006e22:	bf00      	nop
 8006e24:	bf00      	nop
 8006e26:	3720      	adds	r7, #32
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	200053c8 	.word	0x200053c8

08006e30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e36:	e009      	b.n	8006e4c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e38:	4b0e      	ldr	r3, [pc, #56]	; (8006e74 <prvSwitchTimerLists+0x44>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8006e42:	f04f 31ff 	mov.w	r1, #4294967295
 8006e46:	6838      	ldr	r0, [r7, #0]
 8006e48:	f7ff fe1e 	bl	8006a88 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e4c:	4b09      	ldr	r3, [pc, #36]	; (8006e74 <prvSwitchTimerLists+0x44>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1f0      	bne.n	8006e38 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8006e56:	4b07      	ldr	r3, [pc, #28]	; (8006e74 <prvSwitchTimerLists+0x44>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006e5c:	4b06      	ldr	r3, [pc, #24]	; (8006e78 <prvSwitchTimerLists+0x48>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a04      	ldr	r2, [pc, #16]	; (8006e74 <prvSwitchTimerLists+0x44>)
 8006e62:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006e64:	4a04      	ldr	r2, [pc, #16]	; (8006e78 <prvSwitchTimerLists+0x48>)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6013      	str	r3, [r2, #0]
    }
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	200053c0 	.word	0x200053c0
 8006e78:	200053c4 	.word	0x200053c4

08006e7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006e80:	f7fd f91a 	bl	80040b8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006e84:	4b12      	ldr	r3, [pc, #72]	; (8006ed0 <prvCheckForValidListAndQueue+0x54>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d11d      	bne.n	8006ec8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006e8c:	4811      	ldr	r0, [pc, #68]	; (8006ed4 <prvCheckForValidListAndQueue+0x58>)
 8006e8e:	f7fc f9df 	bl	8003250 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006e92:	4811      	ldr	r0, [pc, #68]	; (8006ed8 <prvCheckForValidListAndQueue+0x5c>)
 8006e94:	f7fc f9dc 	bl	8003250 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006e98:	4b10      	ldr	r3, [pc, #64]	; (8006edc <prvCheckForValidListAndQueue+0x60>)
 8006e9a:	4a0e      	ldr	r2, [pc, #56]	; (8006ed4 <prvCheckForValidListAndQueue+0x58>)
 8006e9c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006e9e:	4b10      	ldr	r3, [pc, #64]	; (8006ee0 <prvCheckForValidListAndQueue+0x64>)
 8006ea0:	4a0d      	ldr	r2, [pc, #52]	; (8006ed8 <prvCheckForValidListAndQueue+0x5c>)
 8006ea2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	210c      	movs	r1, #12
 8006ea8:	2005      	movs	r0, #5
 8006eaa:	f7fd faad 	bl	8004408 <xQueueGenericCreate>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	4a07      	ldr	r2, [pc, #28]	; (8006ed0 <prvCheckForValidListAndQueue+0x54>)
 8006eb2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006eb4:	4b06      	ldr	r3, [pc, #24]	; (8006ed0 <prvCheckForValidListAndQueue+0x54>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d005      	beq.n	8006ec8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ebc:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <prvCheckForValidListAndQueue+0x54>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4908      	ldr	r1, [pc, #32]	; (8006ee4 <prvCheckForValidListAndQueue+0x68>)
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe f8ec 	bl	80050a0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006ec8:	f7fd f926 	bl	8004118 <vPortExitCritical>
    }
 8006ecc:	bf00      	nop
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	200053c8 	.word	0x200053c8
 8006ed4:	20005398 	.word	0x20005398
 8006ed8:	200053ac 	.word	0x200053ac
 8006edc:	200053c0 	.word	0x200053c0
 8006ee0:	200053c4 	.word	0x200053c4
 8006ee4:	08007138 	.word	0x08007138

08006ee8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006ee8:	480d      	ldr	r0, [pc, #52]	; (8006f20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006eea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006eec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006ef0:	480c      	ldr	r0, [pc, #48]	; (8006f24 <LoopForever+0x6>)
  ldr r1, =_edata
 8006ef2:	490d      	ldr	r1, [pc, #52]	; (8006f28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006ef4:	4a0d      	ldr	r2, [pc, #52]	; (8006f2c <LoopForever+0xe>)
  movs r3, #0
 8006ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ef8:	e002      	b.n	8006f00 <LoopCopyDataInit>

08006efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006efe:	3304      	adds	r3, #4

08006f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f04:	d3f9      	bcc.n	8006efa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f06:	4a0a      	ldr	r2, [pc, #40]	; (8006f30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006f08:	4c0a      	ldr	r4, [pc, #40]	; (8006f34 <LoopForever+0x16>)
  movs r3, #0
 8006f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f0c:	e001      	b.n	8006f12 <LoopFillZerobss>

08006f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f10:	3204      	adds	r2, #4

08006f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006f14:	d3fb      	bcc.n	8006f0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006f16:	f000 f811 	bl	8006f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006f1a:	f7fc fa4d 	bl	80033b8 <main>

08006f1e <LoopForever>:

LoopForever:
  b LoopForever
 8006f1e:	e7fe      	b.n	8006f1e <LoopForever>
  ldr   r0, =_estack
 8006f20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8006f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006f28:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8006f2c:	08007150 	.word	0x08007150
  ldr r2, =_sbss
 8006f30:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8006f34:	200053d4 	.word	0x200053d4

08006f38 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006f38:	e7fe      	b.n	8006f38 <ADC_IRQHandler>
	...

08006f3c <__libc_init_array>:
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	4d0d      	ldr	r5, [pc, #52]	; (8006f74 <__libc_init_array+0x38>)
 8006f40:	4c0d      	ldr	r4, [pc, #52]	; (8006f78 <__libc_init_array+0x3c>)
 8006f42:	1b64      	subs	r4, r4, r5
 8006f44:	10a4      	asrs	r4, r4, #2
 8006f46:	2600      	movs	r6, #0
 8006f48:	42a6      	cmp	r6, r4
 8006f4a:	d109      	bne.n	8006f60 <__libc_init_array+0x24>
 8006f4c:	4d0b      	ldr	r5, [pc, #44]	; (8006f7c <__libc_init_array+0x40>)
 8006f4e:	4c0c      	ldr	r4, [pc, #48]	; (8006f80 <__libc_init_array+0x44>)
 8006f50:	f000 f82e 	bl	8006fb0 <_init>
 8006f54:	1b64      	subs	r4, r4, r5
 8006f56:	10a4      	asrs	r4, r4, #2
 8006f58:	2600      	movs	r6, #0
 8006f5a:	42a6      	cmp	r6, r4
 8006f5c:	d105      	bne.n	8006f6a <__libc_init_array+0x2e>
 8006f5e:	bd70      	pop	{r4, r5, r6, pc}
 8006f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f64:	4798      	blx	r3
 8006f66:	3601      	adds	r6, #1
 8006f68:	e7ee      	b.n	8006f48 <__libc_init_array+0xc>
 8006f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6e:	4798      	blx	r3
 8006f70:	3601      	adds	r6, #1
 8006f72:	e7f2      	b.n	8006f5a <__libc_init_array+0x1e>
 8006f74:	08007148 	.word	0x08007148
 8006f78:	08007148 	.word	0x08007148
 8006f7c:	08007148 	.word	0x08007148
 8006f80:	0800714c 	.word	0x0800714c

08006f84 <memcpy>:
 8006f84:	440a      	add	r2, r1
 8006f86:	4291      	cmp	r1, r2
 8006f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f8c:	d100      	bne.n	8006f90 <memcpy+0xc>
 8006f8e:	4770      	bx	lr
 8006f90:	b510      	push	{r4, lr}
 8006f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f9a:	4291      	cmp	r1, r2
 8006f9c:	d1f9      	bne.n	8006f92 <memcpy+0xe>
 8006f9e:	bd10      	pop	{r4, pc}

08006fa0 <memset>:
 8006fa0:	4402      	add	r2, r0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d100      	bne.n	8006faa <memset+0xa>
 8006fa8:	4770      	bx	lr
 8006faa:	f803 1b01 	strb.w	r1, [r3], #1
 8006fae:	e7f9      	b.n	8006fa4 <memset+0x4>

08006fb0 <_init>:
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb2:	bf00      	nop
 8006fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb6:	bc08      	pop	{r3}
 8006fb8:	469e      	mov	lr, r3
 8006fba:	4770      	bx	lr

08006fbc <_fini>:
 8006fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fbe:	bf00      	nop
 8006fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc2:	bc08      	pop	{r3}
 8006fc4:	469e      	mov	lr, r3
 8006fc6:	4770      	bx	lr
