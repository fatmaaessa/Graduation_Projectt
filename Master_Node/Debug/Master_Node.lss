
Master_Node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003874  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00003874  00003908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080007a  0080007a  00003922  2**0
                  ALLOC
  3 .stab         00003e04  00000000  00000000  00003924  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002208  00000000  00000000  00007728  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00009930  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00009a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00009c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000bc64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000cd65  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000dce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000de68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000e12a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e9b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5f 1a 	call	0x34be	; 0x34be <main>
      8a:	0c 94 38 1c 	jmp	0x3870	; 0x3870 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 01 1c 	jmp	0x3802	; 0x3802 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1d 1c 	jmp	0x383a	; 0x383a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 01 1c 	jmp	0x3802	; 0x3802 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1d 1c 	jmp	0x383a	; 0x383a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e6       	ldi	r22, 0x6C	; 108
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 11 1c 	jmp	0x3822	; 0x3822 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <USART_init>:

/********************************************* Functions Implementations **************************************/

/*********************************************************************************************/
USART_Error_t USART_init(USART_Config_t * Copy_StrPtr)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <USART_init+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9b 83       	std	Y+3, r25	; 0x03
     cac:	8a 83       	std	Y+2, r24	; 0x02
	USART_Error_t Local_ErrorState = USART_Error_t_RT_OK;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Copy_StrPtr)
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	9b 81       	ldd	r25, Y+3	; 0x03
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	19 f4       	brne	.+6      	; 0xcc0 <USART_init+0x22>
	{
		Local_ErrorState = USART_Error_t_RT_NULL_PTR;
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	89 83       	std	Y+1, r24	; 0x01
     cbe:	99 c0       	rjmp	.+306    	; 0xdf2 <USART_init+0x154>

#elif USART_MODE == USART_OperMode_t_Async
		//set the Asynchronous operation mode --> doNothing (because we can't set the USREL bit and clear the UMSEL bit at the same instruction)

		// set the speed mode
		USART_UCSRA &= (~(1<<1));
     cc0:	ab e2       	ldi	r26, 0x2B	; 43
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	eb e2       	ldi	r30, 0x2B	; 43
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	8d 7f       	andi	r24, 0xFD	; 253
     ccc:	8c 93       	st	X, r24
		USART_UCSRA |= ((Copy_StrPtr->usart_speed_slct)<<1);
     cce:	ab e2       	ldi	r26, 0x2B	; 43
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	eb e2       	ldi	r30, 0x2B	; 43
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	28 2f       	mov	r18, r24
     cda:	ea 81       	ldd	r30, Y+2	; 0x02
     cdc:	fb 81       	ldd	r31, Y+3	; 0x03
     cde:	84 81       	ldd	r24, Z+4	; 0x04
     ce0:	88 2f       	mov	r24, r24
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	82 2b       	or	r24, r18
     cea:	8c 93       	st	X, r24

		//set Baud rate to 9600
		if(USART_Speed_t_NormalSpeed == Copy_StrPtr->usart_speed_slct)
     cec:	ea 81       	ldd	r30, Y+2	; 0x02
     cee:	fb 81       	ldd	r31, Y+3	; 0x03
     cf0:	84 81       	ldd	r24, Z+4	; 0x04
     cf2:	88 23       	and	r24, r24
     cf4:	41 f4       	brne	.+16     	; 0xd06 <USART_init+0x68>
		{
			USART_UBRRH_UCSRC = 0;
     cf6:	e0 e4       	ldi	r30, 0x40	; 64
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	10 82       	st	Z, r1
			USART_UBRRL = 51;
     cfc:	e9 e2       	ldi	r30, 0x29	; 41
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	83 e3       	ldi	r24, 0x33	; 51
     d02:	80 83       	st	Z, r24
     d04:	0e c0       	rjmp	.+28     	; 0xd22 <USART_init+0x84>

		}
		else if(USART_Speed_t_DoubleSpeed == Copy_StrPtr->usart_speed_slct)
     d06:	ea 81       	ldd	r30, Y+2	; 0x02
     d08:	fb 81       	ldd	r31, Y+3	; 0x03
     d0a:	84 81       	ldd	r24, Z+4	; 0x04
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	41 f4       	brne	.+16     	; 0xd20 <USART_init+0x82>
		{
			USART_UBRRH_UCSRC = 0;
     d10:	e0 e4       	ldi	r30, 0x40	; 64
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	10 82       	st	Z, r1
			USART_UBRRL = 103;
     d16:	e9 e2       	ldi	r30, 0x29	; 41
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	87 e6       	ldi	r24, 0x67	; 103
     d1c:	80 83       	st	Z, r24
     d1e:	01 c0       	rjmp	.+2      	; 0xd22 <USART_init+0x84>
		}
		else{
			Local_ErrorState = USART_Error_t_RT_WRONG_CONFIG;
     d20:	19 82       	std	Y+1, r1	; 0x01
		Local_ErrorState = USART_Error_t_RT_WRONG_CONFIG;
#error "Wrong Operation Mode"
#endif

		// set the data size
		if(Copy_StrPtr->usart_charSize_slct == USART_CharcterSize_t_5)
     d22:	ea 81       	ldd	r30, Y+2	; 0x02
     d24:	fb 81       	ldd	r31, Y+3	; 0x03
     d26:	81 81       	ldd	r24, Z+1	; 0x01
     d28:	88 23       	and	r24, r24
     d2a:	21 f1       	breq	.+72     	; 0xd74 <USART_init+0xd6>
		{
			//DoNothing --> Because we can't set URSEL and clear  UCSZ1 and UCSZ0 at the same time.
		}
		else if(Copy_StrPtr->usart_charSize_slct == USART_CharcterSize_t_9)
     d2c:	ea 81       	ldd	r30, Y+2	; 0x02
     d2e:	fb 81       	ldd	r31, Y+3	; 0x03
     d30:	81 81       	ldd	r24, Z+1	; 0x01
     d32:	84 30       	cpi	r24, 0x04	; 4
     d34:	79 f4       	brne	.+30     	; 0xd54 <USART_init+0xb6>
		{
			USART_UCSRB |= (1<<2);
     d36:	aa e2       	ldi	r26, 0x2A	; 42
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	ea e2       	ldi	r30, 0x2A	; 42
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	84 60       	ori	r24, 0x04	; 4
     d42:	8c 93       	st	X, r24
			USART_UBRRH_UCSRC |= ((1<<7) | (0b11<<1));
     d44:	a0 e4       	ldi	r26, 0x40	; 64
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e0 e4       	ldi	r30, 0x40	; 64
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	86 68       	ori	r24, 0x86	; 134
     d50:	8c 93       	st	X, r24
     d52:	10 c0       	rjmp	.+32     	; 0xd74 <USART_init+0xd6>
		}
		else
		{
			USART_UBRRH_UCSRC |= ((1<<7) | (Copy_StrPtr->usart_charSize_slct << 1));
     d54:	a0 e4       	ldi	r26, 0x40	; 64
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e0 e4       	ldi	r30, 0x40	; 64
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	28 2f       	mov	r18, r24
     d60:	ea 81       	ldd	r30, Y+2	; 0x02
     d62:	fb 81       	ldd	r31, Y+3	; 0x03
     d64:	81 81       	ldd	r24, Z+1	; 0x01
     d66:	88 2f       	mov	r24, r24
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	80 68       	ori	r24, 0x80	; 128
     d70:	82 2b       	or	r24, r18
     d72:	8c 93       	st	X, r24
		}


		//set the parity mode
		if(Copy_StrPtr->usart_parity == USART_ParityMode_t_Disable)
     d74:	ea 81       	ldd	r30, Y+2	; 0x02
     d76:	fb 81       	ldd	r31, Y+3	; 0x03
     d78:	82 81       	ldd	r24, Z+2	; 0x02
     d7a:	88 23       	and	r24, r24
     d7c:	a1 f0       	breq	.+40     	; 0xda6 <USART_init+0x108>
		{
			//DoNothing --> Because we can't set URSEL and clear UPM1 and UPM0 at the same time.
		}
		else
		{
			USART_UBRRH_UCSRC |= ((1<<7) | (Copy_StrPtr->usart_parity << 4));
     d7e:	a0 e4       	ldi	r26, 0x40	; 64
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e0 e4       	ldi	r30, 0x40	; 64
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	28 2f       	mov	r18, r24
     d8a:	ea 81       	ldd	r30, Y+2	; 0x02
     d8c:	fb 81       	ldd	r31, Y+3	; 0x03
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	88 2f       	mov	r24, r24
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	82 95       	swap	r24
     d96:	92 95       	swap	r25
     d98:	90 7f       	andi	r25, 0xF0	; 240
     d9a:	98 27       	eor	r25, r24
     d9c:	80 7f       	andi	r24, 0xF0	; 240
     d9e:	98 27       	eor	r25, r24
     da0:	80 68       	ori	r24, 0x80	; 128
     da2:	82 2b       	or	r24, r18
     da4:	8c 93       	st	X, r24
		}

		// set the stop bit
		if(Copy_StrPtr->usart_stopBits_slct == USART_StopBitSlct_t_OneBit)
     da6:	ea 81       	ldd	r30, Y+2	; 0x02
     da8:	fb 81       	ldd	r31, Y+3	; 0x03
     daa:	83 81       	ldd	r24, Z+3	; 0x03
     dac:	88 23       	and	r24, r24
     dae:	39 f0       	breq	.+14     	; 0xdbe <USART_init+0x120>
		{
			//DoNothing --> Because we can't set URSEL and clear USBS at the same time.
		}
		else
		{
			USART_UBRRH_UCSRC |= ((1 << 7) | (1 << 3));
     db0:	a0 e4       	ldi	r26, 0x40	; 64
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e0 e4       	ldi	r30, 0x40	; 64
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	88 68       	ori	r24, 0x88	; 136
     dbc:	8c 93       	st	X, r24
		}

		// enable the usart
		USART_UCSRB &= (~(0b11<<3));			//to clear bit3 and bit4
     dbe:	aa e2       	ldi	r26, 0x2A	; 42
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	ea e2       	ldi	r30, 0x2A	; 42
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	87 7e       	andi	r24, 0xE7	; 231
     dca:	8c 93       	st	X, r24
		USART_UCSRB |= (Copy_StrPtr->usart_circuit_enable << 3);
     dcc:	aa e2       	ldi	r26, 0x2A	; 42
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	ea e2       	ldi	r30, 0x2A	; 42
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	28 2f       	mov	r18, r24
     dd8:	ea 81       	ldd	r30, Y+2	; 0x02
     dda:	fb 81       	ldd	r31, Y+3	; 0x03
     ddc:	80 81       	ld	r24, Z
     dde:	88 2f       	mov	r24, r24
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	82 2b       	or	r24, r18
     df0:	8c 93       	st	X, r24
	}

	return Local_ErrorState;
     df2:	89 81       	ldd	r24, Y+1	; 0x01
}
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <USART_SendData>:
/*********************************************************************************************/

/*********************************************************************************************/
USART_Error_t USART_SendData(s16 Copy_s16Data)
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	00 d0       	rcall	.+0      	; 0xe06 <USART_SendData+0x6>
     e06:	0f 92       	push	r0
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	9b 83       	std	Y+3, r25	; 0x03
     e0e:	8a 83       	std	Y+2, r24	; 0x02
	USART_Error_t Local_ErrorState = USART_Error_t_RT_OK;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	89 83       	std	Y+1, r24	; 0x01

	while(!GET_BIT(USART_UCSRA,5));
     e14:	eb e2       	ldi	r30, 0x2B	; 43
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	82 95       	swap	r24
     e1c:	86 95       	lsr	r24
     e1e:	87 70       	andi	r24, 0x07	; 7
     e20:	88 2f       	mov	r24, r24
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	81 70       	andi	r24, 0x01	; 1
     e26:	90 70       	andi	r25, 0x00	; 0
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	a1 f3       	breq	.-24     	; 0xe14 <USART_SendData+0x14>

	USART_UDR = Copy_s16Data;
     e2c:	ec e2       	ldi	r30, 0x2C	; 44
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	80 83       	st	Z, r24

	return Local_ErrorState;
     e34:	89 81       	ldd	r24, Y+1	; 0x01

}
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <USART_ReceiveData>:
/*********************************************************************************************/

/*********************************************************************************************/
USART_Error_t USART_ReceiveData(s16 * Copy_Ps16Data)
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	00 d0       	rcall	.+0      	; 0xe48 <USART_ReceiveData+0x6>
     e48:	0f 92       	push	r0
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	9b 83       	std	Y+3, r25	; 0x03
     e50:	8a 83       	std	Y+2, r24	; 0x02
	USART_Error_t Local_ErrorState = USART_Error_t_RT_OK;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	89 83       	std	Y+1, r24	; 0x01

	if(NULL == Copy_Ps16Data)
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	9b 81       	ldd	r25, Y+3	; 0x03
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	19 f4       	brne	.+6      	; 0xe64 <USART_ReceiveData+0x22>
	{
		Local_ErrorState = USART_Error_t_RT_NULL_PTR;
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	89 83       	std	Y+1, r24	; 0x01
     e62:	0e c0       	rjmp	.+28     	; 0xe80 <USART_ReceiveData+0x3e>
	}
	else
	{
		while(!GET_BIT(USART_UCSRA, 7));
     e64:	eb e2       	ldi	r30, 0x2B	; 43
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 23       	and	r24, r24
     e6c:	dc f7       	brge	.-10     	; 0xe64 <USART_ReceiveData+0x22>

		*Copy_Ps16Data = (u16)USART_UDR;
     e6e:	ec e2       	ldi	r30, 0x2C	; 44
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	ea 81       	ldd	r30, Y+2	; 0x02
     e7a:	fb 81       	ldd	r31, Y+3	; 0x03
     e7c:	91 83       	std	Z+1, r25	; 0x01
     e7e:	80 83       	st	Z, r24
	}

	return Local_ErrorState;
     e80:	89 81       	ldd	r24, Y+1	; 0x01
}
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <USART_ReceiveData_interrupt>:
/*********************************************************************************************/

/*********************************************************************************************/
USART_Error_t USART_ReceiveData_interrupt(void(* Local_Fptr)(u8))
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <USART_ReceiveData_interrupt+0x6>
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	9b 83       	std	Y+3, r25	; 0x03
     e9c:	8a 83       	std	Y+2, r24	; 0x02
	USART_Error_t Local_ErrorState = USART_Error_t_RT_OK;
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	89 83       	std	Y+1, r24	; 0x01

	if(NULL != Local_Fptr)
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	9b 81       	ldd	r25, Y+3	; 0x03
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	a9 f0       	breq	.+42     	; 0xed4 <USART_ReceiveData_interrupt+0x46>
	{
		USART_FPTR = Local_Fptr;
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	9b 81       	ldd	r25, Y+3	; 0x03
     eae:	90 93 7b 00 	sts	0x007B, r25
     eb2:	80 93 7a 00 	sts	0x007A, r24

		//Enable The Global Interrupt
		LIB_SREG |= (1<<7);
     eb6:	af e5       	ldi	r26, 0x5F	; 95
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	ef e5       	ldi	r30, 0x5F	; 95
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	80 68       	ori	r24, 0x80	; 128
     ec2:	8c 93       	st	X, r24

		//Enable RX Complete Interrupt
		USART_UCSRB |= (1<<7);
     ec4:	aa e2       	ldi	r26, 0x2A	; 42
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ea e2       	ldi	r30, 0x2A	; 42
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 68       	ori	r24, 0x80	; 128
     ed0:	8c 93       	st	X, r24
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <USART_ReceiveData_interrupt+0x4a>
	}
	else
	{
		Local_ErrorState = USART_Error_t_RT_NULL_PTR;
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_ErrorState;
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <__vector_13>:
/*********************************************************************************************/

ISR(USART_RXC_vect)
{
     ee6:	1f 92       	push	r1
     ee8:	0f 92       	push	r0
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	0f 92       	push	r0
     eee:	11 24       	eor	r1, r1
     ef0:	2f 93       	push	r18
     ef2:	3f 93       	push	r19
     ef4:	4f 93       	push	r20
     ef6:	5f 93       	push	r21
     ef8:	6f 93       	push	r22
     efa:	7f 93       	push	r23
     efc:	8f 93       	push	r24
     efe:	9f 93       	push	r25
     f00:	af 93       	push	r26
     f02:	bf 93       	push	r27
     f04:	ef 93       	push	r30
     f06:	ff 93       	push	r31
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	0f 92       	push	r0
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8_Received_Data = USART_UDR;
     f12:	ec e2       	ldi	r30, 0x2C	; 44
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	89 83       	std	Y+1, r24	; 0x01

	if(NULL != USART_FPTR)
     f1a:	80 91 7a 00 	lds	r24, 0x007A
     f1e:	90 91 7b 00 	lds	r25, 0x007B
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	31 f0       	breq	.+12     	; 0xf32 <__vector_13+0x4c>
	{
		USART_FPTR(Local_u8_Received_Data);
     f26:	e0 91 7a 00 	lds	r30, 0x007A
     f2a:	f0 91 7b 00 	lds	r31, 0x007B
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	09 95       	icall
	}

}
     f32:	0f 90       	pop	r0
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	ff 91       	pop	r31
     f3a:	ef 91       	pop	r30
     f3c:	bf 91       	pop	r27
     f3e:	af 91       	pop	r26
     f40:	9f 91       	pop	r25
     f42:	8f 91       	pop	r24
     f44:	7f 91       	pop	r23
     f46:	6f 91       	pop	r22
     f48:	5f 91       	pop	r21
     f4a:	4f 91       	pop	r20
     f4c:	3f 91       	pop	r19
     f4e:	2f 91       	pop	r18
     f50:	0f 90       	pop	r0
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	0f 90       	pop	r0
     f56:	1f 90       	pop	r1
     f58:	18 95       	reti

00000f5a <MSPI_voidSpiMasterInit>:
 @Brief     :
 @Parameter :
 @Return    :
 */
void MSPI_voidSpiMasterInit(void)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	0f 92       	push	r0
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
	u8 temp_SPCR = 0;
     f64:	19 82       	std	Y+1, r1	; 0x01

	// Set MOSI pin direction output
	DIO_u8setPinDir(DIO_PORT_B,DIO_PIN_4,DIO_OUTPUT);
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	64 e0       	ldi	r22, 0x04	; 4
     f6a:	41 e0       	ldi	r20, 0x01	; 1
     f6c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <DIO_u8setPinDir>
	DIO_u8setPinDir(DIO_PORT_B,DIO_PIN_5,DIO_OUTPUT);
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	65 e0       	ldi	r22, 0x05	; 5
     f74:	41 e0       	ldi	r20, 0x01	; 1
     f76:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <DIO_u8setPinDir>
	DIO_u8setPinDir(DIO_PORT_B,DIO_PIN_6,DIO_INPUT);
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	66 e0       	ldi	r22, 0x06	; 6
     f7e:	40 e0       	ldi	r20, 0x00	; 0
     f80:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <DIO_u8setPinDir>
	DIO_u8setPinVal(DIO_PORT_B,DIO_PIN_6,DIO_HIGH);
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	66 e0       	ldi	r22, 0x06	; 6
     f88:	41 e0       	ldi	r20, 0x01	; 1
     f8a:	0e 94 05 0b 	call	0x160a	; 0x160a <DIO_u8setPinVal>
	DIO_u8setPinDir(DIO_PORT_B,DIO_PIN_7,DIO_OUTPUT);
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	67 e0       	ldi	r22, 0x07	; 7
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <DIO_u8setPinDir>
//	DIO_VidSetPinValue(DIO_PORTB, DIO_PIN7, DIO_LOW);

	// enable SPI
	SET_BIT(temp_SPCR, 6);
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	80 64       	ori	r24, 0x40	; 64
     f9c:	89 83       	std	Y+1, r24	; 0x01

	// data order >>>> transmit MSB first
	CLR_BIT(temp_SPCR, 5);
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	8f 7d       	andi	r24, 0xDF	; 223
     fa2:	89 83       	std	Y+1, r24	; 0x01

	// configure SS pin as output and choose master spi mode
	//DIO_VidSetPinDirection(DIO_PORTB, DIO_PIN4, DIO_OUTPUT);
	//DIO_VidSetPinValue(DIO_PORTB, DIO_PIN4, DIO_HIGH);
	SET_BIT(temp_SPCR, 4);
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	80 61       	ori	r24, 0x10	; 16
     fa8:	89 83       	std	Y+1, r24	; 0x01


	// clock polarity >>> leading rising edge
	CLR_BIT(temp_SPCR, 3);
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	87 7f       	andi	r24, 0xF7	; 247
     fae:	89 83       	std	Y+1, r24	; 0x01

	// clock phase >>>> sampling at rising edge
	CLR_BIT(temp_SPCR, 2);
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	8b 7f       	andi	r24, 0xFB	; 251
     fb4:	89 83       	std	Y+1, r24	; 0x01

	// clock oscillator >> F_CPU / 8
	SET_BIT(temp_SPCR, 0);
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	81 60       	ori	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(temp_SPCR, 1);
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	8d 7f       	andi	r24, 0xFD	; 253
     fc0:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(SPSR, 0);
     fc2:	ae e2       	ldi	r26, 0x2E	; 46
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	ee e2       	ldi	r30, 0x2E	; 46
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	81 60       	ori	r24, 0x01	; 1
     fce:	8c 93       	st	X, r24

	SPCR = temp_SPCR;
     fd0:	ed e2       	ldi	r30, 0x2D	; 45
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	80 83       	st	Z, r24
}
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <MSPI_voidSetPreSca>:
 @Brief     :
 @Parameter :
 @Return    :
 */
void MSPI_voidSetPreSca(u8 Copy_u8Presca_value)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <MSPI_voidSetPreSca+0x6>
     fe6:	0f 92       	push	r0
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Presca_value)
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	3b 83       	std	Y+3, r19	; 0x03
     ff6:	2a 83       	std	Y+2, r18	; 0x02
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	9b 81       	ldd	r25, Y+3	; 0x03
     ffc:	83 30       	cpi	r24, 0x03	; 3
     ffe:	91 05       	cpc	r25, r1
    1000:	09 f4       	brne	.+2      	; 0x1004 <MSPI_voidSetPreSca+0x24>
    1002:	6a c0       	rjmp	.+212    	; 0x10d8 <MSPI_voidSetPreSca+0xf8>
    1004:	2a 81       	ldd	r18, Y+2	; 0x02
    1006:	3b 81       	ldd	r19, Y+3	; 0x03
    1008:	24 30       	cpi	r18, 0x04	; 4
    100a:	31 05       	cpc	r19, r1
    100c:	84 f4       	brge	.+32     	; 0x102e <MSPI_voidSetPreSca+0x4e>
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	9b 81       	ldd	r25, Y+3	; 0x03
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	91 05       	cpc	r25, r1
    1016:	a1 f1       	breq	.+104    	; 0x1080 <MSPI_voidSetPreSca+0xa0>
    1018:	2a 81       	ldd	r18, Y+2	; 0x02
    101a:	3b 81       	ldd	r19, Y+3	; 0x03
    101c:	22 30       	cpi	r18, 0x02	; 2
    101e:	31 05       	cpc	r19, r1
    1020:	0c f0       	brlt	.+2      	; 0x1024 <MSPI_voidSetPreSca+0x44>
    1022:	44 c0       	rjmp	.+136    	; 0x10ac <MSPI_voidSetPreSca+0xcc>
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	9b 81       	ldd	r25, Y+3	; 0x03
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	a1 f0       	breq	.+40     	; 0x1054 <MSPI_voidSetPreSca+0x74>
    102c:	ad c0       	rjmp	.+346    	; 0x1188 <MSPI_voidSetPreSca+0x1a8>
    102e:	2a 81       	ldd	r18, Y+2	; 0x02
    1030:	3b 81       	ldd	r19, Y+3	; 0x03
    1032:	25 30       	cpi	r18, 0x05	; 5
    1034:	31 05       	cpc	r19, r1
    1036:	09 f4       	brne	.+2      	; 0x103a <MSPI_voidSetPreSca+0x5a>
    1038:	7b c0       	rjmp	.+246    	; 0x1130 <MSPI_voidSetPreSca+0x150>
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	9b 81       	ldd	r25, Y+3	; 0x03
    103e:	85 30       	cpi	r24, 0x05	; 5
    1040:	91 05       	cpc	r25, r1
    1042:	0c f4       	brge	.+2      	; 0x1046 <MSPI_voidSetPreSca+0x66>
    1044:	5f c0       	rjmp	.+190    	; 0x1104 <MSPI_voidSetPreSca+0x124>
    1046:	2a 81       	ldd	r18, Y+2	; 0x02
    1048:	3b 81       	ldd	r19, Y+3	; 0x03
    104a:	26 30       	cpi	r18, 0x06	; 6
    104c:	31 05       	cpc	r19, r1
    104e:	09 f4       	brne	.+2      	; 0x1052 <MSPI_voidSetPreSca+0x72>
    1050:	85 c0       	rjmp	.+266    	; 0x115c <MSPI_voidSetPreSca+0x17c>
    1052:	9a c0       	rjmp	.+308    	; 0x1188 <MSPI_voidSetPreSca+0x1a8>
	{
		/************************ ***/
		case 0:
			CLR_BIT(SPCR, 0);
    1054:	ad e2       	ldi	r26, 0x2D	; 45
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	ed e2       	ldi	r30, 0x2D	; 45
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	8e 7f       	andi	r24, 0xFE	; 254
    1060:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    1062:	ad e2       	ldi	r26, 0x2D	; 45
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	ed e2       	ldi	r30, 0x2D	; 45
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	8d 7f       	andi	r24, 0xFD	; 253
    106e:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    1070:	ae e2       	ldi	r26, 0x2E	; 46
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ee e2       	ldi	r30, 0x2E	; 46
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	8e 7f       	andi	r24, 0xFE	; 254
    107c:	8c 93       	st	X, r24
    107e:	99 c0       	rjmp	.+306    	; 0x11b2 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 1:
			SET_BIT(SPCR, 0);
    1080:	ad e2       	ldi	r26, 0x2D	; 45
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	ed e2       	ldi	r30, 0x2D	; 45
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	81 60       	ori	r24, 0x01	; 1
    108c:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    108e:	ad e2       	ldi	r26, 0x2D	; 45
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	ed e2       	ldi	r30, 0x2D	; 45
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8d 7f       	andi	r24, 0xFD	; 253
    109a:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    109c:	ae e2       	ldi	r26, 0x2E	; 46
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	ee e2       	ldi	r30, 0x2E	; 46
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	8e 7f       	andi	r24, 0xFE	; 254
    10a8:	8c 93       	st	X, r24
    10aa:	83 c0       	rjmp	.+262    	; 0x11b2 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 2:
			CLR_BIT(SPCR, 0);
    10ac:	ad e2       	ldi	r26, 0x2D	; 45
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	ed e2       	ldi	r30, 0x2D	; 45
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	8e 7f       	andi	r24, 0xFE	; 254
    10b8:	8c 93       	st	X, r24
			SET_BIT(SPCR, 1);
    10ba:	ad e2       	ldi	r26, 0x2D	; 45
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	ed e2       	ldi	r30, 0x2D	; 45
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	82 60       	ori	r24, 0x02	; 2
    10c6:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    10c8:	ae e2       	ldi	r26, 0x2E	; 46
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	ee e2       	ldi	r30, 0x2E	; 46
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	8e 7f       	andi	r24, 0xFE	; 254
    10d4:	8c 93       	st	X, r24
    10d6:	6d c0       	rjmp	.+218    	; 0x11b2 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 3:
			SET_BIT(SPCR, 0);
    10d8:	ad e2       	ldi	r26, 0x2D	; 45
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	ed e2       	ldi	r30, 0x2D	; 45
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	81 60       	ori	r24, 0x01	; 1
    10e4:	8c 93       	st	X, r24
			SET_BIT(SPCR, 1);
    10e6:	ad e2       	ldi	r26, 0x2D	; 45
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	ed e2       	ldi	r30, 0x2D	; 45
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	82 60       	ori	r24, 0x02	; 2
    10f2:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    10f4:	ae e2       	ldi	r26, 0x2E	; 46
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	ee e2       	ldi	r30, 0x2E	; 46
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	8e 7f       	andi	r24, 0xFE	; 254
    1100:	8c 93       	st	X, r24
    1102:	57 c0       	rjmp	.+174    	; 0x11b2 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 4:
			CLR_BIT(SPCR, 0);
    1104:	ad e2       	ldi	r26, 0x2D	; 45
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	ed e2       	ldi	r30, 0x2D	; 45
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	8e 7f       	andi	r24, 0xFE	; 254
    1110:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    1112:	ad e2       	ldi	r26, 0x2D	; 45
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	ed e2       	ldi	r30, 0x2D	; 45
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	8d 7f       	andi	r24, 0xFD	; 253
    111e:	8c 93       	st	X, r24
			SET_BIT(SPSR, 0);
    1120:	ae e2       	ldi	r26, 0x2E	; 46
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	ee e2       	ldi	r30, 0x2E	; 46
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	81 60       	ori	r24, 0x01	; 1
    112c:	8c 93       	st	X, r24
    112e:	41 c0       	rjmp	.+130    	; 0x11b2 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 5:
			SET_BIT(SPCR, 0);
    1130:	ad e2       	ldi	r26, 0x2D	; 45
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	ed e2       	ldi	r30, 0x2D	; 45
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	81 60       	ori	r24, 0x01	; 1
    113c:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    113e:	ad e2       	ldi	r26, 0x2D	; 45
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	ed e2       	ldi	r30, 0x2D	; 45
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	8d 7f       	andi	r24, 0xFD	; 253
    114a:	8c 93       	st	X, r24
			SET_BIT(SPSR, 0);
    114c:	ae e2       	ldi	r26, 0x2E	; 46
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	ee e2       	ldi	r30, 0x2E	; 46
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	81 60       	ori	r24, 0x01	; 1
    1158:	8c 93       	st	X, r24
    115a:	2b c0       	rjmp	.+86     	; 0x11b2 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 6:
			CLR_BIT(SPCR, 0);
    115c:	ad e2       	ldi	r26, 0x2D	; 45
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	ed e2       	ldi	r30, 0x2D	; 45
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	8e 7f       	andi	r24, 0xFE	; 254
    1168:	8c 93       	st	X, r24
			SET_BIT(SPCR, 1);
    116a:	ad e2       	ldi	r26, 0x2D	; 45
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ed e2       	ldi	r30, 0x2D	; 45
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	82 60       	ori	r24, 0x02	; 2
    1176:	8c 93       	st	X, r24
			SET_BIT(SPSR, 0);
    1178:	ae e2       	ldi	r26, 0x2E	; 46
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ee e2       	ldi	r30, 0x2E	; 46
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	81 60       	ori	r24, 0x01	; 1
    1184:	8c 93       	st	X, r24
    1186:	15 c0       	rjmp	.+42     	; 0x11b2 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		default :
			CLR_BIT(SPCR, 0);
    1188:	ad e2       	ldi	r26, 0x2D	; 45
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	ed e2       	ldi	r30, 0x2D	; 45
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	8e 7f       	andi	r24, 0xFE	; 254
    1194:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    1196:	ad e2       	ldi	r26, 0x2D	; 45
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	ed e2       	ldi	r30, 0x2D	; 45
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	8d 7f       	andi	r24, 0xFD	; 253
    11a2:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    11a4:	ae e2       	ldi	r26, 0x2E	; 46
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	ee e2       	ldi	r30, 0x2E	; 46
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	8e 7f       	andi	r24, 0xFE	; 254
    11b0:	8c 93       	st	X, r24

		break;
	}
}
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <MSPI_VidChipSelect>:
 @Brief     :
 @Parameter :
 @Return    :
 */
void MSPI_VidChipSelect(u8 state)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	0f 92       	push	r0
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	89 83       	std	Y+1, r24	; 0x01
	if(state == 1)
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	31 f4       	brne	.+12     	; 0x11dc <MSPI_VidChipSelect+0x1e>
	{
		//MCAL_DIO_voidSETBIT(PB,PB4,LOW);
		DIO_u8setPinVal(DIO_PORT_B,DIO_PIN_4,DIO_LOW);
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	64 e0       	ldi	r22, 0x04	; 4
    11d4:	40 e0       	ldi	r20, 0x00	; 0
    11d6:	0e 94 05 0b 	call	0x160a	; 0x160a <DIO_u8setPinVal>
    11da:	05 c0       	rjmp	.+10     	; 0x11e6 <MSPI_VidChipSelect+0x28>
	}
	else
	{
		DIO_u8setPinVal(DIO_PORT_B,DIO_PIN_4,DIO_HIGH);
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	64 e0       	ldi	r22, 0x04	; 4
    11e0:	41 e0       	ldi	r20, 0x01	; 1
    11e2:	0e 94 05 0b 	call	0x160a	; 0x160a <DIO_u8setPinVal>
	}
}
    11e6:	0f 90       	pop	r0
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <MSPI_U8MasterTransmit>:
 @Brief     :
 @Parameter :
 @Return    :
 */
u8 MSPI_U8MasterTransmit(u8 Copy_u8SpiMessage)
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <MSPI_U8MasterTransmit+0x6>
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 dataRead=0;
    11fa:	19 82       	std	Y+1, r1	; 0x01
	SPDR = Copy_u8SpiMessage;
    11fc:	ef e2       	ldi	r30, 0x2F	; 47
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	80 83       	st	Z, r24
	while(GET_BIT(SPSR, 7)==0);
    1204:	ee e2       	ldi	r30, 0x2E	; 46
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	88 23       	and	r24, r24
    120c:	dc f7       	brge	.-10     	; 0x1204 <MSPI_U8MasterTransmit+0x16>
	dataRead = SPDR;
    120e:	ef e2       	ldi	r30, 0x2F	; 47
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	89 83       	std	Y+1, r24	; 0x01
	return dataRead;
    1216:	89 81       	ldd	r24, Y+1	; 0x01
}
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <DIO_u8setPortDir>:
#include"DIO_init.h"


//PORT Functions
//set PORT direction
u8 DIO_u8setPortDir(u8 Copy_u8port, u8 Copy_u8dir){
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <DIO_u8setPortDir+0x6>
    1228:	00 d0       	rcall	.+0      	; 0x122a <DIO_u8setPortDir+0x8>
    122a:	0f 92       	push	r0
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	8a 83       	std	Y+2, r24	; 0x02
    1232:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8statues = 0;
    1234:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8port){
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	3d 83       	std	Y+5, r19	; 0x05
    123e:	2c 83       	std	Y+4, r18	; 0x04
    1240:	8c 81       	ldd	r24, Y+4	; 0x04
    1242:	9d 81       	ldd	r25, Y+5	; 0x05
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	91 05       	cpc	r25, r1
    1248:	d1 f0       	breq	.+52     	; 0x127e <DIO_u8setPortDir+0x5c>
    124a:	2c 81       	ldd	r18, Y+4	; 0x04
    124c:	3d 81       	ldd	r19, Y+5	; 0x05
    124e:	22 30       	cpi	r18, 0x02	; 2
    1250:	31 05       	cpc	r19, r1
    1252:	2c f4       	brge	.+10     	; 0x125e <DIO_u8setPortDir+0x3c>
    1254:	8c 81       	ldd	r24, Y+4	; 0x04
    1256:	9d 81       	ldd	r25, Y+5	; 0x05
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	61 f0       	breq	.+24     	; 0x1274 <DIO_u8setPortDir+0x52>
    125c:	1f c0       	rjmp	.+62     	; 0x129c <DIO_u8setPortDir+0x7a>
    125e:	2c 81       	ldd	r18, Y+4	; 0x04
    1260:	3d 81       	ldd	r19, Y+5	; 0x05
    1262:	22 30       	cpi	r18, 0x02	; 2
    1264:	31 05       	cpc	r19, r1
    1266:	81 f0       	breq	.+32     	; 0x1288 <DIO_u8setPortDir+0x66>
    1268:	8c 81       	ldd	r24, Y+4	; 0x04
    126a:	9d 81       	ldd	r25, Y+5	; 0x05
    126c:	83 30       	cpi	r24, 0x03	; 3
    126e:	91 05       	cpc	r25, r1
    1270:	81 f0       	breq	.+32     	; 0x1292 <DIO_u8setPortDir+0x70>
    1272:	14 c0       	rjmp	.+40     	; 0x129c <DIO_u8setPortDir+0x7a>
	case DIO_PORT_A:	DDRA_REG = Copy_u8dir;  break;
    1274:	ea e3       	ldi	r30, 0x3A	; 58
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	80 83       	st	Z, r24
    127c:	11 c0       	rjmp	.+34     	; 0x12a0 <DIO_u8setPortDir+0x7e>
	case DIO_PORT_B:	DDRB_REG = Copy_u8dir;  break;
    127e:	e7 e3       	ldi	r30, 0x37	; 55
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	80 83       	st	Z, r24
    1286:	0c c0       	rjmp	.+24     	; 0x12a0 <DIO_u8setPortDir+0x7e>
	case DIO_PORT_C:	DDRC_REG = Copy_u8dir;  break;
    1288:	e4 e3       	ldi	r30, 0x34	; 52
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	80 83       	st	Z, r24
    1290:	07 c0       	rjmp	.+14     	; 0x12a0 <DIO_u8setPortDir+0x7e>
	case DIO_PORT_D:	DDRD_REG = Copy_u8dir;  break;
    1292:	e1 e3       	ldi	r30, 0x31	; 49
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	80 83       	st	Z, r24
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <DIO_u8setPortDir+0x7e>

	default: Local_u8statues = 1;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <DIO_u8setPortVal>:

//set PORT value
u8 DIO_u8setPortVal(u8 Copy_u8port, u8 Copy_u8val)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <DIO_u8setPortVal+0x6>
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <DIO_u8setPortVal+0x8>
    12ba:	0f 92       	push	r0
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	8a 83       	std	Y+2, r24	; 0x02
    12c2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8statues = 0;
    12c4:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8port){
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	3d 83       	std	Y+5, r19	; 0x05
    12ce:	2c 83       	std	Y+4, r18	; 0x04
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	9d 81       	ldd	r25, Y+5	; 0x05
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	91 05       	cpc	r25, r1
    12d8:	d1 f0       	breq	.+52     	; 0x130e <DIO_u8setPortVal+0x5c>
    12da:	2c 81       	ldd	r18, Y+4	; 0x04
    12dc:	3d 81       	ldd	r19, Y+5	; 0x05
    12de:	22 30       	cpi	r18, 0x02	; 2
    12e0:	31 05       	cpc	r19, r1
    12e2:	2c f4       	brge	.+10     	; 0x12ee <DIO_u8setPortVal+0x3c>
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	9d 81       	ldd	r25, Y+5	; 0x05
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	61 f0       	breq	.+24     	; 0x1304 <DIO_u8setPortVal+0x52>
    12ec:	1f c0       	rjmp	.+62     	; 0x132c <DIO_u8setPortVal+0x7a>
    12ee:	2c 81       	ldd	r18, Y+4	; 0x04
    12f0:	3d 81       	ldd	r19, Y+5	; 0x05
    12f2:	22 30       	cpi	r18, 0x02	; 2
    12f4:	31 05       	cpc	r19, r1
    12f6:	81 f0       	breq	.+32     	; 0x1318 <DIO_u8setPortVal+0x66>
    12f8:	8c 81       	ldd	r24, Y+4	; 0x04
    12fa:	9d 81       	ldd	r25, Y+5	; 0x05
    12fc:	83 30       	cpi	r24, 0x03	; 3
    12fe:	91 05       	cpc	r25, r1
    1300:	81 f0       	breq	.+32     	; 0x1322 <DIO_u8setPortVal+0x70>
    1302:	14 c0       	rjmp	.+40     	; 0x132c <DIO_u8setPortVal+0x7a>
	case DIO_PORT_A:	PORTA_REG = Copy_u8val;  break;
    1304:	eb e3       	ldi	r30, 0x3B	; 59
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	80 83       	st	Z, r24
    130c:	11 c0       	rjmp	.+34     	; 0x1330 <DIO_u8setPortVal+0x7e>
	case DIO_PORT_B:	PORTB_REG = Copy_u8val;  break;
    130e:	e8 e3       	ldi	r30, 0x38	; 56
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	80 83       	st	Z, r24
    1316:	0c c0       	rjmp	.+24     	; 0x1330 <DIO_u8setPortVal+0x7e>
	case DIO_PORT_C:	PORTC_REG = Copy_u8val;  break;
    1318:	e5 e3       	ldi	r30, 0x35	; 53
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	80 83       	st	Z, r24
    1320:	07 c0       	rjmp	.+14     	; 0x1330 <DIO_u8setPortVal+0x7e>
	case DIO_PORT_D:	PORTD_REG = Copy_u8val;  break;
    1322:	e2 e3       	ldi	r30, 0x32	; 50
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	80 83       	st	Z, r24
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_u8setPortVal+0x7e>
	default: Local_u8statues = 1;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    1330:	89 81       	ldd	r24, Y+1	; 0x01
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <DIO_u8getPortVal>:
//get PORT value
u8 DIO_u8getPortVal(u8 Copy_u8port, u8 *Copy_u8valuePtr){
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	00 d0       	rcall	.+0      	; 0x1348 <DIO_u8getPortVal+0x6>
    1348:	00 d0       	rcall	.+0      	; 0x134a <DIO_u8getPortVal+0x8>
    134a:	00 d0       	rcall	.+0      	; 0x134c <DIO_u8getPortVal+0xa>
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	8a 83       	std	Y+2, r24	; 0x02
    1352:	7c 83       	std	Y+4, r23	; 0x04
    1354:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8statues = 0;
    1356:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8port){
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	3e 83       	std	Y+6, r19	; 0x06
    1360:	2d 83       	std	Y+5, r18	; 0x05
    1362:	8d 81       	ldd	r24, Y+5	; 0x05
    1364:	9e 81       	ldd	r25, Y+6	; 0x06
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	91 05       	cpc	r25, r1
    136a:	e1 f0       	breq	.+56     	; 0x13a4 <DIO_u8getPortVal+0x62>
    136c:	2d 81       	ldd	r18, Y+5	; 0x05
    136e:	3e 81       	ldd	r19, Y+6	; 0x06
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	2c f4       	brge	.+10     	; 0x1380 <DIO_u8getPortVal+0x3e>
    1376:	8d 81       	ldd	r24, Y+5	; 0x05
    1378:	9e 81       	ldd	r25, Y+6	; 0x06
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	61 f0       	breq	.+24     	; 0x1396 <DIO_u8getPortVal+0x54>
    137e:	27 c0       	rjmp	.+78     	; 0x13ce <DIO_u8getPortVal+0x8c>
    1380:	2d 81       	ldd	r18, Y+5	; 0x05
    1382:	3e 81       	ldd	r19, Y+6	; 0x06
    1384:	22 30       	cpi	r18, 0x02	; 2
    1386:	31 05       	cpc	r19, r1
    1388:	a1 f0       	breq	.+40     	; 0x13b2 <DIO_u8getPortVal+0x70>
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	9e 81       	ldd	r25, Y+6	; 0x06
    138e:	83 30       	cpi	r24, 0x03	; 3
    1390:	91 05       	cpc	r25, r1
    1392:	b1 f0       	breq	.+44     	; 0x13c0 <DIO_u8getPortVal+0x7e>
    1394:	1c c0       	rjmp	.+56     	; 0x13ce <DIO_u8getPortVal+0x8c>
	case DIO_PORT_A:	*Copy_u8valuePtr = PINA_REG;  break;
    1396:	e9 e3       	ldi	r30, 0x39	; 57
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	eb 81       	ldd	r30, Y+3	; 0x03
    139e:	fc 81       	ldd	r31, Y+4	; 0x04
    13a0:	80 83       	st	Z, r24
    13a2:	17 c0       	rjmp	.+46     	; 0x13d2 <DIO_u8getPortVal+0x90>
	case DIO_PORT_B:	*Copy_u8valuePtr = PINB_REG;  break;
    13a4:	e6 e3       	ldi	r30, 0x36	; 54
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	eb 81       	ldd	r30, Y+3	; 0x03
    13ac:	fc 81       	ldd	r31, Y+4	; 0x04
    13ae:	80 83       	st	Z, r24
    13b0:	10 c0       	rjmp	.+32     	; 0x13d2 <DIO_u8getPortVal+0x90>
	case DIO_PORT_C:	*Copy_u8valuePtr = PINC_REG;  break;
    13b2:	e3 e3       	ldi	r30, 0x33	; 51
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	eb 81       	ldd	r30, Y+3	; 0x03
    13ba:	fc 81       	ldd	r31, Y+4	; 0x04
    13bc:	80 83       	st	Z, r24
    13be:	09 c0       	rjmp	.+18     	; 0x13d2 <DIO_u8getPortVal+0x90>
	case DIO_PORT_D:	*Copy_u8valuePtr = PIND_REG;  break;
    13c0:	e0 e3       	ldi	r30, 0x30	; 48
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	eb 81       	ldd	r30, Y+3	; 0x03
    13c8:	fc 81       	ldd	r31, Y+4	; 0x04
    13ca:	80 83       	st	Z, r24
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <DIO_u8getPortVal+0x90>

	default: Local_u8statues = 1;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d4:	26 96       	adiw	r28, 0x06	; 6
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <DIO_u8setPinDir>:

//PIN Functions
//set PIN direction
u8 DIO_u8setPinDir(u8 Copy_u8port, u8 Copy_u8pin, u8 Copy_u8dir){
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	28 97       	sbiw	r28, 0x08	; 8
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	8a 83       	std	Y+2, r24	; 0x02
    13fc:	6b 83       	std	Y+3, r22	; 0x03
    13fe:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8statues = 0;
    1400:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= 0 && Copy_u8pin <= 7){
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	88 30       	cpi	r24, 0x08	; 8
    1406:	08 f0       	brcs	.+2      	; 0x140a <DIO_u8setPinDir+0x24>
    1408:	f4 c0       	rjmp	.+488    	; 0x15f2 <DIO_u8setPinDir+0x20c>
		if(Copy_u8dir == DIO_INPUT){
    140a:	8c 81       	ldd	r24, Y+4	; 0x04
    140c:	88 23       	and	r24, r24
    140e:	09 f0       	breq	.+2      	; 0x1412 <DIO_u8setPinDir+0x2c>
    1410:	77 c0       	rjmp	.+238    	; 0x1500 <DIO_u8setPinDir+0x11a>
			switch(Copy_u8port){
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	38 87       	std	Y+8, r19	; 0x08
    141a:	2f 83       	std	Y+7, r18	; 0x07
    141c:	8f 81       	ldd	r24, Y+7	; 0x07
    141e:	98 85       	ldd	r25, Y+8	; 0x08
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	91 05       	cpc	r25, r1
    1424:	59 f1       	breq	.+86     	; 0x147c <DIO_u8setPinDir+0x96>
    1426:	2f 81       	ldd	r18, Y+7	; 0x07
    1428:	38 85       	ldd	r19, Y+8	; 0x08
    142a:	22 30       	cpi	r18, 0x02	; 2
    142c:	31 05       	cpc	r19, r1
    142e:	2c f4       	brge	.+10     	; 0x143a <DIO_u8setPinDir+0x54>
    1430:	8f 81       	ldd	r24, Y+7	; 0x07
    1432:	98 85       	ldd	r25, Y+8	; 0x08
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	69 f0       	breq	.+26     	; 0x1452 <DIO_u8setPinDir+0x6c>
    1438:	60 c0       	rjmp	.+192    	; 0x14fa <DIO_u8setPinDir+0x114>
    143a:	2f 81       	ldd	r18, Y+7	; 0x07
    143c:	38 85       	ldd	r19, Y+8	; 0x08
    143e:	22 30       	cpi	r18, 0x02	; 2
    1440:	31 05       	cpc	r19, r1
    1442:	89 f1       	breq	.+98     	; 0x14a6 <DIO_u8setPinDir+0xc0>
    1444:	8f 81       	ldd	r24, Y+7	; 0x07
    1446:	98 85       	ldd	r25, Y+8	; 0x08
    1448:	83 30       	cpi	r24, 0x03	; 3
    144a:	91 05       	cpc	r25, r1
    144c:	09 f4       	brne	.+2      	; 0x1450 <DIO_u8setPinDir+0x6a>
    144e:	40 c0       	rjmp	.+128    	; 0x14d0 <DIO_u8setPinDir+0xea>
    1450:	54 c0       	rjmp	.+168    	; 0x14fa <DIO_u8setPinDir+0x114>
			case DIO_PORT_A:	CLR_BIT(DDRA_REG, Copy_u8pin);  break;
    1452:	aa e3       	ldi	r26, 0x3A	; 58
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ea e3       	ldi	r30, 0x3A	; 58
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_u8setPinDir+0x8a>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_u8setPinDir+0x86>
    1474:	80 95       	com	r24
    1476:	84 23       	and	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	bd c0       	rjmp	.+378    	; 0x15f6 <DIO_u8setPinDir+0x210>
			case DIO_PORT_B:	CLR_BIT(DDRB_REG, Copy_u8pin);  break;
    147c:	a7 e3       	ldi	r26, 0x37	; 55
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e7 e3       	ldi	r30, 0x37	; 55
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_u8setPinDir+0xb4>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_u8setPinDir+0xb0>
    149e:	80 95       	com	r24
    14a0:	84 23       	and	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	a8 c0       	rjmp	.+336    	; 0x15f6 <DIO_u8setPinDir+0x210>
			case DIO_PORT_C:	CLR_BIT(DDRC_REG, Copy_u8pin);  break;
    14a6:	a4 e3       	ldi	r26, 0x34	; 52
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e4 e3       	ldi	r30, 0x34	; 52
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_u8setPinDir+0xde>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_u8setPinDir+0xda>
    14c8:	80 95       	com	r24
    14ca:	84 23       	and	r24, r20
    14cc:	8c 93       	st	X, r24
    14ce:	93 c0       	rjmp	.+294    	; 0x15f6 <DIO_u8setPinDir+0x210>
			case DIO_PORT_D:	CLR_BIT(DDRD_REG, Copy_u8pin);  break;
    14d0:	a1 e3       	ldi	r26, 0x31	; 49
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e1 e3       	ldi	r30, 0x31	; 49
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	48 2f       	mov	r20, r24
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	02 2e       	mov	r0, r18
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <DIO_u8setPinDir+0x108>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	0a 94       	dec	r0
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <DIO_u8setPinDir+0x104>
    14f2:	80 95       	com	r24
    14f4:	84 23       	and	r24, r20
    14f6:	8c 93       	st	X, r24
    14f8:	7e c0       	rjmp	.+252    	; 0x15f6 <DIO_u8setPinDir+0x210>

			default: Local_u8statues = 1;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	7b c0       	rjmp	.+246    	; 0x15f6 <DIO_u8setPinDir+0x210>
			}
		}else if(Copy_u8dir == DIO_OUTPUT){
    1500:	8c 81       	ldd	r24, Y+4	; 0x04
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	09 f0       	breq	.+2      	; 0x1508 <DIO_u8setPinDir+0x122>
    1506:	72 c0       	rjmp	.+228    	; 0x15ec <DIO_u8setPinDir+0x206>
			switch(Copy_u8port){
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	3e 83       	std	Y+6, r19	; 0x06
    1510:	2d 83       	std	Y+5, r18	; 0x05
    1512:	8d 81       	ldd	r24, Y+5	; 0x05
    1514:	9e 81       	ldd	r25, Y+6	; 0x06
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	91 05       	cpc	r25, r1
    151a:	49 f1       	breq	.+82     	; 0x156e <DIO_u8setPinDir+0x188>
    151c:	2d 81       	ldd	r18, Y+5	; 0x05
    151e:	3e 81       	ldd	r19, Y+6	; 0x06
    1520:	22 30       	cpi	r18, 0x02	; 2
    1522:	31 05       	cpc	r19, r1
    1524:	2c f4       	brge	.+10     	; 0x1530 <DIO_u8setPinDir+0x14a>
    1526:	8d 81       	ldd	r24, Y+5	; 0x05
    1528:	9e 81       	ldd	r25, Y+6	; 0x06
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	61 f0       	breq	.+24     	; 0x1546 <DIO_u8setPinDir+0x160>
    152e:	5b c0       	rjmp	.+182    	; 0x15e6 <DIO_u8setPinDir+0x200>
    1530:	2d 81       	ldd	r18, Y+5	; 0x05
    1532:	3e 81       	ldd	r19, Y+6	; 0x06
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	71 f1       	breq	.+92     	; 0x1596 <DIO_u8setPinDir+0x1b0>
    153a:	8d 81       	ldd	r24, Y+5	; 0x05
    153c:	9e 81       	ldd	r25, Y+6	; 0x06
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	91 05       	cpc	r25, r1
    1542:	e9 f1       	breq	.+122    	; 0x15be <DIO_u8setPinDir+0x1d8>
    1544:	50 c0       	rjmp	.+160    	; 0x15e6 <DIO_u8setPinDir+0x200>
			case DIO_PORT_A:	SET_BIT(DDRA_REG, Copy_u8pin);  break;
    1546:	aa e3       	ldi	r26, 0x3A	; 58
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	ea e3       	ldi	r30, 0x3A	; 58
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <DIO_u8setPinDir+0x17e>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <DIO_u8setPinDir+0x17a>
    1568:	84 2b       	or	r24, r20
    156a:	8c 93       	st	X, r24
    156c:	44 c0       	rjmp	.+136    	; 0x15f6 <DIO_u8setPinDir+0x210>
			case DIO_PORT_B:	SET_BIT(DDRB_REG, Copy_u8pin);  break;
    156e:	a7 e3       	ldi	r26, 0x37	; 55
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e7 e3       	ldi	r30, 0x37	; 55
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <DIO_u8setPinDir+0x1a6>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <DIO_u8setPinDir+0x1a2>
    1590:	84 2b       	or	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	30 c0       	rjmp	.+96     	; 0x15f6 <DIO_u8setPinDir+0x210>
			case DIO_PORT_C:	SET_BIT(DDRC_REG, Copy_u8pin);  break;
    1596:	a4 e3       	ldi	r26, 0x34	; 52
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e4 e3       	ldi	r30, 0x34	; 52
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	48 2f       	mov	r20, r24
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 2e       	mov	r0, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_u8setPinDir+0x1ce>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <DIO_u8setPinDir+0x1ca>
    15b8:	84 2b       	or	r24, r20
    15ba:	8c 93       	st	X, r24
    15bc:	1c c0       	rjmp	.+56     	; 0x15f6 <DIO_u8setPinDir+0x210>
			case DIO_PORT_D:	SET_BIT(DDRD_REG, Copy_u8pin);  break;
    15be:	a1 e3       	ldi	r26, 0x31	; 49
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e1 e3       	ldi	r30, 0x31	; 49
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	48 2f       	mov	r20, r24
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	02 2e       	mov	r0, r18
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <DIO_u8setPinDir+0x1f6>
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	0a 94       	dec	r0
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <DIO_u8setPinDir+0x1f2>
    15e0:	84 2b       	or	r24, r20
    15e2:	8c 93       	st	X, r24
    15e4:	08 c0       	rjmp	.+16     	; 0x15f6 <DIO_u8setPinDir+0x210>

			default: Local_u8statues = 1;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	05 c0       	rjmp	.+10     	; 0x15f6 <DIO_u8setPinDir+0x210>
			}
		}else{
			Local_u8statues=1;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <DIO_u8setPinDir+0x210>
		}

	}else{
		Local_u8statues=1;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f8:	28 96       	adiw	r28, 0x08	; 8
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <DIO_u8setPinVal>:
//set PIN value
u8 DIO_u8setPinVal(u8 Copy_u8port, u8 Copy_u8pin, u8 Copy_u8val){
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	28 97       	sbiw	r28, 0x08	; 8
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	8a 83       	std	Y+2, r24	; 0x02
    1620:	6b 83       	std	Y+3, r22	; 0x03
    1622:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8statues = 0;
    1624:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= 0 && Copy_u8pin <=7){
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	88 30       	cpi	r24, 0x08	; 8
    162a:	08 f0       	brcs	.+2      	; 0x162e <DIO_u8setPinVal+0x24>
    162c:	f4 c0       	rjmp	.+488    	; 0x1816 <DIO_u8setPinVal+0x20c>
		if(Copy_u8val == DIO_HIGH){
    162e:	8c 81       	ldd	r24, Y+4	; 0x04
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	09 f0       	breq	.+2      	; 0x1636 <DIO_u8setPinVal+0x2c>
    1634:	72 c0       	rjmp	.+228    	; 0x171a <DIO_u8setPinVal+0x110>
			switch(Copy_u8port){
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	38 87       	std	Y+8, r19	; 0x08
    163e:	2f 83       	std	Y+7, r18	; 0x07
    1640:	8f 81       	ldd	r24, Y+7	; 0x07
    1642:	98 85       	ldd	r25, Y+8	; 0x08
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	91 05       	cpc	r25, r1
    1648:	49 f1       	breq	.+82     	; 0x169c <DIO_u8setPinVal+0x92>
    164a:	2f 81       	ldd	r18, Y+7	; 0x07
    164c:	38 85       	ldd	r19, Y+8	; 0x08
    164e:	22 30       	cpi	r18, 0x02	; 2
    1650:	31 05       	cpc	r19, r1
    1652:	2c f4       	brge	.+10     	; 0x165e <DIO_u8setPinVal+0x54>
    1654:	8f 81       	ldd	r24, Y+7	; 0x07
    1656:	98 85       	ldd	r25, Y+8	; 0x08
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	61 f0       	breq	.+24     	; 0x1674 <DIO_u8setPinVal+0x6a>
    165c:	5b c0       	rjmp	.+182    	; 0x1714 <DIO_u8setPinVal+0x10a>
    165e:	2f 81       	ldd	r18, Y+7	; 0x07
    1660:	38 85       	ldd	r19, Y+8	; 0x08
    1662:	22 30       	cpi	r18, 0x02	; 2
    1664:	31 05       	cpc	r19, r1
    1666:	71 f1       	breq	.+92     	; 0x16c4 <DIO_u8setPinVal+0xba>
    1668:	8f 81       	ldd	r24, Y+7	; 0x07
    166a:	98 85       	ldd	r25, Y+8	; 0x08
    166c:	83 30       	cpi	r24, 0x03	; 3
    166e:	91 05       	cpc	r25, r1
    1670:	e9 f1       	breq	.+122    	; 0x16ec <DIO_u8setPinVal+0xe2>
    1672:	50 c0       	rjmp	.+160    	; 0x1714 <DIO_u8setPinVal+0x10a>
			case DIO_PORT_A:	SET_BIT(PORTA_REG, Copy_u8pin);  break;
    1674:	ab e3       	ldi	r26, 0x3B	; 59
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	eb e3       	ldi	r30, 0x3B	; 59
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	48 2f       	mov	r20, r24
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 2e       	mov	r0, r18
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <DIO_u8setPinVal+0x88>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	0a 94       	dec	r0
    1694:	e2 f7       	brpl	.-8      	; 0x168e <DIO_u8setPinVal+0x84>
    1696:	84 2b       	or	r24, r20
    1698:	8c 93       	st	X, r24
    169a:	bf c0       	rjmp	.+382    	; 0x181a <DIO_u8setPinVal+0x210>
			case DIO_PORT_B:	SET_BIT(PORTB_REG, Copy_u8pin);  break;
    169c:	a8 e3       	ldi	r26, 0x38	; 56
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e8 e3       	ldi	r30, 0x38	; 56
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	48 2f       	mov	r20, r24
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	02 2e       	mov	r0, r18
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <DIO_u8setPinVal+0xb0>
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	0a 94       	dec	r0
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <DIO_u8setPinVal+0xac>
    16be:	84 2b       	or	r24, r20
    16c0:	8c 93       	st	X, r24
    16c2:	ab c0       	rjmp	.+342    	; 0x181a <DIO_u8setPinVal+0x210>
			case DIO_PORT_C:	SET_BIT(PORTC_REG, Copy_u8pin);  break;
    16c4:	a5 e3       	ldi	r26, 0x35	; 53
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e5 e3       	ldi	r30, 0x35	; 53
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <DIO_u8setPinVal+0xd8>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <DIO_u8setPinVal+0xd4>
    16e6:	84 2b       	or	r24, r20
    16e8:	8c 93       	st	X, r24
    16ea:	97 c0       	rjmp	.+302    	; 0x181a <DIO_u8setPinVal+0x210>
			case DIO_PORT_D:	SET_BIT(PORTD_REG, Copy_u8pin);  break;
    16ec:	a2 e3       	ldi	r26, 0x32	; 50
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e2 e3       	ldi	r30, 0x32	; 50
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	48 2f       	mov	r20, r24
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	02 2e       	mov	r0, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <DIO_u8setPinVal+0x100>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	0a 94       	dec	r0
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <DIO_u8setPinVal+0xfc>
    170e:	84 2b       	or	r24, r20
    1710:	8c 93       	st	X, r24
    1712:	83 c0       	rjmp	.+262    	; 0x181a <DIO_u8setPinVal+0x210>

			default: Local_u8statues = 1;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	80 c0       	rjmp	.+256    	; 0x181a <DIO_u8setPinVal+0x210>
			}
		}else if(Copy_u8val == DIO_LOW){
    171a:	8c 81       	ldd	r24, Y+4	; 0x04
    171c:	88 23       	and	r24, r24
    171e:	09 f0       	breq	.+2      	; 0x1722 <DIO_u8setPinVal+0x118>
    1720:	77 c0       	rjmp	.+238    	; 0x1810 <DIO_u8setPinVal+0x206>
			switch(Copy_u8port){
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	3e 83       	std	Y+6, r19	; 0x06
    172a:	2d 83       	std	Y+5, r18	; 0x05
    172c:	8d 81       	ldd	r24, Y+5	; 0x05
    172e:	9e 81       	ldd	r25, Y+6	; 0x06
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	91 05       	cpc	r25, r1
    1734:	59 f1       	breq	.+86     	; 0x178c <DIO_u8setPinVal+0x182>
    1736:	2d 81       	ldd	r18, Y+5	; 0x05
    1738:	3e 81       	ldd	r19, Y+6	; 0x06
    173a:	22 30       	cpi	r18, 0x02	; 2
    173c:	31 05       	cpc	r19, r1
    173e:	2c f4       	brge	.+10     	; 0x174a <DIO_u8setPinVal+0x140>
    1740:	8d 81       	ldd	r24, Y+5	; 0x05
    1742:	9e 81       	ldd	r25, Y+6	; 0x06
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	69 f0       	breq	.+26     	; 0x1762 <DIO_u8setPinVal+0x158>
    1748:	60 c0       	rjmp	.+192    	; 0x180a <DIO_u8setPinVal+0x200>
    174a:	2d 81       	ldd	r18, Y+5	; 0x05
    174c:	3e 81       	ldd	r19, Y+6	; 0x06
    174e:	22 30       	cpi	r18, 0x02	; 2
    1750:	31 05       	cpc	r19, r1
    1752:	89 f1       	breq	.+98     	; 0x17b6 <DIO_u8setPinVal+0x1ac>
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	83 30       	cpi	r24, 0x03	; 3
    175a:	91 05       	cpc	r25, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <DIO_u8setPinVal+0x156>
    175e:	40 c0       	rjmp	.+128    	; 0x17e0 <DIO_u8setPinVal+0x1d6>
    1760:	54 c0       	rjmp	.+168    	; 0x180a <DIO_u8setPinVal+0x200>
			case DIO_PORT_A:	CLR_BIT(PORTA_REG, Copy_u8pin);  break;
    1762:	ab e3       	ldi	r26, 0x3B	; 59
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	eb e3       	ldi	r30, 0x3B	; 59
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	48 2f       	mov	r20, r24
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <DIO_u8setPinVal+0x176>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <DIO_u8setPinVal+0x172>
    1784:	80 95       	com	r24
    1786:	84 23       	and	r24, r20
    1788:	8c 93       	st	X, r24
    178a:	47 c0       	rjmp	.+142    	; 0x181a <DIO_u8setPinVal+0x210>
			case DIO_PORT_B:	CLR_BIT(PORTB_REG, Copy_u8pin);  break;
    178c:	a8 e3       	ldi	r26, 0x38	; 56
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e8 e3       	ldi	r30, 0x38	; 56
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	48 2f       	mov	r20, r24
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	02 2e       	mov	r0, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <DIO_u8setPinVal+0x1a0>
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	0a 94       	dec	r0
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <DIO_u8setPinVal+0x19c>
    17ae:	80 95       	com	r24
    17b0:	84 23       	and	r24, r20
    17b2:	8c 93       	st	X, r24
    17b4:	32 c0       	rjmp	.+100    	; 0x181a <DIO_u8setPinVal+0x210>
			case DIO_PORT_C:	CLR_BIT(PORTC_REG, Copy_u8pin);  break;
    17b6:	a5 e3       	ldi	r26, 0x35	; 53
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e5 e3       	ldi	r30, 0x35	; 53
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	48 2f       	mov	r20, r24
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	02 2e       	mov	r0, r18
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <DIO_u8setPinVal+0x1ca>
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	0a 94       	dec	r0
    17d6:	e2 f7       	brpl	.-8      	; 0x17d0 <DIO_u8setPinVal+0x1c6>
    17d8:	80 95       	com	r24
    17da:	84 23       	and	r24, r20
    17dc:	8c 93       	st	X, r24
    17de:	1d c0       	rjmp	.+58     	; 0x181a <DIO_u8setPinVal+0x210>
			case DIO_PORT_D:	CLR_BIT(PORTD_REG, Copy_u8pin);  break;
    17e0:	a2 e3       	ldi	r26, 0x32	; 50
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e2 e3       	ldi	r30, 0x32	; 50
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	48 2f       	mov	r20, r24
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 2e       	mov	r0, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <DIO_u8setPinVal+0x1f4>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	0a 94       	dec	r0
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <DIO_u8setPinVal+0x1f0>
    1802:	80 95       	com	r24
    1804:	84 23       	and	r24, r20
    1806:	8c 93       	st	X, r24
    1808:	08 c0       	rjmp	.+16     	; 0x181a <DIO_u8setPinVal+0x210>

			default: Local_u8statues = 1;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	05 c0       	rjmp	.+10     	; 0x181a <DIO_u8setPinVal+0x210>
			}
		}else{
			Local_u8statues=1;
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	02 c0       	rjmp	.+4      	; 0x181a <DIO_u8setPinVal+0x210>
		}
	}else{
		Local_u8statues=1;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    181a:	89 81       	ldd	r24, Y+1	; 0x01
}
    181c:	28 96       	adiw	r28, 0x08	; 8
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	de bf       	out	0x3e, r29	; 62
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	cd bf       	out	0x3d, r28	; 61
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <DIO_u8getPinVal>:

//get PIN value
u8 DIO_u8getPinVal(u8 Copy_u8port, u8 Copy_u8pin, u8 *Copy_u8valuePtr){
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	27 97       	sbiw	r28, 0x07	; 7
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	8a 83       	std	Y+2, r24	; 0x02
    1844:	6b 83       	std	Y+3, r22	; 0x03
    1846:	5d 83       	std	Y+5, r21	; 0x05
    1848:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8statues = 0;
    184a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= 0 && Copy_u8pin <=7){
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	88 30       	cpi	r24, 0x08	; 8
    1850:	08 f0       	brcs	.+2      	; 0x1854 <DIO_u8getPinVal+0x26>
    1852:	74 c0       	rjmp	.+232    	; 0x193c <DIO_u8getPinVal+0x10e>
		switch(Copy_u8port){
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	3f 83       	std	Y+7, r19	; 0x07
    185c:	2e 83       	std	Y+6, r18	; 0x06
    185e:	4e 81       	ldd	r20, Y+6	; 0x06
    1860:	5f 81       	ldd	r21, Y+7	; 0x07
    1862:	41 30       	cpi	r20, 0x01	; 1
    1864:	51 05       	cpc	r21, r1
    1866:	59 f1       	breq	.+86     	; 0x18be <DIO_u8getPinVal+0x90>
    1868:	8e 81       	ldd	r24, Y+6	; 0x06
    186a:	9f 81       	ldd	r25, Y+7	; 0x07
    186c:	82 30       	cpi	r24, 0x02	; 2
    186e:	91 05       	cpc	r25, r1
    1870:	34 f4       	brge	.+12     	; 0x187e <DIO_u8getPinVal+0x50>
    1872:	2e 81       	ldd	r18, Y+6	; 0x06
    1874:	3f 81       	ldd	r19, Y+7	; 0x07
    1876:	21 15       	cp	r18, r1
    1878:	31 05       	cpc	r19, r1
    187a:	69 f0       	breq	.+26     	; 0x1896 <DIO_u8getPinVal+0x68>
    187c:	5c c0       	rjmp	.+184    	; 0x1936 <DIO_u8getPinVal+0x108>
    187e:	4e 81       	ldd	r20, Y+6	; 0x06
    1880:	5f 81       	ldd	r21, Y+7	; 0x07
    1882:	42 30       	cpi	r20, 0x02	; 2
    1884:	51 05       	cpc	r21, r1
    1886:	79 f1       	breq	.+94     	; 0x18e6 <DIO_u8getPinVal+0xb8>
    1888:	8e 81       	ldd	r24, Y+6	; 0x06
    188a:	9f 81       	ldd	r25, Y+7	; 0x07
    188c:	83 30       	cpi	r24, 0x03	; 3
    188e:	91 05       	cpc	r25, r1
    1890:	09 f4       	brne	.+2      	; 0x1894 <DIO_u8getPinVal+0x66>
    1892:	3d c0       	rjmp	.+122    	; 0x190e <DIO_u8getPinVal+0xe0>
    1894:	50 c0       	rjmp	.+160    	; 0x1936 <DIO_u8getPinVal+0x108>
		case DIO_PORT_A: *Copy_u8valuePtr = GET_BIT(PINA_REG, Copy_u8pin); break;
    1896:	e9 e3       	ldi	r30, 0x39	; 57
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	88 2f       	mov	r24, r24
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a9 01       	movw	r20, r18
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <DIO_u8getPinVal+0x80>
    18aa:	55 95       	asr	r21
    18ac:	47 95       	ror	r20
    18ae:	8a 95       	dec	r24
    18b0:	e2 f7       	brpl	.-8      	; 0x18aa <DIO_u8getPinVal+0x7c>
    18b2:	ca 01       	movw	r24, r20
    18b4:	81 70       	andi	r24, 0x01	; 1
    18b6:	ec 81       	ldd	r30, Y+4	; 0x04
    18b8:	fd 81       	ldd	r31, Y+5	; 0x05
    18ba:	80 83       	st	Z, r24
    18bc:	41 c0       	rjmp	.+130    	; 0x1940 <DIO_u8getPinVal+0x112>
		case DIO_PORT_B: *Copy_u8valuePtr = GET_BIT(PINB_REG, Copy_u8pin); break;
    18be:	e6 e3       	ldi	r30, 0x36	; 54
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	88 2f       	mov	r24, r24
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a9 01       	movw	r20, r18
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <DIO_u8getPinVal+0xa8>
    18d2:	55 95       	asr	r21
    18d4:	47 95       	ror	r20
    18d6:	8a 95       	dec	r24
    18d8:	e2 f7       	brpl	.-8      	; 0x18d2 <DIO_u8getPinVal+0xa4>
    18da:	ca 01       	movw	r24, r20
    18dc:	81 70       	andi	r24, 0x01	; 1
    18de:	ec 81       	ldd	r30, Y+4	; 0x04
    18e0:	fd 81       	ldd	r31, Y+5	; 0x05
    18e2:	80 83       	st	Z, r24
    18e4:	2d c0       	rjmp	.+90     	; 0x1940 <DIO_u8getPinVal+0x112>
		case DIO_PORT_C: *Copy_u8valuePtr = GET_BIT(PINC_REG, Copy_u8pin); break;
    18e6:	e3 e3       	ldi	r30, 0x33	; 51
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	a9 01       	movw	r20, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <DIO_u8getPinVal+0xd0>
    18fa:	55 95       	asr	r21
    18fc:	47 95       	ror	r20
    18fe:	8a 95       	dec	r24
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <DIO_u8getPinVal+0xcc>
    1902:	ca 01       	movw	r24, r20
    1904:	81 70       	andi	r24, 0x01	; 1
    1906:	ec 81       	ldd	r30, Y+4	; 0x04
    1908:	fd 81       	ldd	r31, Y+5	; 0x05
    190a:	80 83       	st	Z, r24
    190c:	19 c0       	rjmp	.+50     	; 0x1940 <DIO_u8getPinVal+0x112>
		case DIO_PORT_D: *Copy_u8valuePtr = GET_BIT(PIND_REG, Copy_u8pin); break;
    190e:	e0 e3       	ldi	r30, 0x30	; 48
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	88 2f       	mov	r24, r24
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	a9 01       	movw	r20, r18
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <DIO_u8getPinVal+0xf8>
    1922:	55 95       	asr	r21
    1924:	47 95       	ror	r20
    1926:	8a 95       	dec	r24
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <DIO_u8getPinVal+0xf4>
    192a:	ca 01       	movw	r24, r20
    192c:	81 70       	andi	r24, 0x01	; 1
    192e:	ec 81       	ldd	r30, Y+4	; 0x04
    1930:	fd 81       	ldd	r31, Y+5	; 0x05
    1932:	80 83       	st	Z, r24
    1934:	05 c0       	rjmp	.+10     	; 0x1940 <DIO_u8getPinVal+0x112>

		default: Local_u8statues = 1;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <DIO_u8getPinVal+0x112>
		}
	}else{
		Local_u8statues=1;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8statues;
    1940:	89 81       	ldd	r24, Y+1	; 0x01
}
    1942:	27 96       	adiw	r28, 0x07	; 7
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <DIO_u8SetPortDir>:
#include "DIO_reg.h"
#include "DIO_int.h"
#include "DIO_err.h"
#include "../../LIB/BIT_MATH.h"

u8 DIO_u8SetPortDir(u8 Copy_u8Port, u8 Copy_u8Dir){
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	00 d0       	rcall	.+0      	; 0x195a <DIO_u8SetPortDir+0x6>
    195a:	00 d0       	rcall	.+0      	; 0x195c <DIO_u8SetPortDir+0x8>
    195c:	0f 92       	push	r0
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	8a 83       	std	Y+2, r24	; 0x02
    1964:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_error_status = RT_OK;			//it contains the error number
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Port){
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	3d 83       	std	Y+5, r19	; 0x05
    1972:	2c 83       	std	Y+4, r18	; 0x04
    1974:	8c 81       	ldd	r24, Y+4	; 0x04
    1976:	9d 81       	ldd	r25, Y+5	; 0x05
    1978:	82 30       	cpi	r24, 0x02	; 2
    197a:	91 05       	cpc	r25, r1
    197c:	d9 f0       	breq	.+54     	; 0x19b4 <DIO_u8SetPortDir+0x60>
    197e:	2c 81       	ldd	r18, Y+4	; 0x04
    1980:	3d 81       	ldd	r19, Y+5	; 0x05
    1982:	23 30       	cpi	r18, 0x03	; 3
    1984:	31 05       	cpc	r19, r1
    1986:	34 f4       	brge	.+12     	; 0x1994 <DIO_u8SetPortDir+0x40>
    1988:	8c 81       	ldd	r24, Y+4	; 0x04
    198a:	9d 81       	ldd	r25, Y+5	; 0x05
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	91 05       	cpc	r25, r1
    1990:	61 f0       	breq	.+24     	; 0x19aa <DIO_u8SetPortDir+0x56>
    1992:	1f c0       	rjmp	.+62     	; 0x19d2 <DIO_u8SetPortDir+0x7e>
    1994:	2c 81       	ldd	r18, Y+4	; 0x04
    1996:	3d 81       	ldd	r19, Y+5	; 0x05
    1998:	23 30       	cpi	r18, 0x03	; 3
    199a:	31 05       	cpc	r19, r1
    199c:	81 f0       	breq	.+32     	; 0x19be <DIO_u8SetPortDir+0x6a>
    199e:	8c 81       	ldd	r24, Y+4	; 0x04
    19a0:	9d 81       	ldd	r25, Y+5	; 0x05
    19a2:	84 30       	cpi	r24, 0x04	; 4
    19a4:	91 05       	cpc	r25, r1
    19a6:	81 f0       	breq	.+32     	; 0x19c8 <DIO_u8SetPortDir+0x74>
    19a8:	14 c0       	rjmp	.+40     	; 0x19d2 <DIO_u8SetPortDir+0x7e>
	case PORTA: DDRA_REG = Copy_u8Dir; break;
    19aa:	ea e3       	ldi	r30, 0x3A	; 58
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	80 83       	st	Z, r24
    19b2:	11 c0       	rjmp	.+34     	; 0x19d6 <DIO_u8SetPortDir+0x82>
	case PORTB: DDRB_REG = Copy_u8Dir; break;
    19b4:	e7 e3       	ldi	r30, 0x37	; 55
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	80 83       	st	Z, r24
    19bc:	0c c0       	rjmp	.+24     	; 0x19d6 <DIO_u8SetPortDir+0x82>
	case PORTC: DDRC_REG = Copy_u8Dir; break;
    19be:	e4 e3       	ldi	r30, 0x34	; 52
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	80 83       	st	Z, r24
    19c6:	07 c0       	rjmp	.+14     	; 0x19d6 <DIO_u8SetPortDir+0x82>
	case PORTD: DDRD_REG = Copy_u8Dir; break;
    19c8:	e1 e3       	ldi	r30, 0x31	; 49
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	80 83       	st	Z, r24
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <DIO_u8SetPortDir+0x82>
	default: Local_error_status = RT_WRONG_PORT_NO;
    19d2:	82 e0       	ldi	r24, 0x02	; 2
    19d4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error_status;
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <DIO_u8SetPortVal>:

u8 DIO_u8SetPortVal(u8 Copy_u8Port, u8 Copy_u8val){
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <DIO_u8SetPortVal+0x6>
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <DIO_u8SetPortVal+0x8>
    19f0:	0f 92       	push	r0
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	8a 83       	std	Y+2, r24	; 0x02
    19f8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_error_status = RT_OK;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Port){
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	3d 83       	std	Y+5, r19	; 0x05
    1a06:	2c 83       	std	Y+4, r18	; 0x04
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0c:	82 30       	cpi	r24, 0x02	; 2
    1a0e:	91 05       	cpc	r25, r1
    1a10:	d9 f0       	breq	.+54     	; 0x1a48 <DIO_u8SetPortVal+0x60>
    1a12:	2c 81       	ldd	r18, Y+4	; 0x04
    1a14:	3d 81       	ldd	r19, Y+5	; 0x05
    1a16:	23 30       	cpi	r18, 0x03	; 3
    1a18:	31 05       	cpc	r19, r1
    1a1a:	34 f4       	brge	.+12     	; 0x1a28 <DIO_u8SetPortVal+0x40>
    1a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	91 05       	cpc	r25, r1
    1a24:	61 f0       	breq	.+24     	; 0x1a3e <DIO_u8SetPortVal+0x56>
    1a26:	1f c0       	rjmp	.+62     	; 0x1a66 <DIO_u8SetPortVal+0x7e>
    1a28:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2c:	23 30       	cpi	r18, 0x03	; 3
    1a2e:	31 05       	cpc	r19, r1
    1a30:	81 f0       	breq	.+32     	; 0x1a52 <DIO_u8SetPortVal+0x6a>
    1a32:	8c 81       	ldd	r24, Y+4	; 0x04
    1a34:	9d 81       	ldd	r25, Y+5	; 0x05
    1a36:	84 30       	cpi	r24, 0x04	; 4
    1a38:	91 05       	cpc	r25, r1
    1a3a:	81 f0       	breq	.+32     	; 0x1a5c <DIO_u8SetPortVal+0x74>
    1a3c:	14 c0       	rjmp	.+40     	; 0x1a66 <DIO_u8SetPortVal+0x7e>
	case PORTA: PORTA_REG = Copy_u8val; break;
    1a3e:	eb e3       	ldi	r30, 0x3B	; 59
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	80 83       	st	Z, r24
    1a46:	11 c0       	rjmp	.+34     	; 0x1a6a <DIO_u8SetPortVal+0x82>
	case PORTB: PORTB_REG = Copy_u8val; break;
    1a48:	e8 e3       	ldi	r30, 0x38	; 56
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	80 83       	st	Z, r24
    1a50:	0c c0       	rjmp	.+24     	; 0x1a6a <DIO_u8SetPortVal+0x82>
	case PORTC: PORTC_REG = Copy_u8val; break;
    1a52:	e5 e3       	ldi	r30, 0x35	; 53
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	80 83       	st	Z, r24
    1a5a:	07 c0       	rjmp	.+14     	; 0x1a6a <DIO_u8SetPortVal+0x82>
	case PORTD: PORTD_REG = Copy_u8val; break;
    1a5c:	e2 e3       	ldi	r30, 0x32	; 50
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	80 83       	st	Z, r24
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <DIO_u8SetPortVal+0x82>
	default: Local_error_status = RT_WRONG_PORT_NO;
    1a66:	82 e0       	ldi	r24, 0x02	; 2
    1a68:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error_status;
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <DIO_u8GetPortVal>:

u8 DIO_u8GetPortVal(u8 Copy_u8Port, u8 * Copy_u8Ptr){
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <DIO_u8GetPortVal+0x6>
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <DIO_u8GetPortVal+0x8>
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <DIO_u8GetPortVal+0xa>
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	8a 83       	std	Y+2, r24	; 0x02
    1a8c:	7c 83       	std	Y+4, r23	; 0x04
    1a8e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_error_status = RT_OK;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Port){
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	3e 83       	std	Y+6, r19	; 0x06
    1a9c:	2d 83       	std	Y+5, r18	; 0x05
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	82 30       	cpi	r24, 0x02	; 2
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	e9 f0       	breq	.+58     	; 0x1ae2 <DIO_u8GetPortVal+0x66>
    1aa8:	2d 81       	ldd	r18, Y+5	; 0x05
    1aaa:	3e 81       	ldd	r19, Y+6	; 0x06
    1aac:	23 30       	cpi	r18, 0x03	; 3
    1aae:	31 05       	cpc	r19, r1
    1ab0:	34 f4       	brge	.+12     	; 0x1abe <DIO_u8GetPortVal+0x42>
    1ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab6:	81 30       	cpi	r24, 0x01	; 1
    1ab8:	91 05       	cpc	r25, r1
    1aba:	61 f0       	breq	.+24     	; 0x1ad4 <DIO_u8GetPortVal+0x58>
    1abc:	27 c0       	rjmp	.+78     	; 0x1b0c <DIO_u8GetPortVal+0x90>
    1abe:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac2:	23 30       	cpi	r18, 0x03	; 3
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	a1 f0       	breq	.+40     	; 0x1af0 <DIO_u8GetPortVal+0x74>
    1ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aca:	9e 81       	ldd	r25, Y+6	; 0x06
    1acc:	84 30       	cpi	r24, 0x04	; 4
    1ace:	91 05       	cpc	r25, r1
    1ad0:	b1 f0       	breq	.+44     	; 0x1afe <DIO_u8GetPortVal+0x82>
    1ad2:	1c c0       	rjmp	.+56     	; 0x1b0c <DIO_u8GetPortVal+0x90>
	case PORTA: * Copy_u8Ptr = PINA_REG; break;			//to store the port value in the given address
    1ad4:	e9 e3       	ldi	r30, 0x39	; 57
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	eb 81       	ldd	r30, Y+3	; 0x03
    1adc:	fc 81       	ldd	r31, Y+4	; 0x04
    1ade:	80 83       	st	Z, r24
    1ae0:	17 c0       	rjmp	.+46     	; 0x1b10 <DIO_u8GetPortVal+0x94>
	case PORTB: * Copy_u8Ptr = PINB_REG; break;
    1ae2:	e6 e3       	ldi	r30, 0x36	; 54
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	eb 81       	ldd	r30, Y+3	; 0x03
    1aea:	fc 81       	ldd	r31, Y+4	; 0x04
    1aec:	80 83       	st	Z, r24
    1aee:	10 c0       	rjmp	.+32     	; 0x1b10 <DIO_u8GetPortVal+0x94>
	case PORTC: * Copy_u8Ptr = PINC_REG; break;
    1af0:	e3 e3       	ldi	r30, 0x33	; 51
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	eb 81       	ldd	r30, Y+3	; 0x03
    1af8:	fc 81       	ldd	r31, Y+4	; 0x04
    1afa:	80 83       	st	Z, r24
    1afc:	09 c0       	rjmp	.+18     	; 0x1b10 <DIO_u8GetPortVal+0x94>
	case PORTD: * Copy_u8Ptr = PIND_REG; break;
    1afe:	e0 e3       	ldi	r30, 0x30	; 48
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	eb 81       	ldd	r30, Y+3	; 0x03
    1b06:	fc 81       	ldd	r31, Y+4	; 0x04
    1b08:	80 83       	st	Z, r24
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <DIO_u8GetPortVal+0x94>
	default: Local_error_status = RT_WRONG_PORT_NO;
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error_status;
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b12:	26 96       	adiw	r28, 0x06	; 6
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	f8 94       	cli
    1b18:	de bf       	out	0x3e, r29	; 62
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	cd bf       	out	0x3d, r28	; 61
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <DIO_u8SetPinDir>:

u8 DIO_u8SetPinDir(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Dir){
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	00 d0       	rcall	.+0      	; 0x1b2a <DIO_u8SetPinDir+0x6>
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <DIO_u8SetPinDir+0x8>
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <DIO_u8SetPinDir+0xa>
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	8a 83       	std	Y+2, r24	; 0x02
    1b34:	6b 83       	std	Y+3, r22	; 0x03
    1b36:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_error_status = RT_OK;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Pin >= PIN0 && Copy_u8Pin <= PIN7){
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	88 30       	cpi	r24, 0x08	; 8
    1b40:	08 f0       	brcs	.+2      	; 0x1b44 <DIO_u8SetPinDir+0x20>
    1b42:	ee c0       	rjmp	.+476    	; 0x1d20 <DIO_u8SetPinDir+0x1fc>
		switch(Copy_u8Port){
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	3e 83       	std	Y+6, r19	; 0x06
    1b4c:	2d 83       	std	Y+5, r18	; 0x05
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	82 30       	cpi	r24, 0x02	; 2
    1b54:	91 05       	cpc	r25, r1
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <DIO_u8SetPinDir+0x36>
    1b58:	4a c0       	rjmp	.+148    	; 0x1bee <DIO_u8SetPinDir+0xca>
    1b5a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b5c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b5e:	23 30       	cpi	r18, 0x03	; 3
    1b60:	31 05       	cpc	r19, r1
    1b62:	34 f4       	brge	.+12     	; 0x1b70 <DIO_u8SetPinDir+0x4c>
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	81 30       	cpi	r24, 0x01	; 1
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	71 f0       	breq	.+28     	; 0x1b8a <DIO_u8SetPinDir+0x66>
    1b6e:	d5 c0       	rjmp	.+426    	; 0x1d1a <DIO_u8SetPinDir+0x1f6>
    1b70:	2d 81       	ldd	r18, Y+5	; 0x05
    1b72:	3e 81       	ldd	r19, Y+6	; 0x06
    1b74:	23 30       	cpi	r18, 0x03	; 3
    1b76:	31 05       	cpc	r19, r1
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <DIO_u8SetPinDir+0x58>
    1b7a:	6b c0       	rjmp	.+214    	; 0x1c52 <DIO_u8SetPinDir+0x12e>
    1b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b80:	84 30       	cpi	r24, 0x04	; 4
    1b82:	91 05       	cpc	r25, r1
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <DIO_u8SetPinDir+0x64>
    1b86:	97 c0       	rjmp	.+302    	; 0x1cb6 <DIO_u8SetPinDir+0x192>
    1b88:	c8 c0       	rjmp	.+400    	; 0x1d1a <DIO_u8SetPinDir+0x1f6>
		case PORTA:
			if(Copy_u8Dir == INPUT){
    1b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	a9 f4       	brne	.+42     	; 0x1bba <DIO_u8SetPinDir+0x96>
				CLR_BIT(DDRA_REG, Copy_u8Pin);  //to set this pin as input
    1b90:	aa e3       	ldi	r26, 0x3A	; 58
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	ea e3       	ldi	r30, 0x3A	; 58
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	48 2f       	mov	r20, r24
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	02 2e       	mov	r0, r18
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <DIO_u8SetPinDir+0x8a>
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	0a 94       	dec	r0
    1bb0:	e2 f7       	brpl	.-8      	; 0x1baa <DIO_u8SetPinDir+0x86>
    1bb2:	80 95       	com	r24
    1bb4:	84 23       	and	r24, r20
    1bb6:	8c 93       	st	X, r24
    1bb8:	b5 c0       	rjmp	.+362    	; 0x1d24 <DIO_u8SetPinDir+0x200>
			}else if(Copy_u8Dir == OUTPUT){
    1bba:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbc:	82 30       	cpi	r24, 0x02	; 2
    1bbe:	a1 f4       	brne	.+40     	; 0x1be8 <DIO_u8SetPinDir+0xc4>
				SET_BIT(DDRA_REG, Copy_u8Pin);	//to set this pin as output
    1bc0:	aa e3       	ldi	r26, 0x3A	; 58
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	ea e3       	ldi	r30, 0x3A	; 58
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	48 2f       	mov	r20, r24
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	02 2e       	mov	r0, r18
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <DIO_u8SetPinDir+0xba>
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	0a 94       	dec	r0
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <DIO_u8SetPinDir+0xb6>
    1be2:	84 2b       	or	r24, r20
    1be4:	8c 93       	st	X, r24
    1be6:	9e c0       	rjmp	.+316    	; 0x1d24 <DIO_u8SetPinDir+0x200>
			}else{
				Local_error_status = RT_WRONG_PIN_DIRECTION;
    1be8:	84 e0       	ldi	r24, 0x04	; 4
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	9b c0       	rjmp	.+310    	; 0x1d24 <DIO_u8SetPinDir+0x200>
			}
			break;
		case PORTB:
			if(Copy_u8Dir == INPUT){
    1bee:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	a9 f4       	brne	.+42     	; 0x1c1e <DIO_u8SetPinDir+0xfa>
				CLR_BIT(DDRB_REG, Copy_u8Pin);
    1bf4:	a7 e3       	ldi	r26, 0x37	; 55
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e7 e3       	ldi	r30, 0x37	; 55
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	48 2f       	mov	r20, r24
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	02 2e       	mov	r0, r18
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <DIO_u8SetPinDir+0xee>
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	0a 94       	dec	r0
    1c14:	e2 f7       	brpl	.-8      	; 0x1c0e <DIO_u8SetPinDir+0xea>
    1c16:	80 95       	com	r24
    1c18:	84 23       	and	r24, r20
    1c1a:	8c 93       	st	X, r24
    1c1c:	83 c0       	rjmp	.+262    	; 0x1d24 <DIO_u8SetPinDir+0x200>
			}else if(Copy_u8Dir == OUTPUT){
    1c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c20:	82 30       	cpi	r24, 0x02	; 2
    1c22:	a1 f4       	brne	.+40     	; 0x1c4c <DIO_u8SetPinDir+0x128>
				SET_BIT(DDRB_REG, Copy_u8Pin);
    1c24:	a7 e3       	ldi	r26, 0x37	; 55
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e7 e3       	ldi	r30, 0x37	; 55
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 2e       	mov	r0, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <DIO_u8SetPinDir+0x11e>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <DIO_u8SetPinDir+0x11a>
    1c46:	84 2b       	or	r24, r20
    1c48:	8c 93       	st	X, r24
    1c4a:	6c c0       	rjmp	.+216    	; 0x1d24 <DIO_u8SetPinDir+0x200>
			}else{
				Local_error_status = RT_WRONG_PIN_DIRECTION;
    1c4c:	84 e0       	ldi	r24, 0x04	; 4
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    1c50:	69 c0       	rjmp	.+210    	; 0x1d24 <DIO_u8SetPinDir+0x200>
			}
			break;
		case PORTC:
			if(Copy_u8Dir == INPUT){
    1c52:	8c 81       	ldd	r24, Y+4	; 0x04
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	a9 f4       	brne	.+42     	; 0x1c82 <DIO_u8SetPinDir+0x15e>
				CLR_BIT(DDRC_REG, Copy_u8Pin);
    1c58:	a4 e3       	ldi	r26, 0x34	; 52
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e4 e3       	ldi	r30, 0x34	; 52
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	48 2f       	mov	r20, r24
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 2e       	mov	r0, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <DIO_u8SetPinDir+0x152>
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	0a 94       	dec	r0
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <DIO_u8SetPinDir+0x14e>
    1c7a:	80 95       	com	r24
    1c7c:	84 23       	and	r24, r20
    1c7e:	8c 93       	st	X, r24
    1c80:	51 c0       	rjmp	.+162    	; 0x1d24 <DIO_u8SetPinDir+0x200>
			}else if(Copy_u8Dir == OUTPUT){
    1c82:	8c 81       	ldd	r24, Y+4	; 0x04
    1c84:	82 30       	cpi	r24, 0x02	; 2
    1c86:	a1 f4       	brne	.+40     	; 0x1cb0 <DIO_u8SetPinDir+0x18c>
				SET_BIT(DDRC_REG, Copy_u8Pin);
    1c88:	a4 e3       	ldi	r26, 0x34	; 52
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e4 e3       	ldi	r30, 0x34	; 52
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	48 2f       	mov	r20, r24
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	02 2e       	mov	r0, r18
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <DIO_u8SetPinDir+0x182>
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	0a 94       	dec	r0
    1ca8:	e2 f7       	brpl	.-8      	; 0x1ca2 <DIO_u8SetPinDir+0x17e>
    1caa:	84 2b       	or	r24, r20
    1cac:	8c 93       	st	X, r24
    1cae:	3a c0       	rjmp	.+116    	; 0x1d24 <DIO_u8SetPinDir+0x200>
			}else{
				Local_error_status = RT_WRONG_PIN_DIRECTION;
    1cb0:	84 e0       	ldi	r24, 0x04	; 4
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    1cb4:	37 c0       	rjmp	.+110    	; 0x1d24 <DIO_u8SetPinDir+0x200>
			}
			break;
		case PORTD:
			if(Copy_u8Dir == INPUT){
    1cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb8:	81 30       	cpi	r24, 0x01	; 1
    1cba:	a9 f4       	brne	.+42     	; 0x1ce6 <DIO_u8SetPinDir+0x1c2>
				CLR_BIT(DDRD_REG, Copy_u8Pin);
    1cbc:	a1 e3       	ldi	r26, 0x31	; 49
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e1 e3       	ldi	r30, 0x31	; 49
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	48 2f       	mov	r20, r24
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 2e       	mov	r0, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <DIO_u8SetPinDir+0x1b6>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	0a 94       	dec	r0
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <DIO_u8SetPinDir+0x1b2>
    1cde:	80 95       	com	r24
    1ce0:	84 23       	and	r24, r20
    1ce2:	8c 93       	st	X, r24
    1ce4:	1f c0       	rjmp	.+62     	; 0x1d24 <DIO_u8SetPinDir+0x200>
			}else if(Copy_u8Dir == OUTPUT){
    1ce6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce8:	82 30       	cpi	r24, 0x02	; 2
    1cea:	a1 f4       	brne	.+40     	; 0x1d14 <DIO_u8SetPinDir+0x1f0>
				SET_BIT(DDRD_REG, Copy_u8Pin);
    1cec:	a1 e3       	ldi	r26, 0x31	; 49
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e1 e3       	ldi	r30, 0x31	; 49
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	48 2f       	mov	r20, r24
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	02 2e       	mov	r0, r18
    1d04:	02 c0       	rjmp	.+4      	; 0x1d0a <DIO_u8SetPinDir+0x1e6>
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	0a 94       	dec	r0
    1d0c:	e2 f7       	brpl	.-8      	; 0x1d06 <DIO_u8SetPinDir+0x1e2>
    1d0e:	84 2b       	or	r24, r20
    1d10:	8c 93       	st	X, r24
    1d12:	08 c0       	rjmp	.+16     	; 0x1d24 <DIO_u8SetPinDir+0x200>
			}else{
				Local_error_status = RT_WRONG_PIN_DIRECTION;
    1d14:	84 e0       	ldi	r24, 0x04	; 4
    1d16:	89 83       	std	Y+1, r24	; 0x01
    1d18:	05 c0       	rjmp	.+10     	; 0x1d24 <DIO_u8SetPinDir+0x200>
			}
			break;
		default: Local_error_status= RT_WRONG_PORT_NO;
    1d1a:	82 e0       	ldi	r24, 0x02	; 2
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <DIO_u8SetPinDir+0x200>
		}
	}else{
		Local_error_status = RT_WRONG_PIN_NO;
    1d20:	83 e0       	ldi	r24, 0x03	; 3
    1d22:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error_status;
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d26:	26 96       	adiw	r28, 0x06	; 6
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <DIO_u8SetPinVal>:

u8 DIO_u8SetPinVal(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Val){
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <DIO_u8SetPinVal+0x6>
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <DIO_u8SetPinVal+0x8>
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <DIO_u8SetPinVal+0xa>
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	8a 83       	std	Y+2, r24	; 0x02
    1d48:	6b 83       	std	Y+3, r22	; 0x03
    1d4a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_error_status = RT_OK;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Pin >= PIN0 && Copy_u8Pin <= PIN7){
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	88 30       	cpi	r24, 0x08	; 8
    1d54:	08 f0       	brcs	.+2      	; 0x1d58 <DIO_u8SetPinVal+0x20>
    1d56:	ee c0       	rjmp	.+476    	; 0x1f34 <DIO_u8SetPinVal+0x1fc>
		switch(Copy_u8Port){
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	3e 83       	std	Y+6, r19	; 0x06
    1d60:	2d 83       	std	Y+5, r18	; 0x05
    1d62:	8d 81       	ldd	r24, Y+5	; 0x05
    1d64:	9e 81       	ldd	r25, Y+6	; 0x06
    1d66:	82 30       	cpi	r24, 0x02	; 2
    1d68:	91 05       	cpc	r25, r1
    1d6a:	09 f4       	brne	.+2      	; 0x1d6e <DIO_u8SetPinVal+0x36>
    1d6c:	4a c0       	rjmp	.+148    	; 0x1e02 <DIO_u8SetPinVal+0xca>
    1d6e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d70:	3e 81       	ldd	r19, Y+6	; 0x06
    1d72:	23 30       	cpi	r18, 0x03	; 3
    1d74:	31 05       	cpc	r19, r1
    1d76:	34 f4       	brge	.+12     	; 0x1d84 <DIO_u8SetPinVal+0x4c>
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	91 05       	cpc	r25, r1
    1d80:	71 f0       	breq	.+28     	; 0x1d9e <DIO_u8SetPinVal+0x66>
    1d82:	d5 c0       	rjmp	.+426    	; 0x1f2e <DIO_u8SetPinVal+0x1f6>
    1d84:	2d 81       	ldd	r18, Y+5	; 0x05
    1d86:	3e 81       	ldd	r19, Y+6	; 0x06
    1d88:	23 30       	cpi	r18, 0x03	; 3
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <DIO_u8SetPinVal+0x58>
    1d8e:	6b c0       	rjmp	.+214    	; 0x1e66 <DIO_u8SetPinVal+0x12e>
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	84 30       	cpi	r24, 0x04	; 4
    1d96:	91 05       	cpc	r25, r1
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <DIO_u8SetPinVal+0x64>
    1d9a:	97 c0       	rjmp	.+302    	; 0x1eca <DIO_u8SetPinVal+0x192>
    1d9c:	c8 c0       	rjmp	.+400    	; 0x1f2e <DIO_u8SetPinVal+0x1f6>
		case PORTA:
			if(Copy_u8Val == LOW){
    1d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1da0:	81 30       	cpi	r24, 0x01	; 1
    1da2:	a9 f4       	brne	.+42     	; 0x1dce <DIO_u8SetPinVal+0x96>
				CLR_BIT(PORTA_REG, Copy_u8Pin);		//to make this pin low
    1da4:	ab e3       	ldi	r26, 0x3B	; 59
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	eb e3       	ldi	r30, 0x3B	; 59
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	48 2f       	mov	r20, r24
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	02 2e       	mov	r0, r18
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <DIO_u8SetPinVal+0x8a>
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	0a 94       	dec	r0
    1dc4:	e2 f7       	brpl	.-8      	; 0x1dbe <DIO_u8SetPinVal+0x86>
    1dc6:	80 95       	com	r24
    1dc8:	84 23       	and	r24, r20
    1dca:	8c 93       	st	X, r24
    1dcc:	b5 c0       	rjmp	.+362    	; 0x1f38 <DIO_u8SetPinVal+0x200>
			}else if(Copy_u8Val == HIGH){
    1dce:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd0:	82 30       	cpi	r24, 0x02	; 2
    1dd2:	a1 f4       	brne	.+40     	; 0x1dfc <DIO_u8SetPinVal+0xc4>
				SET_BIT(PORTA_REG, Copy_u8Pin);		//to make this pin high
    1dd4:	ab e3       	ldi	r26, 0x3B	; 59
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	eb e3       	ldi	r30, 0x3B	; 59
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	48 2f       	mov	r20, r24
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	02 2e       	mov	r0, r18
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <DIO_u8SetPinVal+0xba>
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	0a 94       	dec	r0
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <DIO_u8SetPinVal+0xb6>
    1df6:	84 2b       	or	r24, r20
    1df8:	8c 93       	st	X, r24
    1dfa:	9e c0       	rjmp	.+316    	; 0x1f38 <DIO_u8SetPinVal+0x200>
			}else{
				Local_error_status = RT_WRONG_PIN_VALUE;
    1dfc:	85 e0       	ldi	r24, 0x05	; 5
    1dfe:	89 83       	std	Y+1, r24	; 0x01
    1e00:	9b c0       	rjmp	.+310    	; 0x1f38 <DIO_u8SetPinVal+0x200>
			}
			break;
		case PORTB:
			if(Copy_u8Val == LOW){
    1e02:	8c 81       	ldd	r24, Y+4	; 0x04
    1e04:	81 30       	cpi	r24, 0x01	; 1
    1e06:	a9 f4       	brne	.+42     	; 0x1e32 <DIO_u8SetPinVal+0xfa>
				CLR_BIT(PORTB_REG, Copy_u8Pin);
    1e08:	a8 e3       	ldi	r26, 0x38	; 56
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e8 e3       	ldi	r30, 0x38	; 56
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	48 2f       	mov	r20, r24
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	02 2e       	mov	r0, r18
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <DIO_u8SetPinVal+0xee>
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	0a 94       	dec	r0
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <DIO_u8SetPinVal+0xea>
    1e2a:	80 95       	com	r24
    1e2c:	84 23       	and	r24, r20
    1e2e:	8c 93       	st	X, r24
    1e30:	83 c0       	rjmp	.+262    	; 0x1f38 <DIO_u8SetPinVal+0x200>
			}else if(Copy_u8Val == HIGH){
    1e32:	8c 81       	ldd	r24, Y+4	; 0x04
    1e34:	82 30       	cpi	r24, 0x02	; 2
    1e36:	a1 f4       	brne	.+40     	; 0x1e60 <DIO_u8SetPinVal+0x128>
				SET_BIT(PORTB_REG, Copy_u8Pin);
    1e38:	a8 e3       	ldi	r26, 0x38	; 56
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e8 e3       	ldi	r30, 0x38	; 56
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	48 2f       	mov	r20, r24
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	02 2e       	mov	r0, r18
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <DIO_u8SetPinVal+0x11e>
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	0a 94       	dec	r0
    1e58:	e2 f7       	brpl	.-8      	; 0x1e52 <DIO_u8SetPinVal+0x11a>
    1e5a:	84 2b       	or	r24, r20
    1e5c:	8c 93       	st	X, r24
    1e5e:	6c c0       	rjmp	.+216    	; 0x1f38 <DIO_u8SetPinVal+0x200>
			}else{
				Local_error_status = RT_WRONG_PIN_VALUE;
    1e60:	85 e0       	ldi	r24, 0x05	; 5
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	69 c0       	rjmp	.+210    	; 0x1f38 <DIO_u8SetPinVal+0x200>
			}
			break;
		case PORTC:
			if(Copy_u8Val == LOW){
    1e66:	8c 81       	ldd	r24, Y+4	; 0x04
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	a9 f4       	brne	.+42     	; 0x1e96 <DIO_u8SetPinVal+0x15e>
				CLR_BIT(PORTC_REG, Copy_u8Pin);
    1e6c:	a5 e3       	ldi	r26, 0x35	; 53
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e5 e3       	ldi	r30, 0x35	; 53
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	48 2f       	mov	r20, r24
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	02 2e       	mov	r0, r18
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <DIO_u8SetPinVal+0x152>
    1e86:	88 0f       	add	r24, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	0a 94       	dec	r0
    1e8c:	e2 f7       	brpl	.-8      	; 0x1e86 <DIO_u8SetPinVal+0x14e>
    1e8e:	80 95       	com	r24
    1e90:	84 23       	and	r24, r20
    1e92:	8c 93       	st	X, r24
    1e94:	51 c0       	rjmp	.+162    	; 0x1f38 <DIO_u8SetPinVal+0x200>
			}else if(Copy_u8Val == HIGH){
    1e96:	8c 81       	ldd	r24, Y+4	; 0x04
    1e98:	82 30       	cpi	r24, 0x02	; 2
    1e9a:	a1 f4       	brne	.+40     	; 0x1ec4 <DIO_u8SetPinVal+0x18c>
				SET_BIT(PORTC_REG, Copy_u8Pin);
    1e9c:	a5 e3       	ldi	r26, 0x35	; 53
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e5 e3       	ldi	r30, 0x35	; 53
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	48 2f       	mov	r20, r24
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	02 2e       	mov	r0, r18
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <DIO_u8SetPinVal+0x182>
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	0a 94       	dec	r0
    1ebc:	e2 f7       	brpl	.-8      	; 0x1eb6 <DIO_u8SetPinVal+0x17e>
    1ebe:	84 2b       	or	r24, r20
    1ec0:	8c 93       	st	X, r24
    1ec2:	3a c0       	rjmp	.+116    	; 0x1f38 <DIO_u8SetPinVal+0x200>
			}else{
				Local_error_status = RT_WRONG_PIN_VALUE;
    1ec4:	85 e0       	ldi	r24, 0x05	; 5
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	37 c0       	rjmp	.+110    	; 0x1f38 <DIO_u8SetPinVal+0x200>
			}
			break;
		case PORTD:
			if(Copy_u8Val == LOW){
    1eca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ecc:	81 30       	cpi	r24, 0x01	; 1
    1ece:	a9 f4       	brne	.+42     	; 0x1efa <DIO_u8SetPinVal+0x1c2>
				CLR_BIT(PORTD_REG, Copy_u8Pin);
    1ed0:	a2 e3       	ldi	r26, 0x32	; 50
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e2 e3       	ldi	r30, 0x32	; 50
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	48 2f       	mov	r20, r24
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	02 2e       	mov	r0, r18
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <DIO_u8SetPinVal+0x1b6>
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	0a 94       	dec	r0
    1ef0:	e2 f7       	brpl	.-8      	; 0x1eea <DIO_u8SetPinVal+0x1b2>
    1ef2:	80 95       	com	r24
    1ef4:	84 23       	and	r24, r20
    1ef6:	8c 93       	st	X, r24
    1ef8:	1f c0       	rjmp	.+62     	; 0x1f38 <DIO_u8SetPinVal+0x200>
			}else if(Copy_u8Val == HIGH){
    1efa:	8c 81       	ldd	r24, Y+4	; 0x04
    1efc:	82 30       	cpi	r24, 0x02	; 2
    1efe:	a1 f4       	brne	.+40     	; 0x1f28 <DIO_u8SetPinVal+0x1f0>
				SET_BIT(PORTD_REG, Copy_u8Pin);
    1f00:	a2 e3       	ldi	r26, 0x32	; 50
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e2 e3       	ldi	r30, 0x32	; 50
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	48 2f       	mov	r20, r24
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	02 2e       	mov	r0, r18
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <DIO_u8SetPinVal+0x1e6>
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	0a 94       	dec	r0
    1f20:	e2 f7       	brpl	.-8      	; 0x1f1a <DIO_u8SetPinVal+0x1e2>
    1f22:	84 2b       	or	r24, r20
    1f24:	8c 93       	st	X, r24
    1f26:	08 c0       	rjmp	.+16     	; 0x1f38 <DIO_u8SetPinVal+0x200>
			}else{
				Local_error_status = RT_WRONG_PIN_VALUE;
    1f28:	85 e0       	ldi	r24, 0x05	; 5
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	05 c0       	rjmp	.+10     	; 0x1f38 <DIO_u8SetPinVal+0x200>
			}
			break;
		default: Local_error_status= RT_WRONG_PORT_NO;
    1f2e:	82 e0       	ldi	r24, 0x02	; 2
    1f30:	89 83       	std	Y+1, r24	; 0x01
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <DIO_u8SetPinVal+0x200>
		}
	}else{
		Local_error_status = RT_WRONG_PIN_NO;
    1f34:	83 e0       	ldi	r24, 0x03	; 3
    1f36:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error_status;
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f3a:	26 96       	adiw	r28, 0x06	; 6
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <DIO_u8GetPinVal>:

u8 DIO_u8GetPinVal(u8 Copy_u8Port, u8 Copy_u8Pin, u8 * Copy_u8Ptr){
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	27 97       	sbiw	r28, 0x07	; 7
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	8a 83       	std	Y+2, r24	; 0x02
    1f62:	6b 83       	std	Y+3, r22	; 0x03
    1f64:	5d 83       	std	Y+5, r21	; 0x05
    1f66:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_error_status = RT_OK;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Pin >= PIN0 && Copy_u8Pin <= PIN7){
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	88 30       	cpi	r24, 0x08	; 8
    1f70:	08 f0       	brcs	.+2      	; 0x1f74 <DIO_u8GetPinVal+0x28>
    1f72:	74 c0       	rjmp	.+232    	; 0x205c <DIO_u8GetPinVal+0x110>
		switch(Copy_u8Port){
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	3f 83       	std	Y+7, r19	; 0x07
    1f7c:	2e 83       	std	Y+6, r18	; 0x06
    1f7e:	4e 81       	ldd	r20, Y+6	; 0x06
    1f80:	5f 81       	ldd	r21, Y+7	; 0x07
    1f82:	42 30       	cpi	r20, 0x02	; 2
    1f84:	51 05       	cpc	r21, r1
    1f86:	59 f1       	breq	.+86     	; 0x1fde <DIO_u8GetPinVal+0x92>
    1f88:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f8c:	83 30       	cpi	r24, 0x03	; 3
    1f8e:	91 05       	cpc	r25, r1
    1f90:	34 f4       	brge	.+12     	; 0x1f9e <DIO_u8GetPinVal+0x52>
    1f92:	2e 81       	ldd	r18, Y+6	; 0x06
    1f94:	3f 81       	ldd	r19, Y+7	; 0x07
    1f96:	21 30       	cpi	r18, 0x01	; 1
    1f98:	31 05       	cpc	r19, r1
    1f9a:	69 f0       	breq	.+26     	; 0x1fb6 <DIO_u8GetPinVal+0x6a>
    1f9c:	5c c0       	rjmp	.+184    	; 0x2056 <DIO_u8GetPinVal+0x10a>
    1f9e:	4e 81       	ldd	r20, Y+6	; 0x06
    1fa0:	5f 81       	ldd	r21, Y+7	; 0x07
    1fa2:	43 30       	cpi	r20, 0x03	; 3
    1fa4:	51 05       	cpc	r21, r1
    1fa6:	79 f1       	breq	.+94     	; 0x2006 <DIO_u8GetPinVal+0xba>
    1fa8:	8e 81       	ldd	r24, Y+6	; 0x06
    1faa:	9f 81       	ldd	r25, Y+7	; 0x07
    1fac:	84 30       	cpi	r24, 0x04	; 4
    1fae:	91 05       	cpc	r25, r1
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <DIO_u8GetPinVal+0x68>
    1fb2:	3d c0       	rjmp	.+122    	; 0x202e <DIO_u8GetPinVal+0xe2>
    1fb4:	50 c0       	rjmp	.+160    	; 0x2056 <DIO_u8GetPinVal+0x10a>
		case PORTA: * Copy_u8Ptr = GET_BIT(PINA_REG, Copy_u8Pin); break;		//to store the pin value in the given address
    1fb6:	e9 e3       	ldi	r30, 0x39	; 57
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	88 2f       	mov	r24, r24
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a9 01       	movw	r20, r18
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <DIO_u8GetPinVal+0x82>
    1fca:	55 95       	asr	r21
    1fcc:	47 95       	ror	r20
    1fce:	8a 95       	dec	r24
    1fd0:	e2 f7       	brpl	.-8      	; 0x1fca <DIO_u8GetPinVal+0x7e>
    1fd2:	ca 01       	movw	r24, r20
    1fd4:	81 70       	andi	r24, 0x01	; 1
    1fd6:	ec 81       	ldd	r30, Y+4	; 0x04
    1fd8:	fd 81       	ldd	r31, Y+5	; 0x05
    1fda:	80 83       	st	Z, r24
    1fdc:	41 c0       	rjmp	.+130    	; 0x2060 <DIO_u8GetPinVal+0x114>
		case PORTB: * Copy_u8Ptr = GET_BIT(PINB_REG, Copy_u8Pin); break;
    1fde:	e6 e3       	ldi	r30, 0x36	; 54
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	88 2f       	mov	r24, r24
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	a9 01       	movw	r20, r18
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <DIO_u8GetPinVal+0xaa>
    1ff2:	55 95       	asr	r21
    1ff4:	47 95       	ror	r20
    1ff6:	8a 95       	dec	r24
    1ff8:	e2 f7       	brpl	.-8      	; 0x1ff2 <DIO_u8GetPinVal+0xa6>
    1ffa:	ca 01       	movw	r24, r20
    1ffc:	81 70       	andi	r24, 0x01	; 1
    1ffe:	ec 81       	ldd	r30, Y+4	; 0x04
    2000:	fd 81       	ldd	r31, Y+5	; 0x05
    2002:	80 83       	st	Z, r24
    2004:	2d c0       	rjmp	.+90     	; 0x2060 <DIO_u8GetPinVal+0x114>
		case PORTC: * Copy_u8Ptr = GET_BIT(PINC_REG, Copy_u8Pin); break;
    2006:	e3 e3       	ldi	r30, 0x33	; 51
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	88 2f       	mov	r24, r24
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a9 01       	movw	r20, r18
    2018:	02 c0       	rjmp	.+4      	; 0x201e <DIO_u8GetPinVal+0xd2>
    201a:	55 95       	asr	r21
    201c:	47 95       	ror	r20
    201e:	8a 95       	dec	r24
    2020:	e2 f7       	brpl	.-8      	; 0x201a <DIO_u8GetPinVal+0xce>
    2022:	ca 01       	movw	r24, r20
    2024:	81 70       	andi	r24, 0x01	; 1
    2026:	ec 81       	ldd	r30, Y+4	; 0x04
    2028:	fd 81       	ldd	r31, Y+5	; 0x05
    202a:	80 83       	st	Z, r24
    202c:	19 c0       	rjmp	.+50     	; 0x2060 <DIO_u8GetPinVal+0x114>
		case PORTD: * Copy_u8Ptr = GET_BIT(PIND_REG, Copy_u8Pin); break;
    202e:	e0 e3       	ldi	r30, 0x30	; 48
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	88 2f       	mov	r24, r24
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	a9 01       	movw	r20, r18
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <DIO_u8GetPinVal+0xfa>
    2042:	55 95       	asr	r21
    2044:	47 95       	ror	r20
    2046:	8a 95       	dec	r24
    2048:	e2 f7       	brpl	.-8      	; 0x2042 <DIO_u8GetPinVal+0xf6>
    204a:	ca 01       	movw	r24, r20
    204c:	81 70       	andi	r24, 0x01	; 1
    204e:	ec 81       	ldd	r30, Y+4	; 0x04
    2050:	fd 81       	ldd	r31, Y+5	; 0x05
    2052:	80 83       	st	Z, r24
    2054:	05 c0       	rjmp	.+10     	; 0x2060 <DIO_u8GetPinVal+0x114>
		default: Local_error_status = RT_WRONG_PORT_NO;
    2056:	82 e0       	ldi	r24, 0x02	; 2
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <DIO_u8GetPinVal+0x114>
		}
	}else{
		Local_error_status = RT_WRONG_PIN_NO;
    205c:	83 e0       	ldi	r24, 0x03	; 3
    205e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error_status;
    2060:	89 81       	ldd	r24, Y+1	; 0x01
}
    2062:	27 96       	adiw	r28, 0x07	; 7
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	de bf       	out	0x3e, r29	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	cd bf       	out	0x3d, r28	; 61
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <HMCP2515_voidWriteReg>:
 **************** Common Function Start  **********************/

/*********** Write Section Start ****************/

void HMCP2515_voidWriteReg(u8 Copy_u8RegAddress ,u8 Copy_u8Data)
{
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	00 d0       	rcall	.+0      	; 0x207a <HMCP2515_voidWriteReg+0x6>
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	6a 83       	std	Y+2, r22	; 0x02

	MSPI_VidChipSelect(1);
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	0e 94 df 08 	call	0x11be	; 0x11be <MSPI_VidChipSelect>
	MSPI_U8MasterTransmit(MCP2515_WRITE_INST);
    2088:	82 e0       	ldi	r24, 0x02	; 2
    208a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8RegAddress );
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8Data);
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	MSPI_VidChipSelect(0);
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	0e 94 df 08 	call	0x11be	; 0x11be <MSPI_VidChipSelect>
}
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret

000020aa <HMCP2515_U8ReadReg>:
/*********** Write Section End ****************/

/*********** Read Section Start ****************/
u8 HMCP2515_U8ReadReg(u8 Copy_u8RegAddress)
{
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <HMCP2515_U8ReadReg+0x6>
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	8a 83       	std	Y+2, r24	; 0x02
    u8 localValue2;
	MSPI_VidChipSelect(1);
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	0e 94 df 08 	call	0x11be	; 0x11be <MSPI_VidChipSelect>
	MSPI_U8MasterTransmit(MCP2515_READ_INST);
    20bc:	83 e0       	ldi	r24, 0x03	; 3
    20be:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8RegAddress);
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	localValue2 = MSPI_U8MasterTransmit(0);
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
    20ce:	89 83       	std	Y+1, r24	; 0x01
	MSPI_VidChipSelect(0);
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	0e 94 df 08 	call	0x11be	; 0x11be <MSPI_VidChipSelect>
    return localValue2;
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <HMCP2515_voidResetInst>:
/*********** Read Section End ****************/

/*********** Reset Section Start ****************/
void HMCP2515_voidResetInst(void)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
	MSPI_VidChipSelect(1);
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	0e 94 df 08 	call	0x11be	; 0x11be <MSPI_VidChipSelect>
	MSPI_U8MasterTransmit(MCP2515_RESET_INST);
    20f0:	80 ec       	ldi	r24, 0xC0	; 192
    20f2:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	MSPI_VidChipSelect(0);
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	0e 94 df 08 	call	0x11be	; 0x11be <MSPI_VidChipSelect>
}
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <HMCP2515_voidBitModify>:
/*********** Reset Instruction End ****************/

/*********** Bit Modify Section Start ****************/
void  HMCP2515_voidBitModify(u8 Copy_RegAddress ,u8 Copy_u8Mask,u8 Copy_U8Data )
{
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	00 d0       	rcall	.+0      	; 0x2108 <HMCP2515_voidBitModify+0x6>
    2108:	0f 92       	push	r0
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	6a 83       	std	Y+2, r22	; 0x02
    2112:	4b 83       	std	Y+3, r20	; 0x03

	MSPI_VidChipSelect(1);
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	0e 94 df 08 	call	0x11be	; 0x11be <MSPI_VidChipSelect>
	MSPI_U8MasterTransmit(MCP2515_BITMODIFY_INST );
    211a:	85 e0       	ldi	r24, 0x05	; 5
    211c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_RegAddress);
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8Mask);
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_U8Data);
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	MSPI_VidChipSelect(0);
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	0e 94 df 08 	call	0x11be	; 0x11be <MSPI_VidChipSelect>

}
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <HMCP2515_voidSetBitTiming>:
/*********** Bit Modify Section End ****************/

/*********** Bit Timing Section Start ****************/
void HMCP2515_voidSetBitTiming(u8 Copy_U8CNFVAL1 ,u8 Copy_U8CNFVAL2 ,u8 Copy_U8CNFVAL3)
{
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	00 d0       	rcall	.+0      	; 0x214a <HMCP2515_voidSetBitTiming+0x6>
    214a:	0f 92       	push	r0
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	6a 83       	std	Y+2, r22	; 0x02
    2154:	4b 83       	std	Y+3, r20	; 0x03
     * 1 TQ for Synch bit
     * 6 TQ for Phase segment 2
     * 2 TQ For Propagation Segment
     * 7 TQ For Phase segment 1
     */
	HMCP2515_voidWriteReg(CNF1,Copy_U8CNFVAL1);
    2156:	8a e2       	ldi	r24, 0x2A	; 42
    2158:	69 81       	ldd	r22, Y+1	; 0x01
    215a:	0e 94 3a 10 	call	0x2074	; 0x2074 <HMCP2515_voidWriteReg>
	HMCP2515_voidWriteReg(CNF2,Copy_U8CNFVAL2);
    215e:	89 e2       	ldi	r24, 0x29	; 41
    2160:	6a 81       	ldd	r22, Y+2	; 0x02
    2162:	0e 94 3a 10 	call	0x2074	; 0x2074 <HMCP2515_voidWriteReg>
	HMCP2515_voidWriteReg(CNF3,Copy_U8CNFVAL3);
    2166:	88 e2       	ldi	r24, 0x28	; 40
    2168:	6b 81       	ldd	r22, Y+3	; 0x03
    216a:	0e 94 3a 10 	call	0x2074	; 0x2074 <HMCP2515_voidWriteReg>
}
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <HMCP2515_voidSetMode>:
/*********** Bit Timing Section End ****************/

/*********** Set Mode Inst Section Start ****************/
void HMCP2515_voidSetMode(u8 Copy_U8Mode)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	0f 92       	push	r0
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	89 83       	std	Y+1, r24	; 0x01
    HMCP2515_voidBitModify(CANCTRL ,0XE0,(Copy_U8Mode<<5));
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	98 2f       	mov	r25, r24
    218a:	92 95       	swap	r25
    218c:	99 0f       	add	r25, r25
    218e:	90 7e       	andi	r25, 0xE0	; 224
    2190:	8f e0       	ldi	r24, 0x0F	; 15
    2192:	60 ee       	ldi	r22, 0xE0	; 224
    2194:	49 2f       	mov	r20, r25
    2196:	0e 94 81 10 	call	0x2102	; 0x2102 <HMCP2515_voidBitModify>
	//HMCP2515_voidWriteReg(CANCTRL,(Copy_U8Mode<<5));
    //u8 local1=HMCP2515_U8ReadReg(CANSTAT);
	while((HMCP2515_U8ReadReg(CANSTAT)>>5)!=Copy_U8Mode);
    219a:	8e e0       	ldi	r24, 0x0E	; 14
    219c:	0e 94 55 10 	call	0x20aa	; 0x20aa <HMCP2515_U8ReadReg>
    21a0:	98 2f       	mov	r25, r24
    21a2:	92 95       	swap	r25
    21a4:	96 95       	lsr	r25
    21a6:	97 70       	andi	r25, 0x07	; 7
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	98 17       	cp	r25, r24
    21ac:	b1 f7       	brne	.-20     	; 0x219a <HMCP2515_voidSetMode+0x20>
		HMCP2515_voidBitModify(CANCTRL ,0XE0,Copy_U8Mode<<5);
		 MCAL_DIO_voidSETBIT(PC,PC0,LOW);

	}*/

}
    21ae:	0f 90       	pop	r0
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <HMCP2515_voidInitTransimiter>:
/*********** Set Mode Inst Section End ****************/

/************* Transmitter initialization Section Start ******************/
void HMCP2515_voidInitTransimiter(void)
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62

	  MSPI_voidSpiMasterInit();
    21be:	0e 94 ad 07 	call	0xf5a	; 0xf5a <MSPI_voidSpiMasterInit>
	  HMCP2515_voidResetInst();
    21c2:	0e 94 71 10 	call	0x20e2	; 0x20e2 <HMCP2515_voidResetInst>

	  /* Enable  Configuration  mode and Enable clock  To Set Bit Timing*/
	  HMCP2515_voidWriteReg(CANCTRL,0x87);
    21c6:	8f e0       	ldi	r24, 0x0F	; 15
    21c8:	67 e8       	ldi	r22, 0x87	; 135
    21ca:	0e 94 3a 10 	call	0x2074	; 0x2074 <HMCP2515_voidWriteReg>
	   * MCP2515_SETMODE(config_mode)
	     HMCP2515_voidSetMode(CONFIG_MODE);
	     HMCP2515_voidBitModify(CANCTRL ,0X04,0x04);
         u8 local =HMCP2515_U8ReadReg(CANSTAT);
       */
	 while((HMCP2515_U8ReadReg(CANSTAT)>>5) != CONFIG_MODE);
    21ce:	8e e0       	ldi	r24, 0x0E	; 14
    21d0:	0e 94 55 10 	call	0x20aa	; 0x20aa <HMCP2515_U8ReadReg>
    21d4:	82 95       	swap	r24
    21d6:	86 95       	lsr	r24
    21d8:	87 70       	andi	r24, 0x07	; 7
    21da:	84 30       	cpi	r24, 0x04	; 4
    21dc:	c1 f7       	brne	.-16     	; 0x21ce <HMCP2515_voidInitTransimiter+0x18>
	/*  Bit rate Transmission data of CAN  is 250KHz  with  using 8MHz MIC Clock
	 * CNF1 = (2<<6)
	 * CNF2 = (1<<7)|(6<<3)|(1)
	 * CNF3 = (0x15)
	 */
	 HMCP2515_voidSetBitTiming(2<<6, (1<<7)|(6<<3)|(1), (0x15));
    21de:	80 e8       	ldi	r24, 0x80	; 128
    21e0:	61 eb       	ldi	r22, 0xB1	; 177
    21e2:	45 e1       	ldi	r20, 0x15	; 21
    21e4:	0e 94 a2 10 	call	0x2144	; 0x2144 <HMCP2515_voidSetBitTiming>
	// HMCP2515_voidSetBitTiming(0x80,0xB1,0x05);
    /*  return to normal mode sending and Receiving*/
	  HMCP2515_voidSetMode(NORMAL_MODE);
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	0e 94 bd 10 	call	0x217a	; 0x217a <HMCP2515_voidSetMode>

}
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <HMCP2515_VidSendCAN_Msg>:
/************* Transmitter initialization Section End  ******************/

/******************Transmitter Sending Message Start ****************/
void HMCP2515_VidSendCAN_Msg(u8 Copy_u8Address ,u32 Copy_u8MsgID, u8 Copy_u8DataLen_DLC , u8*Copy_u8data)
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	28 97       	sbiw	r28, 0x08	; 8
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	de bf       	out	0x3e, r29	; 62
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	cd bf       	out	0x3d, r28	; 61
    2208:	8b 83       	std	Y+3, r24	; 0x03
    220a:	7d 83       	std	Y+5, r23	; 0x05
    220c:	6c 83       	std	Y+4, r22	; 0x04
    220e:	4e 83       	std	Y+6, r20	; 0x06
    2210:	38 87       	std	Y+8, r19	; 0x08
    2212:	2f 83       	std	Y+7, r18	; 0x07
	 * TXB0CTRL
	 * TXB1CTRL
	 * TXB2CTRL
	 * */

	MSPI_VidChipSelect(1);
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	0e 94 df 08 	call	0x11be	; 0x11be <MSPI_VidChipSelect>
	MSPI_U8MasterTransmit(MCP2515_WRITE_INST);
    221a:	82 e0       	ldi	r24, 0x02	; 2
    221c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8Address);
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>

	/* any data can send Highest priority  (Mandatory)*/
	MSPI_U8MasterTransmit(0x03);
    2226:	83 e0       	ldi	r24, 0x03	; 3
    2228:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>

	/* Full IDH EXtend Id  */
	MSPI_U8MasterTransmit((u8)(Copy_u8MsgID>>3));
    222c:	8c 81       	ldd	r24, Y+4	; 0x04
    222e:	9d 81       	ldd	r25, Y+5	; 0x05
    2230:	96 95       	lsr	r25
    2232:	87 95       	ror	r24
    2234:	96 95       	lsr	r25
    2236:	87 95       	ror	r24
    2238:	96 95       	lsr	r25
    223a:	87 95       	ror	r24
    223c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit((u8)(Copy_u8MsgID<<5) | (0b00000001 << 3));
    2240:	8c 81       	ldd	r24, Y+4	; 0x04
    2242:	82 95       	swap	r24
    2244:	88 0f       	add	r24, r24
    2246:	80 7e       	andi	r24, 0xE0	; 224
    2248:	88 60       	ori	r24, 0x08	; 8
    224a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(0);
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(0);
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>

	/* DLC (Data length)
	 *  IS 1000 RTR IS 0 SO WRITE  */
	MSPI_U8MasterTransmit(Copy_u8DataLen_DLC&0x0F);
    225a:	8e 81       	ldd	r24, Y+6	; 0x06
    225c:	8f 70       	andi	r24, 0x0F	; 15
    225e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>

	/* Send data */
	for(int i =0; i<(Copy_u8DataLen_DLC & 0x0F);i++)
    2262:	1a 82       	std	Y+2, r1	; 0x02
    2264:	19 82       	std	Y+1, r1	; 0x01
    2266:	0f c0       	rjmp	.+30     	; 0x2286 <HMCP2515_VidSendCAN_Msg+0x92>
	{
		MSPI_U8MasterTransmit(Copy_u8data[i]);
    2268:	29 81       	ldd	r18, Y+1	; 0x01
    226a:	3a 81       	ldd	r19, Y+2	; 0x02
    226c:	8f 81       	ldd	r24, Y+7	; 0x07
    226e:	98 85       	ldd	r25, Y+8	; 0x08
    2270:	fc 01       	movw	r30, r24
    2272:	e2 0f       	add	r30, r18
    2274:	f3 1f       	adc	r31, r19
    2276:	80 81       	ld	r24, Z
    2278:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	/* DLC (Data length)
	 *  IS 1000 RTR IS 0 SO WRITE  */
	MSPI_U8MasterTransmit(Copy_u8DataLen_DLC&0x0F);

	/* Send data */
	for(int i =0; i<(Copy_u8DataLen_DLC & 0x0F);i++)
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	9a 81       	ldd	r25, Y+2	; 0x02
    2280:	01 96       	adiw	r24, 0x01	; 1
    2282:	9a 83       	std	Y+2, r25	; 0x02
    2284:	89 83       	std	Y+1, r24	; 0x01
    2286:	8e 81       	ldd	r24, Y+6	; 0x06
    2288:	88 2f       	mov	r24, r24
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	9c 01       	movw	r18, r24
    228e:	2f 70       	andi	r18, 0x0F	; 15
    2290:	30 70       	andi	r19, 0x00	; 0
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	9a 81       	ldd	r25, Y+2	; 0x02
    2296:	82 17       	cp	r24, r18
    2298:	93 07       	cpc	r25, r19
    229a:	34 f3       	brlt	.-52     	; 0x2268 <HMCP2515_VidSendCAN_Msg+0x74>
	{
		MSPI_U8MasterTransmit(Copy_u8data[i]);
	}

	/* good bye for bus */
	MSPI_VidChipSelect(0);
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	0e 94 df 08 	call	0x11be	; 0x11be <MSPI_VidChipSelect>

	/* Request to send data */
	MSPI_VidChipSelect(1);
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	0e 94 df 08 	call	0x11be	; 0x11be <MSPI_VidChipSelect>
	MSPI_U8MasterTransmit(MCP2515_MREG2SENDTXB0_INST);
    22a8:	81 e8       	ldi	r24, 0x81	; 129
    22aa:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	MSPI_VidChipSelect(0);
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	0e 94 df 08 	call	0x11be	; 0x11be <MSPI_VidChipSelect>


}
    22b4:	28 96       	adiw	r28, 0x08	; 8
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <HMCP2515_voidRollOver>:
/**** Declaration End  *****/

/* ***  RollOver Function Start ** */

void HMCP2515_voidRollOver(u8 Copy_u8BUKT)
	{
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	0f 92       	push	r0
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	89 83       	std	Y+1, r24	; 0x01
	   /*
	    * BUKT: Rollover Enable bit
         1 = RXB0 message will roll over and be written to RXB1 if RXB0 is full
         0 = Rollover is disable
	    */
		HMCP2515_voidBitModify(RXB0CTRL , 1<<Copy_u8BUKT, 1<<Copy_u8BUKT );
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	28 2f       	mov	r18, r24
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <HMCP2515_voidRollOver+0x1c>
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	2a 95       	dec	r18
    22e4:	e2 f7       	brpl	.-8      	; 0x22de <HMCP2515_voidRollOver+0x18>
    22e6:	48 2f       	mov	r20, r24
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <HMCP2515_voidRollOver+0x32>
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	2a 95       	dec	r18
    22fa:	e2 f7       	brpl	.-8      	; 0x22f4 <HMCP2515_voidRollOver+0x2e>
    22fc:	98 2f       	mov	r25, r24
    22fe:	80 e6       	ldi	r24, 0x60	; 96
    2300:	64 2f       	mov	r22, r20
    2302:	49 2f       	mov	r20, r25
    2304:	0e 94 81 10 	call	0x2102	; 0x2102 <HMCP2515_voidBitModify>
	}
    2308:	0f 90       	pop	r0
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret

00002310 <HMCP2515_voidSetMask>:

/* ***  RollOver Function End  ** */

/* ***  Set Mask Function Start ** */
void HMCP2515_voidSetMask(u8 Copy_u8address_mask_Reg ,u32 Copy_u32Mask_Value ,u8 Copy_u8Extended)
{
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	00 d0       	rcall	.+0      	; 0x2316 <HMCP2515_voidSetMask+0x6>
    2316:	00 d0       	rcall	.+0      	; 0x2318 <HMCP2515_voidSetMask+0x8>
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	89 83       	std	Y+1, r24	; 0x01
    231e:	7b 83       	std	Y+3, r23	; 0x03
    2320:	6a 83       	std	Y+2, r22	; 0x02
    2322:	4c 83       	std	Y+4, r20	; 0x04
		  MSPI_VidChipSelect(1);
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	0e 94 df 08 	call	0x11be	; 0x11be <MSPI_VidChipSelect>
		  MSPI_U8MasterTransmit(MCP2515_WRITE_INST);
    232a:	82 e0       	ldi	r24, 0x02	; 2
    232c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit(Copy_u8address_mask_Reg);
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	  if(Copy_u8Extended)
    2336:	8c 81       	ldd	r24, Y+4	; 0x04
    2338:	88 23       	and	r24, r24
    233a:	59 f1       	breq	.+86     	; 0x2392 <HMCP2515_voidSetMask+0x82>
	  {
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value>>3));
    233c:	8a 81       	ldd	r24, Y+2	; 0x02
    233e:	9b 81       	ldd	r25, Y+3	; 0x03
    2340:	96 95       	lsr	r25
    2342:	87 95       	ror	r24
    2344:	96 95       	lsr	r25
    2346:	87 95       	ror	r24
    2348:	96 95       	lsr	r25
    234a:	87 95       	ror	r24
    234c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value<<5) | (0b00000001 << 3));
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	82 95       	swap	r24
    2354:	88 0f       	add	r24, r24
    2356:	80 7e       	andi	r24, 0xE0	; 224
    2358:	88 60       	ori	r24, 0x08	; 8
    235a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value>>3)|(u8)(Copy_u32Mask_Value>>27));
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	9b 81       	ldd	r25, Y+3	; 0x03
    2362:	96 95       	lsr	r25
    2364:	87 95       	ror	r24
    2366:	96 95       	lsr	r25
    2368:	87 95       	ror	r24
    236a:	96 95       	lsr	r25
    236c:	87 95       	ror	r24
    236e:	28 2f       	mov	r18, r24
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
    2372:	9b 81       	ldd	r25, Y+3	; 0x03
    2374:	99 27       	eor	r25, r25
    2376:	88 27       	eor	r24, r24
    2378:	82 2b       	or	r24, r18
    237a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value>>11));
    237e:	8a 81       	ldd	r24, Y+2	; 0x02
    2380:	9b 81       	ldd	r25, Y+3	; 0x03
    2382:	89 2f       	mov	r24, r25
    2384:	99 27       	eor	r25, r25
    2386:	86 95       	lsr	r24
    2388:	86 95       	lsr	r24
    238a:	86 95       	lsr	r24
    238c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
    2390:	10 c0       	rjmp	.+32     	; 0x23b2 <HMCP2515_voidSetMask+0xa2>
	  }
	  else
	  {
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value>>3));
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	9b 81       	ldd	r25, Y+3	; 0x03
    2396:	96 95       	lsr	r25
    2398:	87 95       	ror	r24
    239a:	96 95       	lsr	r25
    239c:	87 95       	ror	r24
    239e:	96 95       	lsr	r25
    23a0:	87 95       	ror	r24
    23a2:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value<<5));
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	82 95       	swap	r24
    23aa:	88 0f       	add	r24, r24
    23ac:	80 7e       	andi	r24, 0xE0	; 224
    23ae:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	  }
	    MSPI_VidChipSelect(0);
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	0e 94 df 08 	call	0x11be	; 0x11be <MSPI_VidChipSelect>
}
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <HMCP2515_voidRecievInit>:

/* ***  Set Mask Function End ** */

/* ***  Receive Initialization   Start ** */
void HMCP2515_voidRecievInit(void)
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
	MSPI_voidSpiMasterInit();
    23ce:	0e 94 ad 07 	call	0xf5a	; 0xf5a <MSPI_voidSpiMasterInit>
	HMCP2515_voidResetInst();
    23d2:	0e 94 71 10 	call	0x20e2	; 0x20e2 <HMCP2515_voidResetInst>

	/* Enable  Configuration  mode and Enable clock  To Set Bit Timing*/
	HMCP2515_voidWriteReg(CANCTRL,0x87);
    23d6:	8f e0       	ldi	r24, 0x0F	; 15
    23d8:	67 e8       	ldi	r22, 0x87	; 135
    23da:	0e 94 3a 10 	call	0x2074	; 0x2074 <HMCP2515_voidWriteReg>
	/* Stuck until Enter Configuration Mode  */
	while((HMCP2515_U8ReadReg(CANSTAT)>>5) != CONFIG_MODE){}
    23de:	8e e0       	ldi	r24, 0x0E	; 14
    23e0:	0e 94 55 10 	call	0x20aa	; 0x20aa <HMCP2515_U8ReadReg>
    23e4:	82 95       	swap	r24
    23e6:	86 95       	lsr	r24
    23e8:	87 70       	andi	r24, 0x07	; 7
    23ea:	84 30       	cpi	r24, 0x04	; 4
    23ec:	c1 f7       	brne	.-16     	; 0x23de <HMCP2515_voidRecievInit+0x18>
	 * CNF1 = (2<<6)
	 * CNF2 = (1<<7)|(6<<3)|(1)
	 * CNF3 = (0x15)
	*/

	HMCP2515_voidSetBitTiming(2<<6, (1<<7)|(6<<3)|(1), (0x15));
    23ee:	80 e8       	ldi	r24, 0x80	; 128
    23f0:	61 eb       	ldi	r22, 0xB1	; 177
    23f2:	45 e1       	ldi	r20, 0x15	; 21
    23f4:	0e 94 a2 10 	call	0x2144	; 0x2144 <HMCP2515_voidSetBitTiming>

	HMCP2515_voidSetMask(RXM0SIDH, 0x00000000, 1) ;
    23f8:	80 e2       	ldi	r24, 0x20	; 32
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	70 e0       	ldi	r23, 0x00	; 0
    23fe:	41 e0       	ldi	r20, 0x01	; 1
    2400:	0e 94 88 11 	call	0x2310	; 0x2310 <HMCP2515_voidSetMask>
	HMCP2515_voidSetMask(RXM1SIDH, 0x00000000, 1) ;
    2404:	84 e2       	ldi	r24, 0x24	; 36
    2406:	60 e0       	ldi	r22, 0x00	; 0
    2408:	70 e0       	ldi	r23, 0x00	; 0
    240a:	41 e0       	ldi	r20, 0x01	; 1
    240c:	0e 94 88 11 	call	0x2310	; 0x2310 <HMCP2515_voidSetMask>
	/*
	 *  BUKT: Rollover Enable bit
		1 = RXB0 message will roll over and be written to RXB1 if RXB0 is full
		0 = Rollover is disable
	 */
	HMCP2515_voidRollOver(1);
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	0e 94 63 11 	call	0x22c6	; 0x22c6 <HMCP2515_voidRollOver>

	HMCP2515_voidBitModify(CANINTE, 1<<0, 1<<RX0IE);
    2416:	8b e2       	ldi	r24, 0x2B	; 43
    2418:	61 e0       	ldi	r22, 0x01	; 1
    241a:	41 e0       	ldi	r20, 0x01	; 1
    241c:	0e 94 81 10 	call	0x2102	; 0x2102 <HMCP2515_voidBitModify>

	/*  return to normal mode sending and Receiving*/
	HMCP2515_voidSetMode(NORMAL_MODE);
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	0e 94 bd 10 	call	0x217a	; 0x217a <HMCP2515_voidSetMode>
}
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <HMCP2515_voidRecieveMess>:

/* ***  Receive Initialization  End ** */

/* ***  Receive Message   Start ** */
void HMCP2515_voidRecieveMess(u8 Copy_u8REC_Buff_addres)
{
    242c:	0f 93       	push	r16
    242e:	1f 93       	push	r17
    2430:	df 93       	push	r29
    2432:	cf 93       	push	r28
    2434:	00 d0       	rcall	.+0      	; 0x2436 <HMCP2515_voidRecieveMess+0xa>
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	8a 83       	std	Y+2, r24	; 0x02

	MSPI_VidChipSelect(1);
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	0e 94 df 08 	call	0x11be	; 0x11be <MSPI_VidChipSelect>
   /*
    * Read from Receive buffer
    */
	MSPI_U8MasterTransmit(MCP2515_READ_INST);
    2442:	83 e0       	ldi	r24, 0x03	; 3
    2444:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8REC_Buff_addres);
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
	 /*
	 * Receive Message FROM
	 * RXB0CTRL Register  Until RXBOD7 Data Register
	 */
     for (u8 buff_index =0 ; buff_index <16; buff_index++)
    244e:	19 82       	std	Y+1, r1	; 0x01
    2450:	0d c0       	rjmp	.+26     	; 0x246c <HMCP2515_voidRecieveMess+0x40>
     {
    	 REC_Message[buff_index]=MSPI_U8MasterTransmit(0);
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	08 2f       	mov	r16, r24
    2456:	10 e0       	ldi	r17, 0x00	; 0
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MSPI_U8MasterTransmit>
    245e:	f8 01       	movw	r30, r16
    2460:	e0 58       	subi	r30, 0x80	; 128
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 83       	st	Z, r24
	MSPI_U8MasterTransmit(Copy_u8REC_Buff_addres);
	 /*
	 * Receive Message FROM
	 * RXB0CTRL Register  Until RXBOD7 Data Register
	 */
     for (u8 buff_index =0 ; buff_index <16; buff_index++)
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	8f 5f       	subi	r24, 0xFF	; 255
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	80 31       	cpi	r24, 0x10	; 16
    2470:	80 f3       	brcs	.-32     	; 0x2452 <HMCP2515_voidRecieveMess+0x26>
     {
    	 REC_Message[buff_index]=MSPI_U8MasterTransmit(0);
     }

	MSPI_VidChipSelect(0);
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	0e 94 df 08 	call	0x11be	; 0x11be <MSPI_VidChipSelect>
	/*Clear Flag  */
	HMCP2515_voidWriteReg(CANINTF,0);
    2478:	8c e2       	ldi	r24, 0x2C	; 44
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	0e 94 3a 10 	call	0x2074	; 0x2074 <HMCP2515_voidWriteReg>
}
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	cf 91       	pop	r28
    2486:	df 91       	pop	r29
    2488:	1f 91       	pop	r17
    248a:	0f 91       	pop	r16
    248c:	08 95       	ret

0000248e <LED_u8Mapping>:

/*
 *This function takes the led number, and returns the port and pin of that specific led;
 * it also return 1 if the led exist(between 1 and 8), 0 Otherwise;
 */
static u8 LED_u8Mapping(u8 Copy_u8LedNumber, u8 *Copy_u8PortPtr, u8 *Copy_u8PinPtr){
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	28 97       	sbiw	r28, 0x08	; 8
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	8a 83       	std	Y+2, r24	; 0x02
    24a4:	7c 83       	std	Y+4, r23	; 0x04
    24a6:	6b 83       	std	Y+3, r22	; 0x03
    24a8:	5e 83       	std	Y+6, r21	; 0x06
    24aa:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8LedNumberStatus = 1;
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8LedNumber){
    24b0:	8a 81       	ldd	r24, Y+2	; 0x02
    24b2:	28 2f       	mov	r18, r24
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	38 87       	std	Y+8, r19	; 0x08
    24b8:	2f 83       	std	Y+7, r18	; 0x07
    24ba:	8f 81       	ldd	r24, Y+7	; 0x07
    24bc:	98 85       	ldd	r25, Y+8	; 0x08
    24be:	84 30       	cpi	r24, 0x04	; 4
    24c0:	91 05       	cpc	r25, r1
    24c2:	09 f4       	brne	.+2      	; 0x24c6 <LED_u8Mapping+0x38>
    24c4:	41 c0       	rjmp	.+130    	; 0x2548 <LED_u8Mapping+0xba>
    24c6:	2f 81       	ldd	r18, Y+7	; 0x07
    24c8:	38 85       	ldd	r19, Y+8	; 0x08
    24ca:	25 30       	cpi	r18, 0x05	; 5
    24cc:	31 05       	cpc	r19, r1
    24ce:	84 f4       	brge	.+32     	; 0x24f0 <LED_u8Mapping+0x62>
    24d0:	8f 81       	ldd	r24, Y+7	; 0x07
    24d2:	98 85       	ldd	r25, Y+8	; 0x08
    24d4:	82 30       	cpi	r24, 0x02	; 2
    24d6:	91 05       	cpc	r25, r1
    24d8:	39 f1       	breq	.+78     	; 0x2528 <LED_u8Mapping+0x9a>
    24da:	2f 81       	ldd	r18, Y+7	; 0x07
    24dc:	38 85       	ldd	r19, Y+8	; 0x08
    24de:	23 30       	cpi	r18, 0x03	; 3
    24e0:	31 05       	cpc	r19, r1
    24e2:	54 f5       	brge	.+84     	; 0x2538 <LED_u8Mapping+0xaa>
    24e4:	8f 81       	ldd	r24, Y+7	; 0x07
    24e6:	98 85       	ldd	r25, Y+8	; 0x08
    24e8:	81 30       	cpi	r24, 0x01	; 1
    24ea:	91 05       	cpc	r25, r1
    24ec:	b1 f0       	breq	.+44     	; 0x251a <LED_u8Mapping+0x8c>
    24ee:	54 c0       	rjmp	.+168    	; 0x2598 <LED_u8Mapping+0x10a>
    24f0:	2f 81       	ldd	r18, Y+7	; 0x07
    24f2:	38 85       	ldd	r19, Y+8	; 0x08
    24f4:	26 30       	cpi	r18, 0x06	; 6
    24f6:	31 05       	cpc	r19, r1
    24f8:	b9 f1       	breq	.+110    	; 0x2568 <LED_u8Mapping+0xda>
    24fa:	8f 81       	ldd	r24, Y+7	; 0x07
    24fc:	98 85       	ldd	r25, Y+8	; 0x08
    24fe:	86 30       	cpi	r24, 0x06	; 6
    2500:	91 05       	cpc	r25, r1
    2502:	54 f1       	brlt	.+84     	; 0x2558 <LED_u8Mapping+0xca>
    2504:	2f 81       	ldd	r18, Y+7	; 0x07
    2506:	38 85       	ldd	r19, Y+8	; 0x08
    2508:	27 30       	cpi	r18, 0x07	; 7
    250a:	31 05       	cpc	r19, r1
    250c:	a9 f1       	breq	.+106    	; 0x2578 <LED_u8Mapping+0xea>
    250e:	8f 81       	ldd	r24, Y+7	; 0x07
    2510:	98 85       	ldd	r25, Y+8	; 0x08
    2512:	88 30       	cpi	r24, 0x08	; 8
    2514:	91 05       	cpc	r25, r1
    2516:	c1 f1       	breq	.+112    	; 0x2588 <LED_u8Mapping+0xfa>
    2518:	3f c0       	rjmp	.+126    	; 0x2598 <LED_u8Mapping+0x10a>
			case LED_e_1:
				*Copy_u8PortPtr = LED_1_PORT;
    251a:	eb 81       	ldd	r30, Y+3	; 0x03
    251c:	fc 81       	ldd	r31, Y+4	; 0x04
    251e:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_1_PIN;
    2520:	ed 81       	ldd	r30, Y+5	; 0x05
    2522:	fe 81       	ldd	r31, Y+6	; 0x06
    2524:	10 82       	st	Z, r1
    2526:	39 c0       	rjmp	.+114    	; 0x259a <LED_u8Mapping+0x10c>
				break;
			case LED_e_2:
				*Copy_u8PortPtr = LED_2_PORT;
    2528:	eb 81       	ldd	r30, Y+3	; 0x03
    252a:	fc 81       	ldd	r31, Y+4	; 0x04
    252c:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_2_PIN;
    252e:	ed 81       	ldd	r30, Y+5	; 0x05
    2530:	fe 81       	ldd	r31, Y+6	; 0x06
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	80 83       	st	Z, r24
    2536:	31 c0       	rjmp	.+98     	; 0x259a <LED_u8Mapping+0x10c>
				break;
			case LED_e_3:
				*Copy_u8PortPtr = LED_3_PORT;
    2538:	eb 81       	ldd	r30, Y+3	; 0x03
    253a:	fc 81       	ldd	r31, Y+4	; 0x04
    253c:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_3_PIN;
    253e:	ed 81       	ldd	r30, Y+5	; 0x05
    2540:	fe 81       	ldd	r31, Y+6	; 0x06
    2542:	82 e0       	ldi	r24, 0x02	; 2
    2544:	80 83       	st	Z, r24
    2546:	29 c0       	rjmp	.+82     	; 0x259a <LED_u8Mapping+0x10c>
				break;
			case LED_e_4:
				*Copy_u8PortPtr = LED_4_PORT;
    2548:	eb 81       	ldd	r30, Y+3	; 0x03
    254a:	fc 81       	ldd	r31, Y+4	; 0x04
    254c:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_4_PIN;
    254e:	ed 81       	ldd	r30, Y+5	; 0x05
    2550:	fe 81       	ldd	r31, Y+6	; 0x06
    2552:	83 e0       	ldi	r24, 0x03	; 3
    2554:	80 83       	st	Z, r24
    2556:	21 c0       	rjmp	.+66     	; 0x259a <LED_u8Mapping+0x10c>
				break;
			case LED_e_5:
				*Copy_u8PortPtr = LED_5_PORT;
    2558:	eb 81       	ldd	r30, Y+3	; 0x03
    255a:	fc 81       	ldd	r31, Y+4	; 0x04
    255c:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_5_PIN;
    255e:	ed 81       	ldd	r30, Y+5	; 0x05
    2560:	fe 81       	ldd	r31, Y+6	; 0x06
    2562:	84 e0       	ldi	r24, 0x04	; 4
    2564:	80 83       	st	Z, r24
    2566:	19 c0       	rjmp	.+50     	; 0x259a <LED_u8Mapping+0x10c>
				break;
			case LED_e_6:
				*Copy_u8PortPtr = LED_6_PORT;
    2568:	eb 81       	ldd	r30, Y+3	; 0x03
    256a:	fc 81       	ldd	r31, Y+4	; 0x04
    256c:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_6_PIN;
    256e:	ed 81       	ldd	r30, Y+5	; 0x05
    2570:	fe 81       	ldd	r31, Y+6	; 0x06
    2572:	85 e0       	ldi	r24, 0x05	; 5
    2574:	80 83       	st	Z, r24
    2576:	11 c0       	rjmp	.+34     	; 0x259a <LED_u8Mapping+0x10c>
				break;
			case LED_e_7:
				*Copy_u8PortPtr = LED_7_PORT;
    2578:	eb 81       	ldd	r30, Y+3	; 0x03
    257a:	fc 81       	ldd	r31, Y+4	; 0x04
    257c:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_7_PIN;
    257e:	ed 81       	ldd	r30, Y+5	; 0x05
    2580:	fe 81       	ldd	r31, Y+6	; 0x06
    2582:	86 e0       	ldi	r24, 0x06	; 6
    2584:	80 83       	st	Z, r24
    2586:	09 c0       	rjmp	.+18     	; 0x259a <LED_u8Mapping+0x10c>
				break;
			case LED_e_8:
				*Copy_u8PortPtr = LED_8_PORT;
    2588:	eb 81       	ldd	r30, Y+3	; 0x03
    258a:	fc 81       	ldd	r31, Y+4	; 0x04
    258c:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_8_PIN;
    258e:	ed 81       	ldd	r30, Y+5	; 0x05
    2590:	fe 81       	ldd	r31, Y+6	; 0x06
    2592:	87 e0       	ldi	r24, 0x07	; 7
    2594:	80 83       	st	Z, r24
    2596:	01 c0       	rjmp	.+2      	; 0x259a <LED_u8Mapping+0x10c>
				break;
			default:
				Local_u8LedNumberStatus = 0;
    2598:	19 82       	std	Y+1, r1	; 0x01
		}
	return Local_u8LedNumberStatus;
    259a:	89 81       	ldd	r24, Y+1	; 0x01
}
    259c:	28 96       	adiw	r28, 0x08	; 8
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	f8 94       	cli
    25a2:	de bf       	out	0x3e, r29	; 62
    25a4:	0f be       	out	0x3f, r0	; 63
    25a6:	cd bf       	out	0x3d, r28	; 61
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <LED_vidInit>:
/*This function used to initialize the LEDs,
 * it takes:
 * 			1-the array address of type LED_e (this array contains the LEDs you want to initialize).
 * 			2-and the array size.
*/
void LED_vidInit(LED_e *arr_ptr, u8 Copy_u8LedsNumber){
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <LED_vidInit+0x6>
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <LED_vidInit+0x8>
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	9b 83       	std	Y+3, r25	; 0x03
    25bc:	8a 83       	std	Y+2, r24	; 0x02
    25be:	6c 83       	std	Y+4, r22	; 0x04
	for(u8 i=0; i < Copy_u8LedsNumber; i++){
    25c0:	19 82       	std	Y+1, r1	; 0x01
    25c2:	21 c0       	rjmp	.+66     	; 0x2606 <LED_vidInit+0x58>
		LED_NUMBER_STATUS = LED_u8Mapping(arr_ptr[i], &LED_PORT, &LED_PIN);
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	28 2f       	mov	r18, r24
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	9b 81       	ldd	r25, Y+3	; 0x03
    25ce:	fc 01       	movw	r30, r24
    25d0:	e2 0f       	add	r30, r18
    25d2:	f3 1f       	adc	r31, r19
    25d4:	80 81       	ld	r24, Z
    25d6:	2d e7       	ldi	r18, 0x7D	; 125
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	4e e7       	ldi	r20, 0x7E	; 126
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    25de:	b9 01       	movw	r22, r18
    25e0:	0e 94 47 12 	call	0x248e	; 0x248e <LED_u8Mapping>
    25e4:	80 93 7c 00 	sts	0x007C, r24
		if(LED_NUMBER_STATUS){
    25e8:	80 91 7c 00 	lds	r24, 0x007C
    25ec:	88 23       	and	r24, r24
    25ee:	41 f0       	breq	.+16     	; 0x2600 <LED_vidInit+0x52>
			DIO_u8setPinDir(LED_PORT, LED_PIN, DIO_OUTPUT);
    25f0:	80 91 7d 00 	lds	r24, 0x007D
    25f4:	90 91 7e 00 	lds	r25, 0x007E
    25f8:	69 2f       	mov	r22, r25
    25fa:	41 e0       	ldi	r20, 0x01	; 1
    25fc:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <DIO_u8setPinDir>
 * it takes:
 * 			1-the array address of type LED_e (this array contains the LEDs you want to initialize).
 * 			2-and the array size.
*/
void LED_vidInit(LED_e *arr_ptr, u8 Copy_u8LedsNumber){
	for(u8 i=0; i < Copy_u8LedsNumber; i++){
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	8f 5f       	subi	r24, 0xFF	; 255
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	99 81       	ldd	r25, Y+1	; 0x01
    2608:	8c 81       	ldd	r24, Y+4	; 0x04
    260a:	98 17       	cp	r25, r24
    260c:	d8 f2       	brcs	.-74     	; 0x25c4 <LED_vidInit+0x16>
		LED_NUMBER_STATUS = LED_u8Mapping(arr_ptr[i], &LED_PORT, &LED_PIN);
		if(LED_NUMBER_STATUS){
			DIO_u8setPinDir(LED_PORT, LED_PIN, DIO_OUTPUT);
		}
	}
}
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	08 95       	ret

0000261c <LED_vidToggleLed>:

//This function used to toggle the led, it takes the led number;
void LED_vidToggleLed(u8 Copy_u8LedNumber){
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	00 d0       	rcall	.+0      	; 0x2622 <LED_vidToggleLed+0x6>
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
    2626:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8LedStatus;

	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
    2628:	2d e7       	ldi	r18, 0x7D	; 125
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	4e e7       	ldi	r20, 0x7E	; 126
    262e:	50 e0       	ldi	r21, 0x00	; 0
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	b9 01       	movw	r22, r18
    2634:	0e 94 47 12 	call	0x248e	; 0x248e <LED_u8Mapping>
    2638:	80 93 7c 00 	sts	0x007C, r24
	if(LED_NUMBER_STATUS){
    263c:	80 91 7c 00 	lds	r24, 0x007C
    2640:	88 23       	and	r24, r24
    2642:	f9 f0       	breq	.+62     	; 0x2682 <LED_vidToggleLed+0x66>
		DIO_u8getPinVal(LED_PORT, LED_PIN, &Local_u8LedStatus);
    2644:	80 91 7d 00 	lds	r24, 0x007D
    2648:	90 91 7e 00 	lds	r25, 0x007E
    264c:	69 2f       	mov	r22, r25
    264e:	9e 01       	movw	r18, r28
    2650:	2f 5f       	subi	r18, 0xFF	; 255
    2652:	3f 4f       	sbci	r19, 0xFF	; 255
    2654:	a9 01       	movw	r20, r18
    2656:	0e 94 17 0c 	call	0x182e	; 0x182e <DIO_u8getPinVal>
		if(Local_u8LedStatus){
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	88 23       	and	r24, r24
    265e:	49 f0       	breq	.+18     	; 0x2672 <LED_vidToggleLed+0x56>
			DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_LOW);
    2660:	80 91 7d 00 	lds	r24, 0x007D
    2664:	90 91 7e 00 	lds	r25, 0x007E
    2668:	69 2f       	mov	r22, r25
    266a:	40 e0       	ldi	r20, 0x00	; 0
    266c:	0e 94 05 0b 	call	0x160a	; 0x160a <DIO_u8setPinVal>
    2670:	08 c0       	rjmp	.+16     	; 0x2682 <LED_vidToggleLed+0x66>
		}else{
			DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_HIGH);
    2672:	80 91 7d 00 	lds	r24, 0x007D
    2676:	90 91 7e 00 	lds	r25, 0x007E
    267a:	69 2f       	mov	r22, r25
    267c:	41 e0       	ldi	r20, 0x01	; 1
    267e:	0e 94 05 0b 	call	0x160a	; 0x160a <DIO_u8setPinVal>
		}
	}

}
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <LED_vidTurnOnLed>:

//This function used to turn on the led, it takes the led number;
void LED_vidTurnOnLed(u8 Copy_u8LedNumber){
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	0f 92       	push	r0
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	89 83       	std	Y+1, r24	; 0x01
#if LEDS_Configuration == COMMON_CATHODE
	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
    2698:	2d e7       	ldi	r18, 0x7D	; 125
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	4e e7       	ldi	r20, 0x7E	; 126
    269e:	50 e0       	ldi	r21, 0x00	; 0
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	b9 01       	movw	r22, r18
    26a4:	0e 94 47 12 	call	0x248e	; 0x248e <LED_u8Mapping>
    26a8:	80 93 7c 00 	sts	0x007C, r24
	if(LED_NUMBER_STATUS){
    26ac:	80 91 7c 00 	lds	r24, 0x007C
    26b0:	88 23       	and	r24, r24
    26b2:	41 f0       	breq	.+16     	; 0x26c4 <LED_vidTurnOnLed+0x38>
		DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_HIGH);
    26b4:	80 91 7d 00 	lds	r24, 0x007D
    26b8:	90 91 7e 00 	lds	r25, 0x007E
    26bc:	69 2f       	mov	r22, r25
    26be:	41 e0       	ldi	r20, 0x01	; 1
    26c0:	0e 94 05 0b 	call	0x160a	; 0x160a <DIO_u8setPinVal>
	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
	if(LED_NUMBER_STATUS){
		DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_LOW);
	}
#endif
}
    26c4:	0f 90       	pop	r0
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	08 95       	ret

000026cc <LED_vidTurnOffLed>:


//This function used to turn off the led, it takes the led number;
void LED_vidTurnOffLed(u8 Copy_u8LedNumber){
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	0f 92       	push	r0
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	89 83       	std	Y+1, r24	; 0x01
#if LEDS_Configuration == COMMON_CATHODE
	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
    26d8:	2d e7       	ldi	r18, 0x7D	; 125
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	4e e7       	ldi	r20, 0x7E	; 126
    26de:	50 e0       	ldi	r21, 0x00	; 0
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	b9 01       	movw	r22, r18
    26e4:	0e 94 47 12 	call	0x248e	; 0x248e <LED_u8Mapping>
    26e8:	80 93 7c 00 	sts	0x007C, r24
	if(LED_NUMBER_STATUS){
    26ec:	80 91 7c 00 	lds	r24, 0x007C
    26f0:	88 23       	and	r24, r24
    26f2:	41 f0       	breq	.+16     	; 0x2704 <LED_vidTurnOffLed+0x38>
		DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_LOW);
    26f4:	80 91 7d 00 	lds	r24, 0x007D
    26f8:	90 91 7e 00 	lds	r25, 0x007E
    26fc:	69 2f       	mov	r22, r25
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	0e 94 05 0b 	call	0x160a	; 0x160a <DIO_u8setPinVal>
	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
	if(LED_NUMBER_STATUS){
		DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_HIGH);
	}
#endif
}
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <LCD_vidInit>:
#include "../LCD_Handler_V2/LCD_cmds.h"
#include "../LCD_Handler_V2/LCD_err.h"
#include "../LCD_Handler_V2/LCD_int.h"

//function to initialize the LCD
void LCD_vidInit(void){
    270c:	0f 93       	push	r16
    270e:	1f 93       	push	r17
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	cf 54       	subi	r28, 0x4F	; 79
    271a:	d0 40       	sbci	r29, 0x00	; 0
    271c:	0f b6       	in	r0, 0x3f	; 63
    271e:	f8 94       	cli
    2720:	de bf       	out	0x3e, r29	; 62
    2722:	0f be       	out	0x3f, r0	; 63
    2724:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8SetFunction = SET_FUNCTION_CMD;
    2726:	fe 01       	movw	r30, r28
    2728:	e1 5b       	subi	r30, 0xB1	; 177
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	80 e2       	ldi	r24, 0x20	; 32
    272e:	80 83       	st	Z, r24
	u8 local_u8DisplayControl = DISPLAY_CONTROL;
    2730:	fe 01       	movw	r30, r28
    2732:	e2 5b       	subi	r30, 0xB2	; 178
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	88 e0       	ldi	r24, 0x08	; 8
    2738:	80 83       	st	Z, r24
	u8 local_u8EntryModeSet = ENTRY_MODE_SET;
    273a:	fe 01       	movw	r30, r28
    273c:	e3 5b       	subi	r30, 0xB3	; 179
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	84 e0       	ldi	r24, 0x04	; 4
    2742:	80 83       	st	Z, r24

	local_u8SetFunction 	|= ((LCD_MODE<<4) | (NO_OF_LINES<<3));
    2744:	de 01       	movw	r26, r28
    2746:	a1 5b       	subi	r26, 0xB1	; 177
    2748:	bf 4f       	sbci	r27, 0xFF	; 255
    274a:	fe 01       	movw	r30, r28
    274c:	e1 5b       	subi	r30, 0xB1	; 177
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	80 81       	ld	r24, Z
    2752:	88 61       	ori	r24, 0x18	; 24
    2754:	8c 93       	st	X, r24
	local_u8DisplayControl 	|= ((DISPLAY_STATE <<2) | (CURSOR_STATE <<1) | CURSOR_BLINKING);
    2756:	de 01       	movw	r26, r28
    2758:	a2 5b       	subi	r26, 0xB2	; 178
    275a:	bf 4f       	sbci	r27, 0xFF	; 255
    275c:	fe 01       	movw	r30, r28
    275e:	e2 5b       	subi	r30, 0xB2	; 178
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	80 81       	ld	r24, Z
    2764:	86 60       	ori	r24, 0x06	; 6
    2766:	8c 93       	st	X, r24
	local_u8EntryModeSet   	|= ((CURSOR_MOVE_DIRECTION<<1) | (DISPLAY_SHIFT_OPERATION));
    2768:	de 01       	movw	r26, r28
    276a:	a3 5b       	subi	r26, 0xB3	; 179
    276c:	bf 4f       	sbci	r27, 0xFF	; 255
    276e:	fe 01       	movw	r30, r28
    2770:	e3 5b       	subi	r30, 0xB3	; 179
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	80 81       	ld	r24, Z
    2776:	82 60       	ori	r24, 0x02	; 2
    2778:	8c 93       	st	X, r24

	DIO_u8setPortDir(LCD_DATA_PORT, DIO_FULL_OUTPUT);
    277a:	82 e0       	ldi	r24, 0x02	; 2
    277c:	6f ef       	ldi	r22, 0xFF	; 255
    277e:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_u8setPortDir>
	DIO_u8setPinDir(RS_PORT, RS_PIN, DIO_OUTPUT);
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	62 e0       	ldi	r22, 0x02	; 2
    2786:	41 e0       	ldi	r20, 0x01	; 1
    2788:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <DIO_u8setPinDir>
	DIO_u8setPinDir(RW_PORT, RW_PIN, DIO_OUTPUT);
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	61 e0       	ldi	r22, 0x01	; 1
    2790:	41 e0       	ldi	r20, 0x01	; 1
    2792:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <DIO_u8setPinDir>
	DIO_u8setPinDir(E_PORT, E_PIN, DIO_OUTPUT);
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	60 e0       	ldi	r22, 0x00	; 0
    279a:	41 e0       	ldi	r20, 0x01	; 1
    279c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <DIO_u8setPinDir>
    27a0:	fe 01       	movw	r30, r28
    27a2:	e7 5b       	subi	r30, 0xB7	; 183
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	a0 e2       	ldi	r26, 0x20	; 32
    27ac:	b2 e4       	ldi	r27, 0x42	; 66
    27ae:	80 83       	st	Z, r24
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	a2 83       	std	Z+2, r26	; 0x02
    27b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b6:	8e 01       	movw	r16, r28
    27b8:	0b 5b       	subi	r16, 0xBB	; 187
    27ba:	1f 4f       	sbci	r17, 0xFF	; 255
    27bc:	fe 01       	movw	r30, r28
    27be:	e7 5b       	subi	r30, 0xB7	; 183
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	60 81       	ld	r22, Z
    27c4:	71 81       	ldd	r23, Z+1	; 0x01
    27c6:	82 81       	ldd	r24, Z+2	; 0x02
    27c8:	93 81       	ldd	r25, Z+3	; 0x03
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	4a ef       	ldi	r20, 0xFA	; 250
    27d0:	54 e4       	ldi	r21, 0x44	; 68
    27d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	f8 01       	movw	r30, r16
    27dc:	80 83       	st	Z, r24
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	a2 83       	std	Z+2, r26	; 0x02
    27e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27e4:	fe 01       	movw	r30, r28
    27e6:	eb 5b       	subi	r30, 0xBB	; 187
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	60 81       	ld	r22, Z
    27ec:	71 81       	ldd	r23, Z+1	; 0x01
    27ee:	82 81       	ldd	r24, Z+2	; 0x02
    27f0:	93 81       	ldd	r25, Z+3	; 0x03
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	40 e8       	ldi	r20, 0x80	; 128
    27f8:	5f e3       	ldi	r21, 0x3F	; 63
    27fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27fe:	88 23       	and	r24, r24
    2800:	44 f4       	brge	.+16     	; 0x2812 <LCD_vidInit+0x106>
		__ticks = 1;
    2802:	fe 01       	movw	r30, r28
    2804:	ed 5b       	subi	r30, 0xBD	; 189
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	91 83       	std	Z+1, r25	; 0x01
    280e:	80 83       	st	Z, r24
    2810:	64 c0       	rjmp	.+200    	; 0x28da <LCD_vidInit+0x1ce>
	else if (__tmp > 65535)
    2812:	fe 01       	movw	r30, r28
    2814:	eb 5b       	subi	r30, 0xBB	; 187
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	60 81       	ld	r22, Z
    281a:	71 81       	ldd	r23, Z+1	; 0x01
    281c:	82 81       	ldd	r24, Z+2	; 0x02
    281e:	93 81       	ldd	r25, Z+3	; 0x03
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	3f ef       	ldi	r19, 0xFF	; 255
    2824:	4f e7       	ldi	r20, 0x7F	; 127
    2826:	57 e4       	ldi	r21, 0x47	; 71
    2828:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    282c:	18 16       	cp	r1, r24
    282e:	0c f0       	brlt	.+2      	; 0x2832 <LCD_vidInit+0x126>
    2830:	43 c0       	rjmp	.+134    	; 0x28b8 <LCD_vidInit+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2832:	fe 01       	movw	r30, r28
    2834:	e7 5b       	subi	r30, 0xB7	; 183
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	60 81       	ld	r22, Z
    283a:	71 81       	ldd	r23, Z+1	; 0x01
    283c:	82 81       	ldd	r24, Z+2	; 0x02
    283e:	93 81       	ldd	r25, Z+3	; 0x03
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e2       	ldi	r20, 0x20	; 32
    2846:	51 e4       	ldi	r21, 0x41	; 65
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	8e 01       	movw	r16, r28
    2852:	0d 5b       	subi	r16, 0xBD	; 189
    2854:	1f 4f       	sbci	r17, 0xFF	; 255
    2856:	bc 01       	movw	r22, r24
    2858:	cd 01       	movw	r24, r26
    285a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	f8 01       	movw	r30, r16
    2864:	91 83       	std	Z+1, r25	; 0x01
    2866:	80 83       	st	Z, r24
    2868:	1f c0       	rjmp	.+62     	; 0x28a8 <LCD_vidInit+0x19c>
    286a:	fe 01       	movw	r30, r28
    286c:	ef 5b       	subi	r30, 0xBF	; 191
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	88 ec       	ldi	r24, 0xC8	; 200
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	91 83       	std	Z+1, r25	; 0x01
    2876:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2878:	fe 01       	movw	r30, r28
    287a:	ef 5b       	subi	r30, 0xBF	; 191
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	80 81       	ld	r24, Z
    2880:	91 81       	ldd	r25, Z+1	; 0x01
    2882:	01 97       	sbiw	r24, 0x01	; 1
    2884:	f1 f7       	brne	.-4      	; 0x2882 <LCD_vidInit+0x176>
    2886:	fe 01       	movw	r30, r28
    2888:	ef 5b       	subi	r30, 0xBF	; 191
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	91 83       	std	Z+1, r25	; 0x01
    288e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2890:	de 01       	movw	r26, r28
    2892:	ad 5b       	subi	r26, 0xBD	; 189
    2894:	bf 4f       	sbci	r27, 0xFF	; 255
    2896:	fe 01       	movw	r30, r28
    2898:	ed 5b       	subi	r30, 0xBD	; 189
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	80 81       	ld	r24, Z
    289e:	91 81       	ldd	r25, Z+1	; 0x01
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	11 96       	adiw	r26, 0x01	; 1
    28a4:	9c 93       	st	X, r25
    28a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a8:	fe 01       	movw	r30, r28
    28aa:	ed 5b       	subi	r30, 0xBD	; 189
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	80 81       	ld	r24, Z
    28b0:	91 81       	ldd	r25, Z+1	; 0x01
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	d1 f6       	brne	.-76     	; 0x286a <LCD_vidInit+0x15e>
    28b6:	24 c0       	rjmp	.+72     	; 0x2900 <LCD_vidInit+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b8:	8e 01       	movw	r16, r28
    28ba:	0d 5b       	subi	r16, 0xBD	; 189
    28bc:	1f 4f       	sbci	r17, 0xFF	; 255
    28be:	fe 01       	movw	r30, r28
    28c0:	eb 5b       	subi	r30, 0xBB	; 187
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	60 81       	ld	r22, Z
    28c6:	71 81       	ldd	r23, Z+1	; 0x01
    28c8:	82 81       	ldd	r24, Z+2	; 0x02
    28ca:	93 81       	ldd	r25, Z+3	; 0x03
    28cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	f8 01       	movw	r30, r16
    28d6:	91 83       	std	Z+1, r25	; 0x01
    28d8:	80 83       	st	Z, r24
    28da:	fe 01       	movw	r30, r28
    28dc:	ed 5b       	subi	r30, 0xBD	; 189
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	80 81       	ld	r24, Z
    28e2:	91 81       	ldd	r25, Z+1	; 0x01
    28e4:	fe 01       	movw	r30, r28
    28e6:	ff 96       	adiw	r30, 0x3f	; 63
    28e8:	91 83       	std	Z+1, r25	; 0x01
    28ea:	80 83       	st	Z, r24
    28ec:	fe 01       	movw	r30, r28
    28ee:	ff 96       	adiw	r30, 0x3f	; 63
    28f0:	80 81       	ld	r24, Z
    28f2:	91 81       	ldd	r25, Z+1	; 0x01
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	f1 f7       	brne	.-4      	; 0x28f4 <LCD_vidInit+0x1e8>
    28f8:	fe 01       	movw	r30, r28
    28fa:	ff 96       	adiw	r30, 0x3f	; 63
    28fc:	91 83       	std	Z+1, r25	; 0x01
    28fe:	80 83       	st	Z, r24


#if  LCD_MODE == EIGHT_BITS
	_delay_ms(40);
	LCD_vidSendCmd(local_u8SetFunction);
    2900:	fe 01       	movw	r30, r28
    2902:	e1 5b       	subi	r30, 0xB1	; 177
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	80 81       	ld	r24, Z
    2908:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_vidSendCmd>
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	a8 e4       	ldi	r26, 0x48	; 72
    2912:	b2 e4       	ldi	r27, 0x42	; 66
    2914:	8b af       	std	Y+59, r24	; 0x3b
    2916:	9c af       	std	Y+60, r25	; 0x3c
    2918:	ad af       	std	Y+61, r26	; 0x3d
    291a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    291c:	6b ad       	ldd	r22, Y+59	; 0x3b
    291e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2920:	8d ad       	ldd	r24, Y+61	; 0x3d
    2922:	9e ad       	ldd	r25, Y+62	; 0x3e
    2924:	2b ea       	ldi	r18, 0xAB	; 171
    2926:	3a ea       	ldi	r19, 0xAA	; 170
    2928:	4a e2       	ldi	r20, 0x2A	; 42
    292a:	50 e4       	ldi	r21, 0x40	; 64
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	8f ab       	std	Y+55, r24	; 0x37
    2936:	98 af       	std	Y+56, r25	; 0x38
    2938:	a9 af       	std	Y+57, r26	; 0x39
    293a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    293c:	6f a9       	ldd	r22, Y+55	; 0x37
    293e:	78 ad       	ldd	r23, Y+56	; 0x38
    2940:	89 ad       	ldd	r24, Y+57	; 0x39
    2942:	9a ad       	ldd	r25, Y+58	; 0x3a
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e8       	ldi	r20, 0x80	; 128
    294a:	5f e3       	ldi	r21, 0x3F	; 63
    294c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2950:	88 23       	and	r24, r24
    2952:	1c f4       	brge	.+6      	; 0x295a <LCD_vidInit+0x24e>
		__ticks = 1;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	8e ab       	std	Y+54, r24	; 0x36
    2958:	91 c0       	rjmp	.+290    	; 0x2a7c <LCD_vidInit+0x370>
	else if (__tmp > 255)
    295a:	6f a9       	ldd	r22, Y+55	; 0x37
    295c:	78 ad       	ldd	r23, Y+56	; 0x38
    295e:	89 ad       	ldd	r24, Y+57	; 0x39
    2960:	9a ad       	ldd	r25, Y+58	; 0x3a
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	4f e7       	ldi	r20, 0x7F	; 127
    2968:	53 e4       	ldi	r21, 0x43	; 67
    296a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    296e:	18 16       	cp	r1, r24
    2970:	0c f0       	brlt	.+2      	; 0x2974 <LCD_vidInit+0x268>
    2972:	7b c0       	rjmp	.+246    	; 0x2a6a <LCD_vidInit+0x35e>
	{
		_delay_ms(__us / 1000.0);
    2974:	6b ad       	ldd	r22, Y+59	; 0x3b
    2976:	7c ad       	ldd	r23, Y+60	; 0x3c
    2978:	8d ad       	ldd	r24, Y+61	; 0x3d
    297a:	9e ad       	ldd	r25, Y+62	; 0x3e
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	4a e7       	ldi	r20, 0x7A	; 122
    2982:	54 e4       	ldi	r21, 0x44	; 68
    2984:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	8a ab       	std	Y+50, r24	; 0x32
    298e:	9b ab       	std	Y+51, r25	; 0x33
    2990:	ac ab       	std	Y+52, r26	; 0x34
    2992:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2994:	6a a9       	ldd	r22, Y+50	; 0x32
    2996:	7b a9       	ldd	r23, Y+51	; 0x33
    2998:	8c a9       	ldd	r24, Y+52	; 0x34
    299a:	9d a9       	ldd	r25, Y+53	; 0x35
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	4a ef       	ldi	r20, 0xFA	; 250
    29a2:	54 e4       	ldi	r21, 0x44	; 68
    29a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	8e a7       	std	Y+46, r24	; 0x2e
    29ae:	9f a7       	std	Y+47, r25	; 0x2f
    29b0:	a8 ab       	std	Y+48, r26	; 0x30
    29b2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    29b4:	6e a5       	ldd	r22, Y+46	; 0x2e
    29b6:	7f a5       	ldd	r23, Y+47	; 0x2f
    29b8:	88 a9       	ldd	r24, Y+48	; 0x30
    29ba:	99 a9       	ldd	r25, Y+49	; 0x31
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e8       	ldi	r20, 0x80	; 128
    29c2:	5f e3       	ldi	r21, 0x3F	; 63
    29c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29c8:	88 23       	and	r24, r24
    29ca:	2c f4       	brge	.+10     	; 0x29d6 <LCD_vidInit+0x2ca>
		__ticks = 1;
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	9d a7       	std	Y+45, r25	; 0x2d
    29d2:	8c a7       	std	Y+44, r24	; 0x2c
    29d4:	3f c0       	rjmp	.+126    	; 0x2a54 <LCD_vidInit+0x348>
	else if (__tmp > 65535)
    29d6:	6e a5       	ldd	r22, Y+46	; 0x2e
    29d8:	7f a5       	ldd	r23, Y+47	; 0x2f
    29da:	88 a9       	ldd	r24, Y+48	; 0x30
    29dc:	99 a9       	ldd	r25, Y+49	; 0x31
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	3f ef       	ldi	r19, 0xFF	; 255
    29e2:	4f e7       	ldi	r20, 0x7F	; 127
    29e4:	57 e4       	ldi	r21, 0x47	; 71
    29e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29ea:	18 16       	cp	r1, r24
    29ec:	4c f5       	brge	.+82     	; 0x2a40 <LCD_vidInit+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ee:	6a a9       	ldd	r22, Y+50	; 0x32
    29f0:	7b a9       	ldd	r23, Y+51	; 0x33
    29f2:	8c a9       	ldd	r24, Y+52	; 0x34
    29f4:	9d a9       	ldd	r25, Y+53	; 0x35
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e2       	ldi	r20, 0x20	; 32
    29fc:	51 e4       	ldi	r21, 0x41	; 65
    29fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	bc 01       	movw	r22, r24
    2a08:	cd 01       	movw	r24, r26
    2a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	9d a7       	std	Y+45, r25	; 0x2d
    2a14:	8c a7       	std	Y+44, r24	; 0x2c
    2a16:	0f c0       	rjmp	.+30     	; 0x2a36 <LCD_vidInit+0x32a>
    2a18:	88 ec       	ldi	r24, 0xC8	; 200
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	9b a7       	std	Y+43, r25	; 0x2b
    2a1e:	8a a7       	std	Y+42, r24	; 0x2a
    2a20:	8a a5       	ldd	r24, Y+42	; 0x2a
    2a22:	9b a5       	ldd	r25, Y+43	; 0x2b
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <LCD_vidInit+0x318>
    2a28:	9b a7       	std	Y+43, r25	; 0x2b
    2a2a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a2c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a2e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	9d a7       	std	Y+45, r25	; 0x2d
    2a34:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a36:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a38:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a3a:	00 97       	sbiw	r24, 0x00	; 0
    2a3c:	69 f7       	brne	.-38     	; 0x2a18 <LCD_vidInit+0x30c>
    2a3e:	24 c0       	rjmp	.+72     	; 0x2a88 <LCD_vidInit+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a40:	6e a5       	ldd	r22, Y+46	; 0x2e
    2a42:	7f a5       	ldd	r23, Y+47	; 0x2f
    2a44:	88 a9       	ldd	r24, Y+48	; 0x30
    2a46:	99 a9       	ldd	r25, Y+49	; 0x31
    2a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	9d a7       	std	Y+45, r25	; 0x2d
    2a52:	8c a7       	std	Y+44, r24	; 0x2c
    2a54:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a56:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a58:	99 a7       	std	Y+41, r25	; 0x29
    2a5a:	88 a7       	std	Y+40, r24	; 0x28
    2a5c:	88 a5       	ldd	r24, Y+40	; 0x28
    2a5e:	99 a5       	ldd	r25, Y+41	; 0x29
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	f1 f7       	brne	.-4      	; 0x2a60 <LCD_vidInit+0x354>
    2a64:	99 a7       	std	Y+41, r25	; 0x29
    2a66:	88 a7       	std	Y+40, r24	; 0x28
    2a68:	0f c0       	rjmp	.+30     	; 0x2a88 <LCD_vidInit+0x37c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a6a:	6f a9       	ldd	r22, Y+55	; 0x37
    2a6c:	78 ad       	ldd	r23, Y+56	; 0x38
    2a6e:	89 ad       	ldd	r24, Y+57	; 0x39
    2a70:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	8e ab       	std	Y+54, r24	; 0x36
    2a7c:	8e a9       	ldd	r24, Y+54	; 0x36
    2a7e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a80:	8f a1       	ldd	r24, Y+39	; 0x27
    2a82:	8a 95       	dec	r24
    2a84:	f1 f7       	brne	.-4      	; 0x2a82 <LCD_vidInit+0x376>
    2a86:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	LCD_vidSendCmd(local_u8DisplayControl);
    2a88:	fe 01       	movw	r30, r28
    2a8a:	e2 5b       	subi	r30, 0xB2	; 178
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	80 81       	ld	r24, Z
    2a90:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_vidSendCmd>
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	a8 e4       	ldi	r26, 0x48	; 72
    2a9a:	b2 e4       	ldi	r27, 0x42	; 66
    2a9c:	8b a3       	std	Y+35, r24	; 0x23
    2a9e:	9c a3       	std	Y+36, r25	; 0x24
    2aa0:	ad a3       	std	Y+37, r26	; 0x25
    2aa2:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2aa4:	6b a1       	ldd	r22, Y+35	; 0x23
    2aa6:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa8:	8d a1       	ldd	r24, Y+37	; 0x25
    2aaa:	9e a1       	ldd	r25, Y+38	; 0x26
    2aac:	2b ea       	ldi	r18, 0xAB	; 171
    2aae:	3a ea       	ldi	r19, 0xAA	; 170
    2ab0:	4a e2       	ldi	r20, 0x2A	; 42
    2ab2:	50 e4       	ldi	r21, 0x40	; 64
    2ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	8f 8f       	std	Y+31, r24	; 0x1f
    2abe:	98 a3       	std	Y+32, r25	; 0x20
    2ac0:	a9 a3       	std	Y+33, r26	; 0x21
    2ac2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2ac4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ac6:	78 a1       	ldd	r23, Y+32	; 0x20
    2ac8:	89 a1       	ldd	r24, Y+33	; 0x21
    2aca:	9a a1       	ldd	r25, Y+34	; 0x22
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	40 e8       	ldi	r20, 0x80	; 128
    2ad2:	5f e3       	ldi	r21, 0x3F	; 63
    2ad4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ad8:	88 23       	and	r24, r24
    2ada:	1c f4       	brge	.+6      	; 0x2ae2 <LCD_vidInit+0x3d6>
		__ticks = 1;
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	8e 8f       	std	Y+30, r24	; 0x1e
    2ae0:	91 c0       	rjmp	.+290    	; 0x2c04 <LCD_vidInit+0x4f8>
	else if (__tmp > 255)
    2ae2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ae4:	78 a1       	ldd	r23, Y+32	; 0x20
    2ae6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae8:	9a a1       	ldd	r25, Y+34	; 0x22
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	4f e7       	ldi	r20, 0x7F	; 127
    2af0:	53 e4       	ldi	r21, 0x43	; 67
    2af2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2af6:	18 16       	cp	r1, r24
    2af8:	0c f0       	brlt	.+2      	; 0x2afc <LCD_vidInit+0x3f0>
    2afa:	7b c0       	rjmp	.+246    	; 0x2bf2 <LCD_vidInit+0x4e6>
	{
		_delay_ms(__us / 1000.0);
    2afc:	6b a1       	ldd	r22, Y+35	; 0x23
    2afe:	7c a1       	ldd	r23, Y+36	; 0x24
    2b00:	8d a1       	ldd	r24, Y+37	; 0x25
    2b02:	9e a1       	ldd	r25, Y+38	; 0x26
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	4a e7       	ldi	r20, 0x7A	; 122
    2b0a:	54 e4       	ldi	r21, 0x44	; 68
    2b0c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	8a 8f       	std	Y+26, r24	; 0x1a
    2b16:	9b 8f       	std	Y+27, r25	; 0x1b
    2b18:	ac 8f       	std	Y+28, r26	; 0x1c
    2b1a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b1c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2b1e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2b20:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b22:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	4a ef       	ldi	r20, 0xFA	; 250
    2b2a:	54 e4       	ldi	r21, 0x44	; 68
    2b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	8e 8b       	std	Y+22, r24	; 0x16
    2b36:	9f 8b       	std	Y+23, r25	; 0x17
    2b38:	a8 8f       	std	Y+24, r26	; 0x18
    2b3a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2b3c:	6e 89       	ldd	r22, Y+22	; 0x16
    2b3e:	7f 89       	ldd	r23, Y+23	; 0x17
    2b40:	88 8d       	ldd	r24, Y+24	; 0x18
    2b42:	99 8d       	ldd	r25, Y+25	; 0x19
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e8       	ldi	r20, 0x80	; 128
    2b4a:	5f e3       	ldi	r21, 0x3F	; 63
    2b4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b50:	88 23       	and	r24, r24
    2b52:	2c f4       	brge	.+10     	; 0x2b5e <LCD_vidInit+0x452>
		__ticks = 1;
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	9d 8b       	std	Y+21, r25	; 0x15
    2b5a:	8c 8b       	std	Y+20, r24	; 0x14
    2b5c:	3f c0       	rjmp	.+126    	; 0x2bdc <LCD_vidInit+0x4d0>
	else if (__tmp > 65535)
    2b5e:	6e 89       	ldd	r22, Y+22	; 0x16
    2b60:	7f 89       	ldd	r23, Y+23	; 0x17
    2b62:	88 8d       	ldd	r24, Y+24	; 0x18
    2b64:	99 8d       	ldd	r25, Y+25	; 0x19
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	3f ef       	ldi	r19, 0xFF	; 255
    2b6a:	4f e7       	ldi	r20, 0x7F	; 127
    2b6c:	57 e4       	ldi	r21, 0x47	; 71
    2b6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b72:	18 16       	cp	r1, r24
    2b74:	4c f5       	brge	.+82     	; 0x2bc8 <LCD_vidInit+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b76:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2b78:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2b7a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b7c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e2       	ldi	r20, 0x20	; 32
    2b84:	51 e4       	ldi	r21, 0x41	; 65
    2b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	bc 01       	movw	r22, r24
    2b90:	cd 01       	movw	r24, r26
    2b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	9d 8b       	std	Y+21, r25	; 0x15
    2b9c:	8c 8b       	std	Y+20, r24	; 0x14
    2b9e:	0f c0       	rjmp	.+30     	; 0x2bbe <LCD_vidInit+0x4b2>
    2ba0:	88 ec       	ldi	r24, 0xC8	; 200
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	9b 8b       	std	Y+19, r25	; 0x13
    2ba6:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ba8:	8a 89       	ldd	r24, Y+18	; 0x12
    2baa:	9b 89       	ldd	r25, Y+19	; 0x13
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <LCD_vidInit+0x4a0>
    2bb0:	9b 8b       	std	Y+19, r25	; 0x13
    2bb2:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb4:	8c 89       	ldd	r24, Y+20	; 0x14
    2bb6:	9d 89       	ldd	r25, Y+21	; 0x15
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	9d 8b       	std	Y+21, r25	; 0x15
    2bbc:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bbe:	8c 89       	ldd	r24, Y+20	; 0x14
    2bc0:	9d 89       	ldd	r25, Y+21	; 0x15
    2bc2:	00 97       	sbiw	r24, 0x00	; 0
    2bc4:	69 f7       	brne	.-38     	; 0x2ba0 <LCD_vidInit+0x494>
    2bc6:	24 c0       	rjmp	.+72     	; 0x2c10 <LCD_vidInit+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc8:	6e 89       	ldd	r22, Y+22	; 0x16
    2bca:	7f 89       	ldd	r23, Y+23	; 0x17
    2bcc:	88 8d       	ldd	r24, Y+24	; 0x18
    2bce:	99 8d       	ldd	r25, Y+25	; 0x19
    2bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	9d 8b       	std	Y+21, r25	; 0x15
    2bda:	8c 8b       	std	Y+20, r24	; 0x14
    2bdc:	8c 89       	ldd	r24, Y+20	; 0x14
    2bde:	9d 89       	ldd	r25, Y+21	; 0x15
    2be0:	99 8b       	std	Y+17, r25	; 0x11
    2be2:	88 8b       	std	Y+16, r24	; 0x10
    2be4:	88 89       	ldd	r24, Y+16	; 0x10
    2be6:	99 89       	ldd	r25, Y+17	; 0x11
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <LCD_vidInit+0x4dc>
    2bec:	99 8b       	std	Y+17, r25	; 0x11
    2bee:	88 8b       	std	Y+16, r24	; 0x10
    2bf0:	0f c0       	rjmp	.+30     	; 0x2c10 <LCD_vidInit+0x504>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bf2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2bf4:	78 a1       	ldd	r23, Y+32	; 0x20
    2bf6:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	8e 8f       	std	Y+30, r24	; 0x1e
    2c04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c06:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c08:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c0a:	8a 95       	dec	r24
    2c0c:	f1 f7       	brne	.-4      	; 0x2c0a <LCD_vidInit+0x4fe>
    2c0e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_vidSendCmd(DISPLAY_CLEAR);
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_vidSendCmd>
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	a0 e0       	ldi	r26, 0x00	; 0
    2c1c:	b0 e4       	ldi	r27, 0x40	; 64
    2c1e:	8b 87       	std	Y+11, r24	; 0x0b
    2c20:	9c 87       	std	Y+12, r25	; 0x0c
    2c22:	ad 87       	std	Y+13, r26	; 0x0d
    2c24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c26:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c28:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	4a ef       	ldi	r20, 0xFA	; 250
    2c34:	54 e4       	ldi	r21, 0x44	; 68
    2c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	8f 83       	std	Y+7, r24	; 0x07
    2c40:	98 87       	std	Y+8, r25	; 0x08
    2c42:	a9 87       	std	Y+9, r26	; 0x09
    2c44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c46:	6f 81       	ldd	r22, Y+7	; 0x07
    2c48:	78 85       	ldd	r23, Y+8	; 0x08
    2c4a:	89 85       	ldd	r24, Y+9	; 0x09
    2c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	40 e8       	ldi	r20, 0x80	; 128
    2c54:	5f e3       	ldi	r21, 0x3F	; 63
    2c56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c5a:	88 23       	and	r24, r24
    2c5c:	2c f4       	brge	.+10     	; 0x2c68 <LCD_vidInit+0x55c>
		__ticks = 1;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	9e 83       	std	Y+6, r25	; 0x06
    2c64:	8d 83       	std	Y+5, r24	; 0x05
    2c66:	3f c0       	rjmp	.+126    	; 0x2ce6 <LCD_vidInit+0x5da>
	else if (__tmp > 65535)
    2c68:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6a:	78 85       	ldd	r23, Y+8	; 0x08
    2c6c:	89 85       	ldd	r24, Y+9	; 0x09
    2c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	3f ef       	ldi	r19, 0xFF	; 255
    2c74:	4f e7       	ldi	r20, 0x7F	; 127
    2c76:	57 e4       	ldi	r21, 0x47	; 71
    2c78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c7c:	18 16       	cp	r1, r24
    2c7e:	4c f5       	brge	.+82     	; 0x2cd2 <LCD_vidInit+0x5c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c80:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c82:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c86:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	40 e2       	ldi	r20, 0x20	; 32
    2c8e:	51 e4       	ldi	r21, 0x41	; 65
    2c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	bc 01       	movw	r22, r24
    2c9a:	cd 01       	movw	r24, r26
    2c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	9e 83       	std	Y+6, r25	; 0x06
    2ca6:	8d 83       	std	Y+5, r24	; 0x05
    2ca8:	0f c0       	rjmp	.+30     	; 0x2cc8 <LCD_vidInit+0x5bc>
    2caa:	88 ec       	ldi	r24, 0xC8	; 200
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	9c 83       	std	Y+4, r25	; 0x04
    2cb0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	f1 f7       	brne	.-4      	; 0x2cb6 <LCD_vidInit+0x5aa>
    2cba:	9c 83       	std	Y+4, r25	; 0x04
    2cbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc2:	01 97       	sbiw	r24, 0x01	; 1
    2cc4:	9e 83       	std	Y+6, r25	; 0x06
    2cc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cca:	9e 81       	ldd	r25, Y+6	; 0x06
    2ccc:	00 97       	sbiw	r24, 0x00	; 0
    2cce:	69 f7       	brne	.-38     	; 0x2caa <LCD_vidInit+0x59e>
    2cd0:	14 c0       	rjmp	.+40     	; 0x2cfa <LCD_vidInit+0x5ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd4:	78 85       	ldd	r23, Y+8	; 0x08
    2cd6:	89 85       	ldd	r24, Y+9	; 0x09
    2cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	9e 83       	std	Y+6, r25	; 0x06
    2ce4:	8d 83       	std	Y+5, r24	; 0x05
    2ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cea:	9a 83       	std	Y+2, r25	; 0x02
    2cec:	89 83       	std	Y+1, r24	; 0x01
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf2:	01 97       	sbiw	r24, 0x01	; 1
    2cf4:	f1 f7       	brne	.-4      	; 0x2cf2 <LCD_vidInit+0x5e6>
    2cf6:	9a 83       	std	Y+2, r25	; 0x02
    2cf8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_vidSendCmd(local_u8EntryModeSet);
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e3 5b       	subi	r30, 0xB3	; 179
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	80 81       	ld	r24, Z
    2d02:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_vidSendCmd>

#elif LCD_MODE == FOUR_BITS
#else
#error "Wrong Configuration !"
#endif
}
    2d06:	c1 5b       	subi	r28, 0xB1	; 177
    2d08:	df 4f       	sbci	r29, 0xFF	; 255
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	de bf       	out	0x3e, r29	; 62
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	cd bf       	out	0x3d, r28	; 61
    2d14:	cf 91       	pop	r28
    2d16:	df 91       	pop	r29
    2d18:	1f 91       	pop	r17
    2d1a:	0f 91       	pop	r16
    2d1c:	08 95       	ret

00002d1e <LCD_vidSendCmd>:

//function to send command
void LCD_vidSendCmd(u8 Copy_u8Cmd){
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
    2d26:	69 97       	sbiw	r28, 0x19	; 25
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	f8 94       	cli
    2d2c:	de bf       	out	0x3e, r29	; 62
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	cd bf       	out	0x3d, r28	; 61
    2d32:	89 8f       	std	Y+25, r24	; 0x19
	DIO_u8setPinVal(RS_PORT, RS_PIN, DIO_LOW);
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	62 e0       	ldi	r22, 0x02	; 2
    2d38:	40 e0       	ldi	r20, 0x00	; 0
    2d3a:	0e 94 05 0b 	call	0x160a	; 0x160a <DIO_u8setPinVal>
	DIO_u8setPinVal(RW_PORT, RW_PIN, DIO_LOW);
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	61 e0       	ldi	r22, 0x01	; 1
    2d42:	40 e0       	ldi	r20, 0x00	; 0
    2d44:	0e 94 05 0b 	call	0x160a	; 0x160a <DIO_u8setPinVal>

#if  LCD_MODE == EIGHT_BITS
	DIO_u8setPinVal(E_PORT, E_PIN, DIO_HIGH);
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	60 e0       	ldi	r22, 0x00	; 0
    2d4c:	41 e0       	ldi	r20, 0x01	; 1
    2d4e:	0e 94 05 0b 	call	0x160a	; 0x160a <DIO_u8setPinVal>
	DIO_u8setPortVal(LCD_DATA_PORT, Copy_u8Cmd);
    2d52:	82 e0       	ldi	r24, 0x02	; 2
    2d54:	69 8d       	ldd	r22, Y+25	; 0x19
    2d56:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_u8setPortVal>
	DIO_u8setPinVal(E_PORT, E_PIN, DIO_LOW);
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	60 e0       	ldi	r22, 0x00	; 0
    2d5e:	40 e0       	ldi	r20, 0x00	; 0
    2d60:	0e 94 05 0b 	call	0x160a	; 0x160a <DIO_u8setPinVal>
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	a0 e8       	ldi	r26, 0x80	; 128
    2d6a:	bf e3       	ldi	r27, 0x3F	; 63
    2d6c:	8d 8b       	std	Y+21, r24	; 0x15
    2d6e:	9e 8b       	std	Y+22, r25	; 0x16
    2d70:	af 8b       	std	Y+23, r26	; 0x17
    2d72:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d74:	6d 89       	ldd	r22, Y+21	; 0x15
    2d76:	7e 89       	ldd	r23, Y+22	; 0x16
    2d78:	8f 89       	ldd	r24, Y+23	; 0x17
    2d7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d7c:	2b ea       	ldi	r18, 0xAB	; 171
    2d7e:	3a ea       	ldi	r19, 0xAA	; 170
    2d80:	4a e2       	ldi	r20, 0x2A	; 42
    2d82:	50 e4       	ldi	r21, 0x40	; 64
    2d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	89 8b       	std	Y+17, r24	; 0x11
    2d8e:	9a 8b       	std	Y+18, r25	; 0x12
    2d90:	ab 8b       	std	Y+19, r26	; 0x13
    2d92:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2d94:	69 89       	ldd	r22, Y+17	; 0x11
    2d96:	7a 89       	ldd	r23, Y+18	; 0x12
    2d98:	8b 89       	ldd	r24, Y+19	; 0x13
    2d9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	40 e8       	ldi	r20, 0x80	; 128
    2da2:	5f e3       	ldi	r21, 0x3F	; 63
    2da4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2da8:	88 23       	and	r24, r24
    2daa:	1c f4       	brge	.+6      	; 0x2db2 <LCD_vidSendCmd+0x94>
		__ticks = 1;
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	88 8b       	std	Y+16, r24	; 0x10
    2db0:	91 c0       	rjmp	.+290    	; 0x2ed4 <LCD_vidSendCmd+0x1b6>
	else if (__tmp > 255)
    2db2:	69 89       	ldd	r22, Y+17	; 0x11
    2db4:	7a 89       	ldd	r23, Y+18	; 0x12
    2db6:	8b 89       	ldd	r24, Y+19	; 0x13
    2db8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	4f e7       	ldi	r20, 0x7F	; 127
    2dc0:	53 e4       	ldi	r21, 0x43	; 67
    2dc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dc6:	18 16       	cp	r1, r24
    2dc8:	0c f0       	brlt	.+2      	; 0x2dcc <LCD_vidSendCmd+0xae>
    2dca:	7b c0       	rjmp	.+246    	; 0x2ec2 <LCD_vidSendCmd+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    2dcc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dce:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	4a e7       	ldi	r20, 0x7A	; 122
    2dda:	54 e4       	ldi	r21, 0x44	; 68
    2ddc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	8c 87       	std	Y+12, r24	; 0x0c
    2de6:	9d 87       	std	Y+13, r25	; 0x0d
    2de8:	ae 87       	std	Y+14, r26	; 0x0e
    2dea:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dec:	6c 85       	ldd	r22, Y+12	; 0x0c
    2dee:	7d 85       	ldd	r23, Y+13	; 0x0d
    2df0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2df2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	4a ef       	ldi	r20, 0xFA	; 250
    2dfa:	54 e4       	ldi	r21, 0x44	; 68
    2dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	88 87       	std	Y+8, r24	; 0x08
    2e06:	99 87       	std	Y+9, r25	; 0x09
    2e08:	aa 87       	std	Y+10, r26	; 0x0a
    2e0a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e0c:	68 85       	ldd	r22, Y+8	; 0x08
    2e0e:	79 85       	ldd	r23, Y+9	; 0x09
    2e10:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e12:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e8       	ldi	r20, 0x80	; 128
    2e1a:	5f e3       	ldi	r21, 0x3F	; 63
    2e1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e20:	88 23       	and	r24, r24
    2e22:	2c f4       	brge	.+10     	; 0x2e2e <LCD_vidSendCmd+0x110>
		__ticks = 1;
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	9f 83       	std	Y+7, r25	; 0x07
    2e2a:	8e 83       	std	Y+6, r24	; 0x06
    2e2c:	3f c0       	rjmp	.+126    	; 0x2eac <LCD_vidSendCmd+0x18e>
	else if (__tmp > 65535)
    2e2e:	68 85       	ldd	r22, Y+8	; 0x08
    2e30:	79 85       	ldd	r23, Y+9	; 0x09
    2e32:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e34:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	3f ef       	ldi	r19, 0xFF	; 255
    2e3a:	4f e7       	ldi	r20, 0x7F	; 127
    2e3c:	57 e4       	ldi	r21, 0x47	; 71
    2e3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e42:	18 16       	cp	r1, r24
    2e44:	4c f5       	brge	.+82     	; 0x2e98 <LCD_vidSendCmd+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e46:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e48:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	40 e2       	ldi	r20, 0x20	; 32
    2e54:	51 e4       	ldi	r21, 0x41	; 65
    2e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	bc 01       	movw	r22, r24
    2e60:	cd 01       	movw	r24, r26
    2e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	9f 83       	std	Y+7, r25	; 0x07
    2e6c:	8e 83       	std	Y+6, r24	; 0x06
    2e6e:	0f c0       	rjmp	.+30     	; 0x2e8e <LCD_vidSendCmd+0x170>
    2e70:	88 ec       	ldi	r24, 0xC8	; 200
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	9d 83       	std	Y+5, r25	; 0x05
    2e76:	8c 83       	std	Y+4, r24	; 0x04
    2e78:	8c 81       	ldd	r24, Y+4	; 0x04
    2e7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	f1 f7       	brne	.-4      	; 0x2e7c <LCD_vidSendCmd+0x15e>
    2e80:	9d 83       	std	Y+5, r25	; 0x05
    2e82:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e84:	8e 81       	ldd	r24, Y+6	; 0x06
    2e86:	9f 81       	ldd	r25, Y+7	; 0x07
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	9f 83       	std	Y+7, r25	; 0x07
    2e8c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e90:	9f 81       	ldd	r25, Y+7	; 0x07
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	69 f7       	brne	.-38     	; 0x2e70 <LCD_vidSendCmd+0x152>
    2e96:	24 c0       	rjmp	.+72     	; 0x2ee0 <LCD_vidSendCmd+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e98:	68 85       	ldd	r22, Y+8	; 0x08
    2e9a:	79 85       	ldd	r23, Y+9	; 0x09
    2e9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	9f 83       	std	Y+7, r25	; 0x07
    2eaa:	8e 83       	std	Y+6, r24	; 0x06
    2eac:	8e 81       	ldd	r24, Y+6	; 0x06
    2eae:	9f 81       	ldd	r25, Y+7	; 0x07
    2eb0:	9b 83       	std	Y+3, r25	; 0x03
    2eb2:	8a 83       	std	Y+2, r24	; 0x02
    2eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	f1 f7       	brne	.-4      	; 0x2eb8 <LCD_vidSendCmd+0x19a>
    2ebc:	9b 83       	std	Y+3, r25	; 0x03
    2ebe:	8a 83       	std	Y+2, r24	; 0x02
    2ec0:	0f c0       	rjmp	.+30     	; 0x2ee0 <LCD_vidSendCmd+0x1c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ec2:	69 89       	ldd	r22, Y+17	; 0x11
    2ec4:	7a 89       	ldd	r23, Y+18	; 0x12
    2ec6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	88 8b       	std	Y+16, r24	; 0x10
    2ed4:	88 89       	ldd	r24, Y+16	; 0x10
    2ed6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	8a 95       	dec	r24
    2edc:	f1 f7       	brne	.-4      	; 0x2eda <LCD_vidSendCmd+0x1bc>
    2ede:	89 83       	std	Y+1, r24	; 0x01
#elif LCD_MODE == FOUR_BITS

#else
#error "Wrong Configuration !"
#endif
}
    2ee0:	69 96       	adiw	r28, 0x19	; 25
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	f8 94       	cli
    2ee6:	de bf       	out	0x3e, r29	; 62
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	cd bf       	out	0x3d, r28	; 61
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	08 95       	ret

00002ef2 <LCD_vidWriteChar>:
//function to send data
void LCD_vidWriteChar(u8 Copy_u8Char){
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	69 97       	sbiw	r28, 0x19	; 25
    2efc:	0f b6       	in	r0, 0x3f	; 63
    2efe:	f8 94       	cli
    2f00:	de bf       	out	0x3e, r29	; 62
    2f02:	0f be       	out	0x3f, r0	; 63
    2f04:	cd bf       	out	0x3d, r28	; 61
    2f06:	89 8f       	std	Y+25, r24	; 0x19
	DIO_u8setPinVal(RS_PORT, RS_PIN, DIO_HIGH);
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	62 e0       	ldi	r22, 0x02	; 2
    2f0c:	41 e0       	ldi	r20, 0x01	; 1
    2f0e:	0e 94 05 0b 	call	0x160a	; 0x160a <DIO_u8setPinVal>
	DIO_u8setPinVal(RW_PORT, RW_PIN, DIO_LOW);
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	61 e0       	ldi	r22, 0x01	; 1
    2f16:	40 e0       	ldi	r20, 0x00	; 0
    2f18:	0e 94 05 0b 	call	0x160a	; 0x160a <DIO_u8setPinVal>

#if  LCD_MODE == EIGHT_BITS
	DIO_u8setPinVal(E_PORT, E_PIN, DIO_HIGH);
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	60 e0       	ldi	r22, 0x00	; 0
    2f20:	41 e0       	ldi	r20, 0x01	; 1
    2f22:	0e 94 05 0b 	call	0x160a	; 0x160a <DIO_u8setPinVal>
	DIO_u8setPortVal(LCD_DATA_PORT, Copy_u8Char);
    2f26:	82 e0       	ldi	r24, 0x02	; 2
    2f28:	69 8d       	ldd	r22, Y+25	; 0x19
    2f2a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_u8setPortVal>
	DIO_u8setPinVal(E_PORT, E_PIN, DIO_LOW);
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	60 e0       	ldi	r22, 0x00	; 0
    2f32:	40 e0       	ldi	r20, 0x00	; 0
    2f34:	0e 94 05 0b 	call	0x160a	; 0x160a <DIO_u8setPinVal>
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	a0 e8       	ldi	r26, 0x80	; 128
    2f3e:	bf e3       	ldi	r27, 0x3F	; 63
    2f40:	8d 8b       	std	Y+21, r24	; 0x15
    2f42:	9e 8b       	std	Y+22, r25	; 0x16
    2f44:	af 8b       	std	Y+23, r26	; 0x17
    2f46:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f48:	6d 89       	ldd	r22, Y+21	; 0x15
    2f4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f50:	2b ea       	ldi	r18, 0xAB	; 171
    2f52:	3a ea       	ldi	r19, 0xAA	; 170
    2f54:	4a e2       	ldi	r20, 0x2A	; 42
    2f56:	50 e4       	ldi	r21, 0x40	; 64
    2f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	89 8b       	std	Y+17, r24	; 0x11
    2f62:	9a 8b       	std	Y+18, r25	; 0x12
    2f64:	ab 8b       	std	Y+19, r26	; 0x13
    2f66:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2f68:	69 89       	ldd	r22, Y+17	; 0x11
    2f6a:	7a 89       	ldd	r23, Y+18	; 0x12
    2f6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	40 e8       	ldi	r20, 0x80	; 128
    2f76:	5f e3       	ldi	r21, 0x3F	; 63
    2f78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f7c:	88 23       	and	r24, r24
    2f7e:	1c f4       	brge	.+6      	; 0x2f86 <LCD_vidWriteChar+0x94>
		__ticks = 1;
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	88 8b       	std	Y+16, r24	; 0x10
    2f84:	91 c0       	rjmp	.+290    	; 0x30a8 <LCD_vidWriteChar+0x1b6>
	else if (__tmp > 255)
    2f86:	69 89       	ldd	r22, Y+17	; 0x11
    2f88:	7a 89       	ldd	r23, Y+18	; 0x12
    2f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	4f e7       	ldi	r20, 0x7F	; 127
    2f94:	53 e4       	ldi	r21, 0x43	; 67
    2f96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f9a:	18 16       	cp	r1, r24
    2f9c:	0c f0       	brlt	.+2      	; 0x2fa0 <LCD_vidWriteChar+0xae>
    2f9e:	7b c0       	rjmp	.+246    	; 0x3096 <LCD_vidWriteChar+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    2fa0:	6d 89       	ldd	r22, Y+21	; 0x15
    2fa2:	7e 89       	ldd	r23, Y+22	; 0x16
    2fa4:	8f 89       	ldd	r24, Y+23	; 0x17
    2fa6:	98 8d       	ldd	r25, Y+24	; 0x18
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	4a e7       	ldi	r20, 0x7A	; 122
    2fae:	54 e4       	ldi	r21, 0x44	; 68
    2fb0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	8c 87       	std	Y+12, r24	; 0x0c
    2fba:	9d 87       	std	Y+13, r25	; 0x0d
    2fbc:	ae 87       	std	Y+14, r26	; 0x0e
    2fbe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc0:	6c 85       	ldd	r22, Y+12	; 0x0c
    2fc2:	7d 85       	ldd	r23, Y+13	; 0x0d
    2fc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	4a ef       	ldi	r20, 0xFA	; 250
    2fce:	54 e4       	ldi	r21, 0x44	; 68
    2fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	88 87       	std	Y+8, r24	; 0x08
    2fda:	99 87       	std	Y+9, r25	; 0x09
    2fdc:	aa 87       	std	Y+10, r26	; 0x0a
    2fde:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2fe0:	68 85       	ldd	r22, Y+8	; 0x08
    2fe2:	79 85       	ldd	r23, Y+9	; 0x09
    2fe4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fe6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	40 e8       	ldi	r20, 0x80	; 128
    2fee:	5f e3       	ldi	r21, 0x3F	; 63
    2ff0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ff4:	88 23       	and	r24, r24
    2ff6:	2c f4       	brge	.+10     	; 0x3002 <LCD_vidWriteChar+0x110>
		__ticks = 1;
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	9f 83       	std	Y+7, r25	; 0x07
    2ffe:	8e 83       	std	Y+6, r24	; 0x06
    3000:	3f c0       	rjmp	.+126    	; 0x3080 <LCD_vidWriteChar+0x18e>
	else if (__tmp > 65535)
    3002:	68 85       	ldd	r22, Y+8	; 0x08
    3004:	79 85       	ldd	r23, Y+9	; 0x09
    3006:	8a 85       	ldd	r24, Y+10	; 0x0a
    3008:	9b 85       	ldd	r25, Y+11	; 0x0b
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	3f ef       	ldi	r19, 0xFF	; 255
    300e:	4f e7       	ldi	r20, 0x7F	; 127
    3010:	57 e4       	ldi	r21, 0x47	; 71
    3012:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3016:	18 16       	cp	r1, r24
    3018:	4c f5       	brge	.+82     	; 0x306c <LCD_vidWriteChar+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    301a:	6c 85       	ldd	r22, Y+12	; 0x0c
    301c:	7d 85       	ldd	r23, Y+13	; 0x0d
    301e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3020:	9f 85       	ldd	r25, Y+15	; 0x0f
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	40 e2       	ldi	r20, 0x20	; 32
    3028:	51 e4       	ldi	r21, 0x41	; 65
    302a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	bc 01       	movw	r22, r24
    3034:	cd 01       	movw	r24, r26
    3036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	9f 83       	std	Y+7, r25	; 0x07
    3040:	8e 83       	std	Y+6, r24	; 0x06
    3042:	0f c0       	rjmp	.+30     	; 0x3062 <LCD_vidWriteChar+0x170>
    3044:	88 ec       	ldi	r24, 0xC8	; 200
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	9d 83       	std	Y+5, r25	; 0x05
    304a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    304c:	8c 81       	ldd	r24, Y+4	; 0x04
    304e:	9d 81       	ldd	r25, Y+5	; 0x05
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	f1 f7       	brne	.-4      	; 0x3050 <LCD_vidWriteChar+0x15e>
    3054:	9d 83       	std	Y+5, r25	; 0x05
    3056:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3058:	8e 81       	ldd	r24, Y+6	; 0x06
    305a:	9f 81       	ldd	r25, Y+7	; 0x07
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	9f 83       	std	Y+7, r25	; 0x07
    3060:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3062:	8e 81       	ldd	r24, Y+6	; 0x06
    3064:	9f 81       	ldd	r25, Y+7	; 0x07
    3066:	00 97       	sbiw	r24, 0x00	; 0
    3068:	69 f7       	brne	.-38     	; 0x3044 <LCD_vidWriteChar+0x152>
    306a:	24 c0       	rjmp	.+72     	; 0x30b4 <LCD_vidWriteChar+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    306c:	68 85       	ldd	r22, Y+8	; 0x08
    306e:	79 85       	ldd	r23, Y+9	; 0x09
    3070:	8a 85       	ldd	r24, Y+10	; 0x0a
    3072:	9b 85       	ldd	r25, Y+11	; 0x0b
    3074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	9f 83       	std	Y+7, r25	; 0x07
    307e:	8e 83       	std	Y+6, r24	; 0x06
    3080:	8e 81       	ldd	r24, Y+6	; 0x06
    3082:	9f 81       	ldd	r25, Y+7	; 0x07
    3084:	9b 83       	std	Y+3, r25	; 0x03
    3086:	8a 83       	std	Y+2, r24	; 0x02
    3088:	8a 81       	ldd	r24, Y+2	; 0x02
    308a:	9b 81       	ldd	r25, Y+3	; 0x03
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	f1 f7       	brne	.-4      	; 0x308c <LCD_vidWriteChar+0x19a>
    3090:	9b 83       	std	Y+3, r25	; 0x03
    3092:	8a 83       	std	Y+2, r24	; 0x02
    3094:	0f c0       	rjmp	.+30     	; 0x30b4 <LCD_vidWriteChar+0x1c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3096:	69 89       	ldd	r22, Y+17	; 0x11
    3098:	7a 89       	ldd	r23, Y+18	; 0x12
    309a:	8b 89       	ldd	r24, Y+19	; 0x13
    309c:	9c 89       	ldd	r25, Y+20	; 0x14
    309e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	88 8b       	std	Y+16, r24	; 0x10
    30a8:	88 89       	ldd	r24, Y+16	; 0x10
    30aa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	8a 95       	dec	r24
    30b0:	f1 f7       	brne	.-4      	; 0x30ae <LCD_vidWriteChar+0x1bc>
    30b2:	89 83       	std	Y+1, r24	; 0x01
#elif LCD_MODE == FOUR_BITS

#else
#error "Wrong Configuration !"
#endif
}
    30b4:	69 96       	adiw	r28, 0x19	; 25
    30b6:	0f b6       	in	r0, 0x3f	; 63
    30b8:	f8 94       	cli
    30ba:	de bf       	out	0x3e, r29	; 62
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	cd bf       	out	0x3d, r28	; 61
    30c0:	cf 91       	pop	r28
    30c2:	df 91       	pop	r29
    30c4:	08 95       	ret

000030c6 <LCD_vidClear>:

//function to clear the display
void LCD_vidClear(void){
    30c6:	df 93       	push	r29
    30c8:	cf 93       	push	r28
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
    30ce:	68 97       	sbiw	r28, 0x18	; 24
    30d0:	0f b6       	in	r0, 0x3f	; 63
    30d2:	f8 94       	cli
    30d4:	de bf       	out	0x3e, r29	; 62
    30d6:	0f be       	out	0x3f, r0	; 63
    30d8:	cd bf       	out	0x3d, r28	; 61
	LCD_vidSendCmd(DISPLAY_CLEAR);
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_vidSendCmd>
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	a8 ec       	ldi	r26, 0xC8	; 200
    30e6:	b2 e4       	ldi	r27, 0x42	; 66
    30e8:	8d 8b       	std	Y+21, r24	; 0x15
    30ea:	9e 8b       	std	Y+22, r25	; 0x16
    30ec:	af 8b       	std	Y+23, r26	; 0x17
    30ee:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30f0:	6d 89       	ldd	r22, Y+21	; 0x15
    30f2:	7e 89       	ldd	r23, Y+22	; 0x16
    30f4:	8f 89       	ldd	r24, Y+23	; 0x17
    30f6:	98 8d       	ldd	r25, Y+24	; 0x18
    30f8:	2b ea       	ldi	r18, 0xAB	; 171
    30fa:	3a ea       	ldi	r19, 0xAA	; 170
    30fc:	4a e2       	ldi	r20, 0x2A	; 42
    30fe:	50 e4       	ldi	r21, 0x40	; 64
    3100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	89 8b       	std	Y+17, r24	; 0x11
    310a:	9a 8b       	std	Y+18, r25	; 0x12
    310c:	ab 8b       	std	Y+19, r26	; 0x13
    310e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3110:	69 89       	ldd	r22, Y+17	; 0x11
    3112:	7a 89       	ldd	r23, Y+18	; 0x12
    3114:	8b 89       	ldd	r24, Y+19	; 0x13
    3116:	9c 89       	ldd	r25, Y+20	; 0x14
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	40 e8       	ldi	r20, 0x80	; 128
    311e:	5f e3       	ldi	r21, 0x3F	; 63
    3120:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3124:	88 23       	and	r24, r24
    3126:	1c f4       	brge	.+6      	; 0x312e <LCD_vidClear+0x68>
		__ticks = 1;
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	88 8b       	std	Y+16, r24	; 0x10
    312c:	91 c0       	rjmp	.+290    	; 0x3250 <LCD_vidClear+0x18a>
	else if (__tmp > 255)
    312e:	69 89       	ldd	r22, Y+17	; 0x11
    3130:	7a 89       	ldd	r23, Y+18	; 0x12
    3132:	8b 89       	ldd	r24, Y+19	; 0x13
    3134:	9c 89       	ldd	r25, Y+20	; 0x14
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	4f e7       	ldi	r20, 0x7F	; 127
    313c:	53 e4       	ldi	r21, 0x43	; 67
    313e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3142:	18 16       	cp	r1, r24
    3144:	0c f0       	brlt	.+2      	; 0x3148 <LCD_vidClear+0x82>
    3146:	7b c0       	rjmp	.+246    	; 0x323e <LCD_vidClear+0x178>
	{
		_delay_ms(__us / 1000.0);
    3148:	6d 89       	ldd	r22, Y+21	; 0x15
    314a:	7e 89       	ldd	r23, Y+22	; 0x16
    314c:	8f 89       	ldd	r24, Y+23	; 0x17
    314e:	98 8d       	ldd	r25, Y+24	; 0x18
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	4a e7       	ldi	r20, 0x7A	; 122
    3156:	54 e4       	ldi	r21, 0x44	; 68
    3158:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	8c 87       	std	Y+12, r24	; 0x0c
    3162:	9d 87       	std	Y+13, r25	; 0x0d
    3164:	ae 87       	std	Y+14, r26	; 0x0e
    3166:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3168:	6c 85       	ldd	r22, Y+12	; 0x0c
    316a:	7d 85       	ldd	r23, Y+13	; 0x0d
    316c:	8e 85       	ldd	r24, Y+14	; 0x0e
    316e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	4a ef       	ldi	r20, 0xFA	; 250
    3176:	54 e4       	ldi	r21, 0x44	; 68
    3178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	88 87       	std	Y+8, r24	; 0x08
    3182:	99 87       	std	Y+9, r25	; 0x09
    3184:	aa 87       	std	Y+10, r26	; 0x0a
    3186:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3188:	68 85       	ldd	r22, Y+8	; 0x08
    318a:	79 85       	ldd	r23, Y+9	; 0x09
    318c:	8a 85       	ldd	r24, Y+10	; 0x0a
    318e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	40 e8       	ldi	r20, 0x80	; 128
    3196:	5f e3       	ldi	r21, 0x3F	; 63
    3198:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    319c:	88 23       	and	r24, r24
    319e:	2c f4       	brge	.+10     	; 0x31aa <LCD_vidClear+0xe4>
		__ticks = 1;
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	9f 83       	std	Y+7, r25	; 0x07
    31a6:	8e 83       	std	Y+6, r24	; 0x06
    31a8:	3f c0       	rjmp	.+126    	; 0x3228 <LCD_vidClear+0x162>
	else if (__tmp > 65535)
    31aa:	68 85       	ldd	r22, Y+8	; 0x08
    31ac:	79 85       	ldd	r23, Y+9	; 0x09
    31ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    31b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	3f ef       	ldi	r19, 0xFF	; 255
    31b6:	4f e7       	ldi	r20, 0x7F	; 127
    31b8:	57 e4       	ldi	r21, 0x47	; 71
    31ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31be:	18 16       	cp	r1, r24
    31c0:	4c f5       	brge	.+82     	; 0x3214 <LCD_vidClear+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c2:	6c 85       	ldd	r22, Y+12	; 0x0c
    31c4:	7d 85       	ldd	r23, Y+13	; 0x0d
    31c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    31c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e2       	ldi	r20, 0x20	; 32
    31d0:	51 e4       	ldi	r21, 0x41	; 65
    31d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	9f 83       	std	Y+7, r25	; 0x07
    31e8:	8e 83       	std	Y+6, r24	; 0x06
    31ea:	0f c0       	rjmp	.+30     	; 0x320a <LCD_vidClear+0x144>
    31ec:	88 ec       	ldi	r24, 0xC8	; 200
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	9d 83       	std	Y+5, r25	; 0x05
    31f2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31f4:	8c 81       	ldd	r24, Y+4	; 0x04
    31f6:	9d 81       	ldd	r25, Y+5	; 0x05
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <LCD_vidClear+0x132>
    31fc:	9d 83       	std	Y+5, r25	; 0x05
    31fe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3200:	8e 81       	ldd	r24, Y+6	; 0x06
    3202:	9f 81       	ldd	r25, Y+7	; 0x07
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	9f 83       	std	Y+7, r25	; 0x07
    3208:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320a:	8e 81       	ldd	r24, Y+6	; 0x06
    320c:	9f 81       	ldd	r25, Y+7	; 0x07
    320e:	00 97       	sbiw	r24, 0x00	; 0
    3210:	69 f7       	brne	.-38     	; 0x31ec <LCD_vidClear+0x126>
    3212:	24 c0       	rjmp	.+72     	; 0x325c <LCD_vidClear+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3214:	68 85       	ldd	r22, Y+8	; 0x08
    3216:	79 85       	ldd	r23, Y+9	; 0x09
    3218:	8a 85       	ldd	r24, Y+10	; 0x0a
    321a:	9b 85       	ldd	r25, Y+11	; 0x0b
    321c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	9f 83       	std	Y+7, r25	; 0x07
    3226:	8e 83       	std	Y+6, r24	; 0x06
    3228:	8e 81       	ldd	r24, Y+6	; 0x06
    322a:	9f 81       	ldd	r25, Y+7	; 0x07
    322c:	9b 83       	std	Y+3, r25	; 0x03
    322e:	8a 83       	std	Y+2, r24	; 0x02
    3230:	8a 81       	ldd	r24, Y+2	; 0x02
    3232:	9b 81       	ldd	r25, Y+3	; 0x03
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	f1 f7       	brne	.-4      	; 0x3234 <LCD_vidClear+0x16e>
    3238:	9b 83       	std	Y+3, r25	; 0x03
    323a:	8a 83       	std	Y+2, r24	; 0x02
    323c:	0f c0       	rjmp	.+30     	; 0x325c <LCD_vidClear+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    323e:	69 89       	ldd	r22, Y+17	; 0x11
    3240:	7a 89       	ldd	r23, Y+18	; 0x12
    3242:	8b 89       	ldd	r24, Y+19	; 0x13
    3244:	9c 89       	ldd	r25, Y+20	; 0x14
    3246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	88 8b       	std	Y+16, r24	; 0x10
    3250:	88 89       	ldd	r24, Y+16	; 0x10
    3252:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3254:	89 81       	ldd	r24, Y+1	; 0x01
    3256:	8a 95       	dec	r24
    3258:	f1 f7       	brne	.-4      	; 0x3256 <LCD_vidClear+0x190>
    325a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);								//delay to force the next instructions to wait until the clear ins is executed
}
    325c:	68 96       	adiw	r28, 0x18	; 24
    325e:	0f b6       	in	r0, 0x3f	; 63
    3260:	f8 94       	cli
    3262:	de bf       	out	0x3e, r29	; 62
    3264:	0f be       	out	0x3f, r0	; 63
    3266:	cd bf       	out	0x3d, r28	; 61
    3268:	cf 91       	pop	r28
    326a:	df 91       	pop	r29
    326c:	08 95       	ret

0000326e <LCD_u8Goto>:

//function to go to specific segment
u8 LCD_u8Goto(u8 Copy_u8Row, u8 Copy_u8Col){
    326e:	df 93       	push	r29
    3270:	cf 93       	push	r28
    3272:	00 d0       	rcall	.+0      	; 0x3274 <LCD_u8Goto+0x6>
    3274:	00 d0       	rcall	.+0      	; 0x3276 <LCD_u8Goto+0x8>
    3276:	00 d0       	rcall	.+0      	; 0x3278 <LCD_u8Goto+0xa>
    3278:	cd b7       	in	r28, 0x3d	; 61
    327a:	de b7       	in	r29, 0x3e	; 62
    327c:	8b 83       	std	Y+3, r24	; 0x03
    327e:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_u8ErrorStatus = RT_OK;
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8Set_DDRAM_Address = SET_DDRAM_ADDRESS;
    3284:	80 e8       	ldi	r24, 0x80	; 128
    3286:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8Row){
    3288:	8b 81       	ldd	r24, Y+3	; 0x03
    328a:	28 2f       	mov	r18, r24
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	3e 83       	std	Y+6, r19	; 0x06
    3290:	2d 83       	std	Y+5, r18	; 0x05
    3292:	8d 81       	ldd	r24, Y+5	; 0x05
    3294:	9e 81       	ldd	r25, Y+6	; 0x06
    3296:	81 30       	cpi	r24, 0x01	; 1
    3298:	91 05       	cpc	r25, r1
    329a:	31 f0       	breq	.+12     	; 0x32a8 <LCD_u8Goto+0x3a>
    329c:	2d 81       	ldd	r18, Y+5	; 0x05
    329e:	3e 81       	ldd	r19, Y+6	; 0x06
    32a0:	22 30       	cpi	r18, 0x02	; 2
    32a2:	31 05       	cpc	r19, r1
    32a4:	81 f0       	breq	.+32     	; 0x32c6 <LCD_u8Goto+0x58>
    32a6:	1e c0       	rjmp	.+60     	; 0x32e4 <LCD_u8Goto+0x76>
	case 1:
		if(Copy_u8Col <= 64){
    32a8:	8c 81       	ldd	r24, Y+4	; 0x04
    32aa:	81 34       	cpi	r24, 0x41	; 65
    32ac:	48 f4       	brcc	.+18     	; 0x32c0 <LCD_u8Goto+0x52>
			local_u8Set_DDRAM_Address += (Copy_u8Col - 1);
    32ae:	9c 81       	ldd	r25, Y+4	; 0x04
    32b0:	89 81       	ldd	r24, Y+1	; 0x01
    32b2:	89 0f       	add	r24, r25
    32b4:	81 50       	subi	r24, 0x01	; 1
    32b6:	89 83       	std	Y+1, r24	; 0x01
			LCD_vidSendCmd(local_u8Set_DDRAM_Address);
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_vidSendCmd>
    32be:	14 c0       	rjmp	.+40     	; 0x32e8 <LCD_u8Goto+0x7a>
		}else{
			local_u8ErrorStatus = RT_WRONG_COLUMN_NUMBER;
    32c0:	82 e0       	ldi	r24, 0x02	; 2
    32c2:	8a 83       	std	Y+2, r24	; 0x02
    32c4:	11 c0       	rjmp	.+34     	; 0x32e8 <LCD_u8Goto+0x7a>
		}
		break;
	case 2:
		if(Copy_u8Col <= 16){
    32c6:	8c 81       	ldd	r24, Y+4	; 0x04
    32c8:	81 31       	cpi	r24, 0x11	; 17
    32ca:	48 f4       	brcc	.+18     	; 0x32de <LCD_u8Goto+0x70>
			local_u8Set_DDRAM_Address += (64 + (Copy_u8Col-1));
    32cc:	9c 81       	ldd	r25, Y+4	; 0x04
    32ce:	89 81       	ldd	r24, Y+1	; 0x01
    32d0:	89 0f       	add	r24, r25
    32d2:	81 5c       	subi	r24, 0xC1	; 193
    32d4:	89 83       	std	Y+1, r24	; 0x01
			LCD_vidSendCmd(local_u8Set_DDRAM_Address);
    32d6:	89 81       	ldd	r24, Y+1	; 0x01
    32d8:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_vidSendCmd>
    32dc:	05 c0       	rjmp	.+10     	; 0x32e8 <LCD_u8Goto+0x7a>
		}else{
			local_u8ErrorStatus = RT_WRONG_COLUMN_NUMBER;
    32de:	82 e0       	ldi	r24, 0x02	; 2
    32e0:	8a 83       	std	Y+2, r24	; 0x02
    32e2:	02 c0       	rjmp	.+4      	; 0x32e8 <LCD_u8Goto+0x7a>
		}
		break;
	default:
		local_u8ErrorStatus = RT_WRONG_ROW_NUMBER;
    32e4:	83 e0       	ldi	r24, 0x03	; 3
    32e6:	8a 83       	std	Y+2, r24	; 0x02
	}

	return local_u8ErrorStatus;
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    32ea:	26 96       	adiw	r28, 0x06	; 6
    32ec:	0f b6       	in	r0, 0x3f	; 63
    32ee:	f8 94       	cli
    32f0:	de bf       	out	0x3e, r29	; 62
    32f2:	0f be       	out	0x3f, r0	; 63
    32f4:	cd bf       	out	0x3d, r28	; 61
    32f6:	cf 91       	pop	r28
    32f8:	df 91       	pop	r29
    32fa:	08 95       	ret

000032fc <LCD_vidSendString>:

//function to send string
void LCD_vidSendString(u8 * Copy_u8CharPtr){
    32fc:	df 93       	push	r29
    32fe:	cf 93       	push	r28
    3300:	00 d0       	rcall	.+0      	; 0x3302 <LCD_vidSendString+0x6>
    3302:	0f 92       	push	r0
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    3308:	9b 83       	std	Y+3, r25	; 0x03
    330a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0;
    330c:	19 82       	std	Y+1, r1	; 0x01
    330e:	0e c0       	rjmp	.+28     	; 0x332c <LCD_vidSendString+0x30>
	while(*(Copy_u8CharPtr + i) != '\0'){
		LCD_vidWriteChar(* (Copy_u8CharPtr + i));
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	28 2f       	mov	r18, r24
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	8a 81       	ldd	r24, Y+2	; 0x02
    3318:	9b 81       	ldd	r25, Y+3	; 0x03
    331a:	fc 01       	movw	r30, r24
    331c:	e2 0f       	add	r30, r18
    331e:	f3 1f       	adc	r31, r19
    3320:	80 81       	ld	r24, Z
    3322:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <LCD_vidWriteChar>
		i++;
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	8f 5f       	subi	r24, 0xFF	; 255
    332a:	89 83       	std	Y+1, r24	; 0x01
}

//function to send string
void LCD_vidSendString(u8 * Copy_u8CharPtr){
	u8 i =0;
	while(*(Copy_u8CharPtr + i) != '\0'){
    332c:	89 81       	ldd	r24, Y+1	; 0x01
    332e:	28 2f       	mov	r18, r24
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	8a 81       	ldd	r24, Y+2	; 0x02
    3334:	9b 81       	ldd	r25, Y+3	; 0x03
    3336:	fc 01       	movw	r30, r24
    3338:	e2 0f       	add	r30, r18
    333a:	f3 1f       	adc	r31, r19
    333c:	80 81       	ld	r24, Z
    333e:	88 23       	and	r24, r24
    3340:	39 f7       	brne	.-50     	; 0x3310 <LCD_vidSendString+0x14>
		LCD_vidWriteChar(* (Copy_u8CharPtr + i));
		i++;
	}
}
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	0f 90       	pop	r0
    3348:	cf 91       	pop	r28
    334a:	df 91       	pop	r29
    334c:	08 95       	ret

0000334e <LCD_vidSendInt>:

//function to display integers
void LCD_vidSendInt(u32 Copy_u32IntNumber){
    334e:	df 93       	push	r29
    3350:	cf 93       	push	r28
    3352:	00 d0       	rcall	.+0      	; 0x3354 <LCD_vidSendInt+0x6>
    3354:	00 d0       	rcall	.+0      	; 0x3356 <LCD_vidSendInt+0x8>
    3356:	00 d0       	rcall	.+0      	; 0x3358 <LCD_vidSendInt+0xa>
    3358:	cd b7       	in	r28, 0x3d	; 61
    335a:	de b7       	in	r29, 0x3e	; 62
    335c:	9e 83       	std	Y+6, r25	; 0x06
    335e:	8d 83       	std	Y+5, r24	; 0x05
	if(Copy_u32IntNumber != 0){
    3360:	8d 81       	ldd	r24, Y+5	; 0x05
    3362:	9e 81       	ldd	r25, Y+6	; 0x06
    3364:	00 97       	sbiw	r24, 0x00	; 0
    3366:	09 f4       	brne	.+2      	; 0x336a <LCD_vidSendInt+0x1c>
    3368:	5a c0       	rjmp	.+180    	; 0x341e <LCD_vidSendInt+0xd0>
		u32 local_u32NewNumber = 0;
    336a:	1c 82       	std	Y+4, r1	; 0x04
    336c:	1b 82       	std	Y+3, r1	; 0x03
		u8 local_u8NewDigit = 0;
    336e:	1a 82       	std	Y+2, r1	; 0x02
		u8 counter = 0;
    3370:	19 82       	std	Y+1, r1	; 0x01
    3372:	28 c0       	rjmp	.+80     	; 0x33c4 <LCD_vidSendInt+0x76>
		while(Copy_u32IntNumber !=0){
			local_u8NewDigit = Copy_u32IntNumber % 10;
    3374:	8d 81       	ldd	r24, Y+5	; 0x05
    3376:	9e 81       	ldd	r25, Y+6	; 0x06
    3378:	2a e0       	ldi	r18, 0x0A	; 10
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	b9 01       	movw	r22, r18
    337e:	0e 94 ed 1b 	call	0x37da	; 0x37da <__udivmodhi4>
    3382:	8a 83       	std	Y+2, r24	; 0x02
			local_u32NewNumber = (local_u32NewNumber * 10) + local_u8NewDigit;
    3384:	8b 81       	ldd	r24, Y+3	; 0x03
    3386:	9c 81       	ldd	r25, Y+4	; 0x04
    3388:	9c 01       	movw	r18, r24
    338a:	22 0f       	add	r18, r18
    338c:	33 1f       	adc	r19, r19
    338e:	c9 01       	movw	r24, r18
    3390:	88 0f       	add	r24, r24
    3392:	99 1f       	adc	r25, r25
    3394:	88 0f       	add	r24, r24
    3396:	99 1f       	adc	r25, r25
    3398:	28 0f       	add	r18, r24
    339a:	39 1f       	adc	r19, r25
    339c:	8a 81       	ldd	r24, Y+2	; 0x02
    339e:	88 2f       	mov	r24, r24
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	82 0f       	add	r24, r18
    33a4:	93 1f       	adc	r25, r19
    33a6:	9c 83       	std	Y+4, r25	; 0x04
    33a8:	8b 83       	std	Y+3, r24	; 0x03
			Copy_u32IntNumber /= 10;
    33aa:	8d 81       	ldd	r24, Y+5	; 0x05
    33ac:	9e 81       	ldd	r25, Y+6	; 0x06
    33ae:	2a e0       	ldi	r18, 0x0A	; 10
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	b9 01       	movw	r22, r18
    33b4:	0e 94 ed 1b 	call	0x37da	; 0x37da <__udivmodhi4>
    33b8:	cb 01       	movw	r24, r22
    33ba:	9e 83       	std	Y+6, r25	; 0x06
    33bc:	8d 83       	std	Y+5, r24	; 0x05
			counter++;
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	8f 5f       	subi	r24, 0xFF	; 255
    33c2:	89 83       	std	Y+1, r24	; 0x01
void LCD_vidSendInt(u32 Copy_u32IntNumber){
	if(Copy_u32IntNumber != 0){
		u32 local_u32NewNumber = 0;
		u8 local_u8NewDigit = 0;
		u8 counter = 0;
		while(Copy_u32IntNumber !=0){
    33c4:	8d 81       	ldd	r24, Y+5	; 0x05
    33c6:	9e 81       	ldd	r25, Y+6	; 0x06
    33c8:	00 97       	sbiw	r24, 0x00	; 0
    33ca:	a1 f6       	brne	.-88     	; 0x3374 <LCD_vidSendInt+0x26>
    33cc:	19 c0       	rjmp	.+50     	; 0x3400 <LCD_vidSendInt+0xb2>
			Copy_u32IntNumber /= 10;
			counter++;
		}

		while(local_u32NewNumber !=0 ){
			local_u8NewDigit = local_u32NewNumber % 10;
    33ce:	8b 81       	ldd	r24, Y+3	; 0x03
    33d0:	9c 81       	ldd	r25, Y+4	; 0x04
    33d2:	2a e0       	ldi	r18, 0x0A	; 10
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	b9 01       	movw	r22, r18
    33d8:	0e 94 ed 1b 	call	0x37da	; 0x37da <__udivmodhi4>
    33dc:	8a 83       	std	Y+2, r24	; 0x02
			local_u32NewNumber /= 10;
    33de:	8b 81       	ldd	r24, Y+3	; 0x03
    33e0:	9c 81       	ldd	r25, Y+4	; 0x04
    33e2:	2a e0       	ldi	r18, 0x0A	; 10
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	b9 01       	movw	r22, r18
    33e8:	0e 94 ed 1b 	call	0x37da	; 0x37da <__udivmodhi4>
    33ec:	cb 01       	movw	r24, r22
    33ee:	9c 83       	std	Y+4, r25	; 0x04
    33f0:	8b 83       	std	Y+3, r24	; 0x03
			LCD_vidWriteChar('0' + local_u8NewDigit);
    33f2:	8a 81       	ldd	r24, Y+2	; 0x02
    33f4:	80 5d       	subi	r24, 0xD0	; 208
    33f6:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <LCD_vidWriteChar>
			counter--;
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
    33fc:	81 50       	subi	r24, 0x01	; 1
    33fe:	89 83       	std	Y+1, r24	; 0x01
			local_u32NewNumber = (local_u32NewNumber * 10) + local_u8NewDigit;
			Copy_u32IntNumber /= 10;
			counter++;
		}

		while(local_u32NewNumber !=0 ){
    3400:	8b 81       	ldd	r24, Y+3	; 0x03
    3402:	9c 81       	ldd	r25, Y+4	; 0x04
    3404:	00 97       	sbiw	r24, 0x00	; 0
    3406:	19 f7       	brne	.-58     	; 0x33ce <LCD_vidSendInt+0x80>
    3408:	06 c0       	rjmp	.+12     	; 0x3416 <LCD_vidSendInt+0xc8>
			LCD_vidWriteChar('0' + local_u8NewDigit);
			counter--;
		}

		while(counter !=0){
			LCD_vidWriteChar('0');
    340a:	80 e3       	ldi	r24, 0x30	; 48
    340c:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <LCD_vidWriteChar>
			counter--;
    3410:	89 81       	ldd	r24, Y+1	; 0x01
    3412:	81 50       	subi	r24, 0x01	; 1
    3414:	89 83       	std	Y+1, r24	; 0x01
			local_u32NewNumber /= 10;
			LCD_vidWriteChar('0' + local_u8NewDigit);
			counter--;
		}

		while(counter !=0){
    3416:	89 81       	ldd	r24, Y+1	; 0x01
    3418:	88 23       	and	r24, r24
    341a:	b9 f7       	brne	.-18     	; 0x340a <LCD_vidSendInt+0xbc>
    341c:	03 c0       	rjmp	.+6      	; 0x3424 <LCD_vidSendInt+0xd6>
			LCD_vidWriteChar('0');
			counter--;
		}
	}else{
		LCD_vidWriteChar('0');
    341e:	80 e3       	ldi	r24, 0x30	; 48
    3420:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <LCD_vidWriteChar>
	}

}
    3424:	26 96       	adiw	r28, 0x06	; 6
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	f8 94       	cli
    342a:	de bf       	out	0x3e, r29	; 62
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	cd bf       	out	0x3d, r28	; 61
    3430:	cf 91       	pop	r28
    3432:	df 91       	pop	r29
    3434:	08 95       	ret

00003436 <LCD_vidShiftDisplayRight>:

//function to shift right
void LCD_vidShiftDisplayRight(void){
    3436:	df 93       	push	r29
    3438:	cf 93       	push	r28
    343a:	0f 92       	push	r0
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ShiftDisplayRightCmd = SHIFT_ENTIRE_DISPLAY ;
    3440:	88 e1       	ldi	r24, 0x18	; 24
    3442:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(local_u8ShiftDisplayRightCmd, 2);
    3444:	89 81       	ldd	r24, Y+1	; 0x01
    3446:	84 60       	ori	r24, 0x04	; 4
    3448:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidSendCmd(local_u8ShiftDisplayRightCmd);
    344a:	89 81       	ldd	r24, Y+1	; 0x01
    344c:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_vidSendCmd>
}
    3450:	0f 90       	pop	r0
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <LCD_vidShiftDisplayLeft>:

//function to shift left
void LCD_vidShiftDisplayLeft(void){
    3458:	df 93       	push	r29
    345a:	cf 93       	push	r28
    345c:	0f 92       	push	r0
    345e:	cd b7       	in	r28, 0x3d	; 61
    3460:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ShiftDisplayLeftCmd = SHIFT_ENTIRE_DISPLAY;
    3462:	88 e1       	ldi	r24, 0x18	; 24
    3464:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(local_u8ShiftDisplayLeftCmd, 2);
    3466:	89 81       	ldd	r24, Y+1	; 0x01
    3468:	8b 7f       	andi	r24, 0xFB	; 251
    346a:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidSendCmd(local_u8ShiftDisplayLeftCmd);
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_vidSendCmd>
}
    3472:	0f 90       	pop	r0
    3474:	cf 91       	pop	r28
    3476:	df 91       	pop	r29
    3478:	08 95       	ret

0000347a <LCD_vidShiftCursorLeft>:

//function to shift the cursor left
void LCD_vidShiftCursorLeft(void){
    347a:	df 93       	push	r29
    347c:	cf 93       	push	r28
    347e:	0f 92       	push	r0
    3480:	cd b7       	in	r28, 0x3d	; 61
    3482:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ShiftCursorLeftCmd = SHIFT_CURSOR;
    3484:	80 e1       	ldi	r24, 0x10	; 16
    3486:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(local_u8ShiftCursorLeftCmd, 2);
    3488:	89 81       	ldd	r24, Y+1	; 0x01
    348a:	8b 7f       	andi	r24, 0xFB	; 251
    348c:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidSendCmd(local_u8ShiftCursorLeftCmd);
    348e:	89 81       	ldd	r24, Y+1	; 0x01
    3490:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_vidSendCmd>
}
    3494:	0f 90       	pop	r0
    3496:	cf 91       	pop	r28
    3498:	df 91       	pop	r29
    349a:	08 95       	ret

0000349c <LCD_vidShiftCursorRight>:
//function to shift the cursor right
void LCD_vidShiftCursorRight(void){
    349c:	df 93       	push	r29
    349e:	cf 93       	push	r28
    34a0:	0f 92       	push	r0
    34a2:	cd b7       	in	r28, 0x3d	; 61
    34a4:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ShiftCursorRightCmd = SHIFT_CURSOR;
    34a6:	80 e1       	ldi	r24, 0x10	; 16
    34a8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(local_u8ShiftCursorRightCmd, 2);
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	84 60       	ori	r24, 0x04	; 4
    34ae:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidSendCmd(local_u8ShiftCursorRightCmd);
    34b0:	89 81       	ldd	r24, Y+1	; 0x01
    34b2:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_vidSendCmd>
}
    34b6:	0f 90       	pop	r0
    34b8:	cf 91       	pop	r28
    34ba:	df 91       	pop	r29
    34bc:	08 95       	ret

000034be <main>:
static void vUartReceive_Callback( u8 bit );
static void vFilter(u8 *ptdata);
static void vPrintData(void);

int main ()
{
    34be:	df 93       	push	r29
    34c0:	cf 93       	push	r28
    34c2:	0f 92       	push	r0
    34c4:	cd b7       	in	r28, 0x3d	; 61
    34c6:	de b7       	in	r29, 0x3e	; 62
	LED_e arr[]={LED_e_1};
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	89 83       	std	Y+1, r24	; 0x01
	LED_vidInit(arr, 1);
    34cc:	ce 01       	movw	r24, r28
    34ce:	01 96       	adiw	r24, 0x01	; 1
    34d0:	61 e0       	ldi	r22, 0x01	; 1
    34d2:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LED_vidInit>

	/* UART Interrupt */
	USART_init( &UART );
    34d6:	84 e7       	ldi	r24, 0x74	; 116
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	0e 94 4f 06 	call	0xc9e	; 0xc9e <USART_init>
	USART_ReceiveData_interrupt(vUartReceive_Callback);
    34de:	85 e8       	ldi	r24, 0x85	; 133
    34e0:	9a e1       	ldi	r25, 0x1A	; 26
    34e2:	0e 94 47 07 	call	0xe8e	; 0xe8e <USART_ReceiveData_interrupt>


	/*  CAN  Init  */
	HMCP2515_voidInitTransimiter() ;
    34e6:	0e 94 db 10 	call	0x21b6	; 0x21b6 <HMCP2515_voidInitTransimiter>
	//	HMCP2515_voidRecievInit()      ;
	LED_vidTurnOnLed(LED_e_1);
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	0e 94 46 13 	call	0x268c	; 0x268c <LED_vidTurnOnLed>

	while(1)
	{
		if (Filter_Enable_Bit == 1)
    34f0:	80 91 9b 00 	lds	r24, 0x009B
    34f4:	81 30       	cpi	r24, 0x01	; 1
    34f6:	e1 f7       	brne	.-8      	; 0x34f0 <main+0x32>
		{
//			vPrintData();
			vFilter(Received_Message);
    34f8:	80 e9       	ldi	r24, 0x90	; 144
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <vFilter>
			Filter_Enable_Bit = 0;
    3500:	10 92 9b 00 	sts	0x009B, r1
			counter = 0;
    3504:	10 92 7f 00 	sts	0x007F, r1
    3508:	f3 cf       	rjmp	.-26     	; 0x34f0 <main+0x32>

0000350a <vUartReceive_Callback>:
	}
}


void vUartReceive_Callback( u8 bit )
{
    350a:	df 93       	push	r29
    350c:	cf 93       	push	r28
    350e:	0f 92       	push	r0
    3510:	cd b7       	in	r28, 0x3d	; 61
    3512:	de b7       	in	r29, 0x3e	; 62
    3514:	89 83       	std	Y+1, r24	; 0x01
	if ( bit != '#'){
    3516:	89 81       	ldd	r24, Y+1	; 0x01
    3518:	83 32       	cpi	r24, 0x23	; 35
    351a:	51 f0       	breq	.+20     	; 0x3530 <vUartReceive_Callback+0x26>

		Received_Message[counter] = bit;
    351c:	80 91 7f 00 	lds	r24, 0x007F
    3520:	88 2f       	mov	r24, r24
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	fc 01       	movw	r30, r24
    3526:	e0 57       	subi	r30, 0x70	; 112
    3528:	ff 4f       	sbci	r31, 0xFF	; 255
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	80 83       	st	Z, r24
    352e:	0c c0       	rjmp	.+24     	; 0x3548 <vUartReceive_Callback+0x3e>
	}
	else
	{
		Received_Message[counter] = bit;
    3530:	80 91 7f 00 	lds	r24, 0x007F
    3534:	88 2f       	mov	r24, r24
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	fc 01       	movw	r30, r24
    353a:	e0 57       	subi	r30, 0x70	; 112
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	89 81       	ldd	r24, Y+1	; 0x01
    3540:	80 83       	st	Z, r24
		// start action.
		Filter_Enable_Bit = 1 ;
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	80 93 9b 00 	sts	0x009B, r24
	}
	counter++;
    3548:	80 91 7f 00 	lds	r24, 0x007F
    354c:	8f 5f       	subi	r24, 0xFF	; 255
    354e:	80 93 7f 00 	sts	0x007F, r24

}
    3552:	0f 90       	pop	r0
    3554:	cf 91       	pop	r28
    3556:	df 91       	pop	r29
    3558:	08 95       	ret

0000355a <vPrintData>:

void vPrintData(void)
{
    355a:	df 93       	push	r29
    355c:	cf 93       	push	r28
    355e:	0f 92       	push	r0
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Counter = 0;
    3564:	19 82       	std	Y+1, r1	; 0x01

	LCD_vidClear();
    3566:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClear>
    356a:	0c c0       	rjmp	.+24     	; 0x3584 <vPrintData+0x2a>

	while(Received_Message[Local_u8Counter] != '#')
	{
		LCD_vidWriteChar(Received_Message[Local_u8Counter]);
    356c:	89 81       	ldd	r24, Y+1	; 0x01
    356e:	88 2f       	mov	r24, r24
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	fc 01       	movw	r30, r24
    3574:	e0 57       	subi	r30, 0x70	; 112
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	80 81       	ld	r24, Z
    357a:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <LCD_vidWriteChar>
		Local_u8Counter++;
    357e:	89 81       	ldd	r24, Y+1	; 0x01
    3580:	8f 5f       	subi	r24, 0xFF	; 255
    3582:	89 83       	std	Y+1, r24	; 0x01
{
	u8 Local_u8Counter = 0;

	LCD_vidClear();

	while(Received_Message[Local_u8Counter] != '#')
    3584:	89 81       	ldd	r24, Y+1	; 0x01
    3586:	88 2f       	mov	r24, r24
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	fc 01       	movw	r30, r24
    358c:	e0 57       	subi	r30, 0x70	; 112
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	80 81       	ld	r24, Z
    3592:	83 32       	cpi	r24, 0x23	; 35
    3594:	59 f7       	brne	.-42     	; 0x356c <vPrintData+0x12>
	{
		LCD_vidWriteChar(Received_Message[Local_u8Counter]);
		Local_u8Counter++;
	}
	LCD_vidWriteChar(Received_Message[Local_u8Counter]);
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	88 2f       	mov	r24, r24
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	fc 01       	movw	r30, r24
    359e:	e0 57       	subi	r30, 0x70	; 112
    35a0:	ff 4f       	sbci	r31, 0xFF	; 255
    35a2:	80 81       	ld	r24, Z
    35a4:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <LCD_vidWriteChar>
}
    35a8:	0f 90       	pop	r0
    35aa:	cf 91       	pop	r28
    35ac:	df 91       	pop	r29
    35ae:	08 95       	ret

000035b0 <vFilter>:


void vFilter(u8 *ptdata)
{
    35b0:	df 93       	push	r29
    35b2:	cf 93       	push	r28
    35b4:	cd b7       	in	r28, 0x3d	; 61
    35b6:	de b7       	in	r29, 0x3e	; 62
    35b8:	28 97       	sbiw	r28, 0x08	; 8
    35ba:	0f b6       	in	r0, 0x3f	; 63
    35bc:	f8 94       	cli
    35be:	de bf       	out	0x3e, r29	; 62
    35c0:	0f be       	out	0x3f, r0	; 63
    35c2:	cd bf       	out	0x3d, r28	; 61
    35c4:	9e 83       	std	Y+6, r25	; 0x06
    35c6:	8d 83       	std	Y+5, r24	; 0x05

	u32 _CAN_Msg_ID_ ;

	// start Filter
	u32 Local_u8Counter = 0;
    35c8:	1a 82       	std	Y+2, r1	; 0x02
    35ca:	19 82       	std	Y+1, r1	; 0x01

	switch (ptdata[0]) {
    35cc:	ed 81       	ldd	r30, Y+5	; 0x05
    35ce:	fe 81       	ldd	r31, Y+6	; 0x06
    35d0:	80 81       	ld	r24, Z
    35d2:	28 2f       	mov	r18, r24
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	38 87       	std	Y+8, r19	; 0x08
    35d8:	2f 83       	std	Y+7, r18	; 0x07
    35da:	8f 81       	ldd	r24, Y+7	; 0x07
    35dc:	98 85       	ldd	r25, Y+8	; 0x08
    35de:	8c 34       	cpi	r24, 0x4C	; 76
    35e0:	91 05       	cpc	r25, r1
    35e2:	09 f4       	brne	.+2      	; 0x35e6 <vFilter+0x36>
    35e4:	d1 c0       	rjmp	.+418    	; 0x3788 <vFilter+0x1d8>
    35e6:	2f 81       	ldd	r18, Y+7	; 0x07
    35e8:	38 85       	ldd	r19, Y+8	; 0x08
    35ea:	2d 34       	cpi	r18, 0x4D	; 77
    35ec:	31 05       	cpc	r19, r1
    35ee:	64 f4       	brge	.+24     	; 0x3608 <vFilter+0x58>
    35f0:	8f 81       	ldd	r24, Y+7	; 0x07
    35f2:	98 85       	ldd	r25, Y+8	; 0x08
    35f4:	83 34       	cpi	r24, 0x43	; 67
    35f6:	91 05       	cpc	r25, r1
    35f8:	09 f4       	brne	.+2      	; 0x35fc <vFilter+0x4c>
    35fa:	c6 c0       	rjmp	.+396    	; 0x3788 <vFilter+0x1d8>
    35fc:	2f 81       	ldd	r18, Y+7	; 0x07
    35fe:	38 85       	ldd	r19, Y+8	; 0x08
    3600:	24 34       	cpi	r18, 0x44	; 68
    3602:	31 05       	cpc	r19, r1
    3604:	09 f1       	breq	.+66     	; 0x3648 <vFilter+0x98>
    3606:	da c0       	rjmp	.+436    	; 0x37bc <vFilter+0x20c>
    3608:	8f 81       	ldd	r24, Y+7	; 0x07
    360a:	98 85       	ldd	r25, Y+8	; 0x08
    360c:	82 35       	cpi	r24, 0x52	; 82
    360e:	91 05       	cpc	r25, r1
    3610:	09 f4       	brne	.+2      	; 0x3614 <vFilter+0x64>
    3612:	ba c0       	rjmp	.+372    	; 0x3788 <vFilter+0x1d8>
    3614:	2f 81       	ldd	r18, Y+7	; 0x07
    3616:	38 85       	ldd	r19, Y+8	; 0x08
    3618:	23 35       	cpi	r18, 0x53	; 83
    361a:	31 05       	cpc	r19, r1
    361c:	09 f4       	brne	.+2      	; 0x3620 <vFilter+0x70>
    361e:	54 c0       	rjmp	.+168    	; 0x36c8 <vFilter+0x118>
    3620:	cd c0       	rjmp	.+410    	; 0x37bc <vFilter+0x20c>
	case _DISTANCE_BIT_ : // 'D'
	{

		// send this character and the next one to the [Adaptive Cruise Node] ,then add '$' Using "CAN" , so the final message.
		while(ptdata[Local_u8Counter] != '#'){
			Transmit_Message[Local_u8Counter] = ptdata[Local_u8Counter];
    3622:	49 81       	ldd	r20, Y+1	; 0x01
    3624:	5a 81       	ldd	r21, Y+2	; 0x02
    3626:	2d 81       	ldd	r18, Y+5	; 0x05
    3628:	3e 81       	ldd	r19, Y+6	; 0x06
    362a:	89 81       	ldd	r24, Y+1	; 0x01
    362c:	9a 81       	ldd	r25, Y+2	; 0x02
    362e:	f9 01       	movw	r30, r18
    3630:	e8 0f       	add	r30, r24
    3632:	f9 1f       	adc	r31, r25
    3634:	80 81       	ld	r24, Z
    3636:	fa 01       	movw	r30, r20
    3638:	eb 56       	subi	r30, 0x6B	; 107
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	80 83       	st	Z, r24
			Local_u8Counter++;
    363e:	89 81       	ldd	r24, Y+1	; 0x01
    3640:	9a 81       	ldd	r25, Y+2	; 0x02
    3642:	01 96       	adiw	r24, 0x01	; 1
    3644:	9a 83       	std	Y+2, r25	; 0x02
    3646:	89 83       	std	Y+1, r24	; 0x01
	switch (ptdata[0]) {
	case _DISTANCE_BIT_ : // 'D'
	{

		// send this character and the next one to the [Adaptive Cruise Node] ,then add '$' Using "CAN" , so the final message.
		while(ptdata[Local_u8Counter] != '#'){
    3648:	2d 81       	ldd	r18, Y+5	; 0x05
    364a:	3e 81       	ldd	r19, Y+6	; 0x06
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	9a 81       	ldd	r25, Y+2	; 0x02
    3650:	f9 01       	movw	r30, r18
    3652:	e8 0f       	add	r30, r24
    3654:	f9 1f       	adc	r31, r25
    3656:	80 81       	ld	r24, Z
    3658:	83 32       	cpi	r24, 0x23	; 35
    365a:	19 f7       	brne	.-58     	; 0x3622 <vFilter+0x72>
			Transmit_Message[Local_u8Counter] = ptdata[Local_u8Counter];
			Local_u8Counter++;
		}
		Transmit_Message[Local_u8Counter] = ptdata[Local_u8Counter];
    365c:	49 81       	ldd	r20, Y+1	; 0x01
    365e:	5a 81       	ldd	r21, Y+2	; 0x02
    3660:	2d 81       	ldd	r18, Y+5	; 0x05
    3662:	3e 81       	ldd	r19, Y+6	; 0x06
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	9a 81       	ldd	r25, Y+2	; 0x02
    3668:	f9 01       	movw	r30, r18
    366a:	e8 0f       	add	r30, r24
    366c:	f9 1f       	adc	r31, r25
    366e:	80 81       	ld	r24, Z
    3670:	fa 01       	movw	r30, r20
    3672:	eb 56       	subi	r30, 0x6B	; 107
    3674:	ff 4f       	sbci	r31, 0xFF	; 255
    3676:	80 83       	st	Z, r24
		Local_u8Counter++;
    3678:	89 81       	ldd	r24, Y+1	; 0x01
    367a:	9a 81       	ldd	r25, Y+2	; 0x02
    367c:	01 96       	adiw	r24, 0x01	; 1
    367e:	9a 83       	std	Y+2, r25	; 0x02
    3680:	89 83       	std	Y+1, r24	; 0x01
		//MASK for Adaptive   0x3
		//Filter ( 1 )  0xff01
		//Filter ( 2 )  0xff12

		// send this message.
		_CAN_Msg_ID_ =0x00000003 ;
    3682:	83 e0       	ldi	r24, 0x03	; 3
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	9c 83       	std	Y+4, r25	; 0x04
    3688:	8b 83       	std	Y+3, r24	; 0x03
		HMCP2515_VidSendCAN_Msg(Address , _CAN_Msg_ID_ , Local_u8Counter ,Transmit_Message) ;
    368a:	99 81       	ldd	r25, Y+1	; 0x01
    368c:	2b 81       	ldd	r18, Y+3	; 0x03
    368e:	3c 81       	ldd	r19, Y+4	; 0x04
    3690:	e5 e9       	ldi	r30, 0x95	; 149
    3692:	f0 e0       	ldi	r31, 0x00	; 0
    3694:	80 e3       	ldi	r24, 0x30	; 48
    3696:	b9 01       	movw	r22, r18
    3698:	49 2f       	mov	r20, r25
    369a:	9f 01       	movw	r18, r30
    369c:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <HMCP2515_VidSendCAN_Msg>
    36a0:	93 c0       	rjmp	.+294    	; 0x37c8 <vFilter+0x218>
	}

	case _SIGN_BIT_ :
	{
		while(ptdata[Local_u8Counter] != '#'){
			Transmit_Message[Local_u8Counter] = ptdata[Local_u8Counter];
    36a2:	49 81       	ldd	r20, Y+1	; 0x01
    36a4:	5a 81       	ldd	r21, Y+2	; 0x02
    36a6:	2d 81       	ldd	r18, Y+5	; 0x05
    36a8:	3e 81       	ldd	r19, Y+6	; 0x06
    36aa:	89 81       	ldd	r24, Y+1	; 0x01
    36ac:	9a 81       	ldd	r25, Y+2	; 0x02
    36ae:	f9 01       	movw	r30, r18
    36b0:	e8 0f       	add	r30, r24
    36b2:	f9 1f       	adc	r31, r25
    36b4:	80 81       	ld	r24, Z
    36b6:	fa 01       	movw	r30, r20
    36b8:	eb 56       	subi	r30, 0x6B	; 107
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	80 83       	st	Z, r24
			Local_u8Counter++;
    36be:	89 81       	ldd	r24, Y+1	; 0x01
    36c0:	9a 81       	ldd	r25, Y+2	; 0x02
    36c2:	01 96       	adiw	r24, 0x01	; 1
    36c4:	9a 83       	std	Y+2, r25	; 0x02
    36c6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	case _SIGN_BIT_ :
	{
		while(ptdata[Local_u8Counter] != '#'){
    36c8:	2d 81       	ldd	r18, Y+5	; 0x05
    36ca:	3e 81       	ldd	r19, Y+6	; 0x06
    36cc:	89 81       	ldd	r24, Y+1	; 0x01
    36ce:	9a 81       	ldd	r25, Y+2	; 0x02
    36d0:	f9 01       	movw	r30, r18
    36d2:	e8 0f       	add	r30, r24
    36d4:	f9 1f       	adc	r31, r25
    36d6:	80 81       	ld	r24, Z
    36d8:	83 32       	cpi	r24, 0x23	; 35
    36da:	19 f7       	brne	.-58     	; 0x36a2 <vFilter+0xf2>
			Transmit_Message[Local_u8Counter] = ptdata[Local_u8Counter];
			Local_u8Counter++;
		}
		Transmit_Message[Local_u8Counter] = ptdata[Local_u8Counter];
    36dc:	49 81       	ldd	r20, Y+1	; 0x01
    36de:	5a 81       	ldd	r21, Y+2	; 0x02
    36e0:	2d 81       	ldd	r18, Y+5	; 0x05
    36e2:	3e 81       	ldd	r19, Y+6	; 0x06
    36e4:	89 81       	ldd	r24, Y+1	; 0x01
    36e6:	9a 81       	ldd	r25, Y+2	; 0x02
    36e8:	f9 01       	movw	r30, r18
    36ea:	e8 0f       	add	r30, r24
    36ec:	f9 1f       	adc	r31, r25
    36ee:	80 81       	ld	r24, Z
    36f0:	fa 01       	movw	r30, r20
    36f2:	eb 56       	subi	r30, 0x6B	; 107
    36f4:	ff 4f       	sbci	r31, 0xFF	; 255
    36f6:	80 83       	st	Z, r24
		Local_u8Counter++;
    36f8:	89 81       	ldd	r24, Y+1	; 0x01
    36fa:	9a 81       	ldd	r25, Y+2	; 0x02
    36fc:	01 96       	adiw	r24, 0x01	; 1
    36fe:	9a 83       	std	Y+2, r25	; 0x02
    3700:	89 83       	std	Y+1, r24	; 0x01

		if ((ptdata[1] == _SIGN_BUMP_BIT_) ||  (ptdata[1] == _SIGN_SPEED_BIT_))
    3702:	8d 81       	ldd	r24, Y+5	; 0x05
    3704:	9e 81       	ldd	r25, Y+6	; 0x06
    3706:	fc 01       	movw	r30, r24
    3708:	31 96       	adiw	r30, 0x01	; 1
    370a:	80 81       	ld	r24, Z
    370c:	82 36       	cpi	r24, 0x62	; 98
    370e:	39 f0       	breq	.+14     	; 0x371e <vFilter+0x16e>
    3710:	8d 81       	ldd	r24, Y+5	; 0x05
    3712:	9e 81       	ldd	r25, Y+6	; 0x06
    3714:	fc 01       	movw	r30, r24
    3716:	31 96       	adiw	r30, 0x01	; 1
    3718:	80 81       	ld	r24, Z
    371a:	83 37       	cpi	r24, 0x73	; 115
    371c:	81 f4       	brne	.+32     	; 0x373e <vFilter+0x18e>
			// ID FOR Int and Adative is 0Xff02
			//MASK  for interface  0x2
			//Filter ( 1 )  0xff02
			//filter (2)
			// send this message.
			_CAN_Msg_ID_ =0X00000001 ;
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	9c 83       	std	Y+4, r25	; 0x04
    3724:	8b 83       	std	Y+3, r24	; 0x03
			HMCP2515_VidSendCAN_Msg(Address ,_CAN_Msg_ID_ ,Local_u8Counter ,Transmit_Message) ;
    3726:	99 81       	ldd	r25, Y+1	; 0x01
    3728:	2b 81       	ldd	r18, Y+3	; 0x03
    372a:	3c 81       	ldd	r19, Y+4	; 0x04
    372c:	e5 e9       	ldi	r30, 0x95	; 149
    372e:	f0 e0       	ldi	r31, 0x00	; 0
    3730:	80 e3       	ldi	r24, 0x30	; 48
    3732:	b9 01       	movw	r22, r18
    3734:	49 2f       	mov	r20, r25
    3736:	9f 01       	movw	r18, r30
    3738:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <HMCP2515_VidSendCAN_Msg>
    373c:	45 c0       	rjmp	.+138    	; 0x37c8 <vFilter+0x218>

		}
		else if((ptdata[1] == _SIGN_TURN_LEFT_BIT_ ) || (ptdata[1] == _SIGN_TURN_RIGHT_BIT_))
    373e:	8d 81       	ldd	r24, Y+5	; 0x05
    3740:	9e 81       	ldd	r25, Y+6	; 0x06
    3742:	fc 01       	movw	r30, r24
    3744:	31 96       	adiw	r30, 0x01	; 1
    3746:	80 81       	ld	r24, Z
    3748:	8c 36       	cpi	r24, 0x6C	; 108
    374a:	39 f0       	breq	.+14     	; 0x375a <vFilter+0x1aa>
    374c:	8d 81       	ldd	r24, Y+5	; 0x05
    374e:	9e 81       	ldd	r25, Y+6	; 0x06
    3750:	fc 01       	movw	r30, r24
    3752:	31 96       	adiw	r30, 0x01	; 1
    3754:	80 81       	ld	r24, Z
    3756:	82 37       	cpi	r24, 0x72	; 114
    3758:	81 f4       	brne	.+32     	; 0x377a <vFilter+0x1ca>
			// send this character and the next one to the [InterFace Node] and ,then add '$' Using "CAN" , so the final message.

			//ID  For  Int and Adative
			//Mask   0x10
			//filter[2]    0Xff10
			_CAN_Msg_ID_ =0x00000005 ;
    375a:	85 e0       	ldi	r24, 0x05	; 5
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	9c 83       	std	Y+4, r25	; 0x04
    3760:	8b 83       	std	Y+3, r24	; 0x03
			HMCP2515_VidSendCAN_Msg(Address , _CAN_Msg_ID_ ,Local_u8Counter ,Transmit_Message) ;
    3762:	99 81       	ldd	r25, Y+1	; 0x01
    3764:	2b 81       	ldd	r18, Y+3	; 0x03
    3766:	3c 81       	ldd	r19, Y+4	; 0x04
    3768:	e5 e9       	ldi	r30, 0x95	; 149
    376a:	f0 e0       	ldi	r31, 0x00	; 0
    376c:	80 e3       	ldi	r24, 0x30	; 48
    376e:	b9 01       	movw	r22, r18
    3770:	49 2f       	mov	r20, r25
    3772:	9f 01       	movw	r18, r30
    3774:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <HMCP2515_VidSendCAN_Msg>
    3778:	27 c0       	rjmp	.+78     	; 0x37c8 <vFilter+0x218>

		}
		else{
			LCD_vidClear();
    377a:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClear>
			LCD_vidSendString("Wrong Frame");
    377e:	80 e6       	ldi	r24, 0x60	; 96
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	0e 94 7e 19 	call	0x32fc	; 0x32fc <LCD_vidSendString>
    3786:	20 c0       	rjmp	.+64     	; 0x37c8 <vFilter+0x218>
	case _GO_RIGHT_BIT_ :
	case _GO_LEFT_BIT_ :
	case _IN_CENTER_BIT_ :
	{
		// send this character and the next one to the [LANE Node] ,then add '$' Using "CAN" , so the final message.
		Transmit_Message[0] = ptdata[0];
    3788:	ed 81       	ldd	r30, Y+5	; 0x05
    378a:	fe 81       	ldd	r31, Y+6	; 0x06
    378c:	80 81       	ld	r24, Z
    378e:	80 93 95 00 	sts	0x0095, r24
		Local_u8Counter++;
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	9a 81       	ldd	r25, Y+2	; 0x02
    3796:	01 96       	adiw	r24, 0x01	; 1
    3798:	9a 83       	std	Y+2, r25	; 0x02
    379a:	89 83       	std	Y+1, r24	; 0x01

		//ID for Lane Node
		//Mask 0x4
		//filter [1 ] 0X4
		_CAN_Msg_ID_ =0x00000004 ;
    379c:	84 e0       	ldi	r24, 0x04	; 4
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	9c 83       	std	Y+4, r25	; 0x04
    37a2:	8b 83       	std	Y+3, r24	; 0x03
		HMCP2515_VidSendCAN_Msg(Address , _CAN_Msg_ID_ ,Local_u8Counter ,Transmit_Message) ;
    37a4:	99 81       	ldd	r25, Y+1	; 0x01
    37a6:	2b 81       	ldd	r18, Y+3	; 0x03
    37a8:	3c 81       	ldd	r19, Y+4	; 0x04
    37aa:	e5 e9       	ldi	r30, 0x95	; 149
    37ac:	f0 e0       	ldi	r31, 0x00	; 0
    37ae:	80 e3       	ldi	r24, 0x30	; 48
    37b0:	b9 01       	movw	r22, r18
    37b2:	49 2f       	mov	r20, r25
    37b4:	9f 01       	movw	r18, r30
    37b6:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <HMCP2515_VidSendCAN_Msg>
    37ba:	06 c0       	rjmp	.+12     	; 0x37c8 <vFilter+0x218>
		break;
	}


	default :
		LCD_vidClear();
    37bc:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClear>
		LCD_vidSendString("Wrong Frame");
    37c0:	80 e6       	ldi	r24, 0x60	; 96
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	0e 94 7e 19 	call	0x32fc	; 0x32fc <LCD_vidSendString>
		break;


	}
}
    37c8:	28 96       	adiw	r28, 0x08	; 8
    37ca:	0f b6       	in	r0, 0x3f	; 63
    37cc:	f8 94       	cli
    37ce:	de bf       	out	0x3e, r29	; 62
    37d0:	0f be       	out	0x3f, r0	; 63
    37d2:	cd bf       	out	0x3d, r28	; 61
    37d4:	cf 91       	pop	r28
    37d6:	df 91       	pop	r29
    37d8:	08 95       	ret

000037da <__udivmodhi4>:
    37da:	aa 1b       	sub	r26, r26
    37dc:	bb 1b       	sub	r27, r27
    37de:	51 e1       	ldi	r21, 0x11	; 17
    37e0:	07 c0       	rjmp	.+14     	; 0x37f0 <__udivmodhi4_ep>

000037e2 <__udivmodhi4_loop>:
    37e2:	aa 1f       	adc	r26, r26
    37e4:	bb 1f       	adc	r27, r27
    37e6:	a6 17       	cp	r26, r22
    37e8:	b7 07       	cpc	r27, r23
    37ea:	10 f0       	brcs	.+4      	; 0x37f0 <__udivmodhi4_ep>
    37ec:	a6 1b       	sub	r26, r22
    37ee:	b7 0b       	sbc	r27, r23

000037f0 <__udivmodhi4_ep>:
    37f0:	88 1f       	adc	r24, r24
    37f2:	99 1f       	adc	r25, r25
    37f4:	5a 95       	dec	r21
    37f6:	a9 f7       	brne	.-22     	; 0x37e2 <__udivmodhi4_loop>
    37f8:	80 95       	com	r24
    37fa:	90 95       	com	r25
    37fc:	bc 01       	movw	r22, r24
    37fe:	cd 01       	movw	r24, r26
    3800:	08 95       	ret

00003802 <__prologue_saves__>:
    3802:	2f 92       	push	r2
    3804:	3f 92       	push	r3
    3806:	4f 92       	push	r4
    3808:	5f 92       	push	r5
    380a:	6f 92       	push	r6
    380c:	7f 92       	push	r7
    380e:	8f 92       	push	r8
    3810:	9f 92       	push	r9
    3812:	af 92       	push	r10
    3814:	bf 92       	push	r11
    3816:	cf 92       	push	r12
    3818:	df 92       	push	r13
    381a:	ef 92       	push	r14
    381c:	ff 92       	push	r15
    381e:	0f 93       	push	r16
    3820:	1f 93       	push	r17
    3822:	cf 93       	push	r28
    3824:	df 93       	push	r29
    3826:	cd b7       	in	r28, 0x3d	; 61
    3828:	de b7       	in	r29, 0x3e	; 62
    382a:	ca 1b       	sub	r28, r26
    382c:	db 0b       	sbc	r29, r27
    382e:	0f b6       	in	r0, 0x3f	; 63
    3830:	f8 94       	cli
    3832:	de bf       	out	0x3e, r29	; 62
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	cd bf       	out	0x3d, r28	; 61
    3838:	09 94       	ijmp

0000383a <__epilogue_restores__>:
    383a:	2a 88       	ldd	r2, Y+18	; 0x12
    383c:	39 88       	ldd	r3, Y+17	; 0x11
    383e:	48 88       	ldd	r4, Y+16	; 0x10
    3840:	5f 84       	ldd	r5, Y+15	; 0x0f
    3842:	6e 84       	ldd	r6, Y+14	; 0x0e
    3844:	7d 84       	ldd	r7, Y+13	; 0x0d
    3846:	8c 84       	ldd	r8, Y+12	; 0x0c
    3848:	9b 84       	ldd	r9, Y+11	; 0x0b
    384a:	aa 84       	ldd	r10, Y+10	; 0x0a
    384c:	b9 84       	ldd	r11, Y+9	; 0x09
    384e:	c8 84       	ldd	r12, Y+8	; 0x08
    3850:	df 80       	ldd	r13, Y+7	; 0x07
    3852:	ee 80       	ldd	r14, Y+6	; 0x06
    3854:	fd 80       	ldd	r15, Y+5	; 0x05
    3856:	0c 81       	ldd	r16, Y+4	; 0x04
    3858:	1b 81       	ldd	r17, Y+3	; 0x03
    385a:	aa 81       	ldd	r26, Y+2	; 0x02
    385c:	b9 81       	ldd	r27, Y+1	; 0x01
    385e:	ce 0f       	add	r28, r30
    3860:	d1 1d       	adc	r29, r1
    3862:	0f b6       	in	r0, 0x3f	; 63
    3864:	f8 94       	cli
    3866:	de bf       	out	0x3e, r29	; 62
    3868:	0f be       	out	0x3f, r0	; 63
    386a:	cd bf       	out	0x3d, r28	; 61
    386c:	ed 01       	movw	r28, r26
    386e:	08 95       	ret

00003870 <_exit>:
    3870:	f8 94       	cli

00003872 <__stop_program>:
    3872:	ff cf       	rjmp	.-2      	; 0x3872 <__stop_program>
